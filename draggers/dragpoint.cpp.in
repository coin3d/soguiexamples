/**************************************************************************\
 *
 *  This file is part of a set of example programs for the Coin library.
 *  Copyright (C) 2000-2003 by Systems in Motion. All rights reserved.
 *
 *                   <URL:http://www.coin3d.org>
 *
 *  This sourcecode can be redistributed and/or modified under the
 *  terms of the GNU General Public License version 2 as published by
 *  the Free Software Foundation. See the file COPYING at the root
 *  directory of the distribution for more details.
 *
 *  As a special exception, all sourcecode of the demo examples can be
 *  used for any purpose for licensees of the Coin Professional
 *  Edition License, without the restrictions of the GNU GPL. See our
 *  web pages for information about how to acquire a Professional Edition
 *  License.
 *
 *  Systems in Motion, <URL:http://www.sim.no>, <mailto:support@sim.no>
 *
\**************************************************************************/

#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/draggers/SoDragPointDragger.h>
#include <Inventor/nodes/SoGroup.h>
#include <Inventor/nodes/SoMaterial.h>
#include <Inventor/nodes/SoPickStyle.h>
#include <Inventor/nodes/SoRotationXYZ.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoSphere.h>
#include <Inventor/nodes/SoTranslation.h>

// *************************************************************************

// Print instructions on stdout.
void
show_instructions(void)
{
  (void)fprintf(stdout, "\nThis example program shows off the dragpoint dragger.\n");
  (void)fprintf(stdout, "\nQuick instructions:\n\n");
  (void)fprintf(stdout, "  * pick and drag plane or stick with left mouse button\n");
  (void)fprintf(stdout, "  * hold SHIFT while dragging plane to constrain to a single axis\n");
  (void)fprintf(stdout, "  * hit CTRL when cursor is over a dragger to rotate it\n");
  (void)fprintf(stdout, "  * hit ESC to toggle back and forth to view mode\n");
  (void)fprintf(stdout, "\n");
}

// *************************************************************************

// Construct a transparent sphere with position controlled by the
// translation field of a SoDragPointDragger.

SoSeparator *
make_transparent_sphere(SbColor color, SoSFVec3f * draggerfield)
{
  SoSeparator * sub = new SoSeparator;

  SoMaterial * mat = new SoMaterial;
  sub->addChild(mat);
  mat->transparency = 0.1;
  mat->diffuseColor.setValue(color);
  mat->emissiveColor.setValue(color / 2);

  SoTranslation * trans = new SoTranslation;
  sub->addChild(trans);
  trans->translation.connectFrom(draggerfield);

  SoPickStyle * pickstyle = new SoPickStyle;
  sub->addChild(pickstyle);
  pickstyle->style = SoPickStyle::UNPICKABLE;

  SoTranslation * offset = new SoTranslation;
  sub->addChild(offset);
  offset->translation.setValue(0, -3.5, 0);

  SoSphere * sphere = new SoSphere;
  sub->addChild(sphere);
  sphere->radius = 3;

  return sub;
}

// *************************************************************************

int
main(
  int /* argc */,
  char ** argv)
{
  @WIDGET@ window = So@Gui@::init(argv[0]);

  show_instructions();


  // Build scene graph with SoDragPointDraggers.

  SoGroup * root = new SoGroup;
  root->ref();

  const SbVec3f startpos[] = {
    SbVec3f(0, 0, 0), SbVec3f(5, 0, -1), SbVec3f(2, 5, -2)
  };
  const SbColor colors[] = {
    SbColor(1, 0, 0), SbColor(0, 1, 0), SbColor(0, 0, 1)
  };

  for (int i = 0; i < 3; i++) {
    SoDragPointDragger * dragger = new SoDragPointDragger;
    root->addChild(dragger);
    dragger->translation.setValue(startpos[i]);
    root->addChild(make_transparent_sphere(colors[i], &dragger->translation));
  }

  So@Gui@ExaminerViewer * examinerviewer = new So@Gui@ExaminerViewer(window);
  examinerviewer->setSceneGraph(root);
  examinerviewer->setViewing(FALSE);
  examinerviewer->setTransparencyType(SoGLRenderAction::ADD);
  examinerviewer->show(); // SoXt needs this to map the window.

  So@Gui@::show(window);
  So@Gui@::mainLoop();

  delete examinerviewer;
  root->unref();

  return 0;
} // main()

// *************************************************************************
