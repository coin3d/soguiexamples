/**************************************************************************\
 * Copyright (c) Kongsberg Oil & Gas Technologies AS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\**************************************************************************/

#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/draggers/SoTranslate1Dragger.h>
#include <Inventor/nodes/SoGroup.h>
#include <Inventor/nodes/SoRotationXYZ.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoTranslation.h>

#ifndef M_PI
#define M_PI 3.1415926535f
#endif // ! M_PI

// *************************************************************************

// Coordinate triplets are ( x-position, y-position, z-rotation).

SbVec3f coordinates[] = {
  // C
  SbVec3f(0, 0, 90), SbVec3f(1, 1, 0), SbVec3f(1, -1, 0),
  // O
  SbVec3f(4, 0, 90), SbVec3f(5, 1, 0), SbVec3f(5, -1, 0), SbVec3f(6, 0, 90),
  // I
  SbVec3f(8, 0, 90),
  // N
  SbVec3f(10, 0, 90), SbVec3f(11, 0, -45), SbVec3f(12, 0, 90)
};

// *************************************************************************

// Construct "dragger subgraphs", with dragger translated and rotated
// to correct position and orientation.
SoSeparator *
construct_positioned_dragger(const SbVec3f & posvec)
{
  SoSeparator * root = new SoSeparator;

  SoTranslation * trans = new SoTranslation;
  root->addChild(trans);
  trans->translation.setValue(posvec[0], posvec[1], 0.0f);

  SoRotationXYZ * rotate = new SoRotationXYZ;
  root->addChild(rotate);
  rotate->axis = SoRotationXYZ::Z;
  rotate->angle = posvec[2] * M_PI / 180.0f;

  root->addChild(new SoTranslate1Dragger);
  
  return root;
}

// *************************************************************************

// Print instructions on stdout.
void
show_instructions(void)
{
  (void)fprintf(stdout, "\nThis example program shows off the simple \"translate1\" dragger.\n");
  (void)fprintf(stdout, "\nQuick instructions:\n\n");
  (void)fprintf(stdout, "  * pick and drag with left mouse button\n");
  (void)fprintf(stdout, "  * hit ESC to toggle back and forth to view mode\n");
  (void)fprintf(stdout, "\n");
}

// *************************************************************************

int
main(
  int /* argc */,
  char ** argv)
{
  @WIDGET@ window = So@Gui@::init(argv[0]);

  show_instructions();


  // Build scene graph with SoTranslate1Draggers.

  SoGroup * root = new SoGroup;
  root->ref();

  for (unsigned int i = 0; i < sizeof(coordinates)/sizeof(SbVec3f); i++) {
    root->addChild(construct_positioned_dragger(coordinates[i]));
  }

  So@Gui@ExaminerViewer * examinerviewer = new So@Gui@ExaminerViewer(window);
  examinerviewer->setSceneGraph(root);
  examinerviewer->setViewing(FALSE);
  examinerviewer->show(); // SoXt needs this to map the window.

  So@Gui@::show(window);
  So@Gui@::mainLoop();

  delete examinerviewer;
  root->unref();

  return 0;
} // main()

// *************************************************************************
