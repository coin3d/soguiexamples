/**************************************************************************\
 * Copyright (c) Kongsberg Oil & Gas Technologies AS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\**************************************************************************/

#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/draggers/SoTranslate2Dragger.h>
#include <Inventor/nodes/SoCoordinate3.h>
#include <Inventor/nodes/SoFaceSet.h>
#include <Inventor/nodes/SoGroup.h>
#include <Inventor/nodes/SoMaterial.h>
#include <Inventor/nodes/SoPickStyle.h>
#include <Inventor/nodes/SoRotationXYZ.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoTranslation.h>

// *************************************************************************

// Print instructions on stdout.
void
show_instructions(void)
{
  (void)fprintf(stdout, "\nThis example program shows off the simple \"translate2\" dragger.\n");
  (void)fprintf(stdout, "\nQuick instructions:\n\n");
  (void)fprintf(stdout, "  * pick and drag with left mouse button\n");
  (void)fprintf(stdout, "  * hold SHIFT while dragging to constrain to a single axis\n");
  (void)fprintf(stdout, "  * hit ESC to toggle back and forth to view mode\n");
  (void)fprintf(stdout, "\n");
}

// *************************************************************************

// Construct a transparent plane with position controlled by the
// translation field of a SoTranslate2Dragger.

SoSeparator *
make_transparent_plane(SbColor color, SoSFVec3f * draggerfield)
{
  SoSeparator * sub = new SoSeparator;

  SoMaterial * mat = new SoMaterial;
  sub->addChild(mat);
  mat->transparency = 0.1f;
  mat->diffuseColor.setValue(color);
  mat->emissiveColor.setValue(color / 2);

  SoTranslation * trans = new SoTranslation;
  sub->addChild(trans);
  trans->translation.connectFrom(draggerfield);

  SoCoordinate3 * coords = new SoCoordinate3;
  sub->addChild(coords);
  coords->point.set1Value(0, SbVec3f(-3, -3, 0));
  coords->point.set1Value(1, SbVec3f(3, -3, 0));
  coords->point.set1Value(2, SbVec3f(3, 3, 0));
  coords->point.set1Value(3, SbVec3f(-3, 3, 0));

  SoPickStyle * pickstyle = new SoPickStyle;
  sub->addChild(pickstyle);
  pickstyle->style = SoPickStyle::UNPICKABLE;

  SoFaceSet * face = new SoFaceSet;
  sub->addChild(face);
  face->numVertices.setValue(4);

  return sub;
}

// *************************************************************************

int
main(
  int /* argc */,
  char ** argv)
{
  @WIDGET@ window = So@Gui@::init(argv[0]);

  show_instructions();


  // Build scene graph with SoTranslate2Draggers.

  SoGroup * root = new SoGroup;
  root->ref();

  const SbVec3f startpos[] = {
    SbVec3f(0, 0, 0), SbVec3f(10, 0, 2), SbVec3f(5, 10, 4)
  };
  const SbColor colors[] = {
    SbColor(1, 0, 0), SbColor(0, 1, 0), SbColor(0, 0, 1)
  };

  for (int i = 0; i < 3; i++) {
    SoTranslate2Dragger * dragger = new SoTranslate2Dragger;
    root->addChild(dragger);
    dragger->translation.setValue(startpos[i]);
    root->addChild(make_transparent_plane(colors[i], &dragger->translation));
  }

  So@Gui@ExaminerViewer * examinerviewer = new So@Gui@ExaminerViewer(window);
  examinerviewer->setSceneGraph(root);
  examinerviewer->setViewing(FALSE);
  examinerviewer->setTransparencyType(SoGLRenderAction::ADD);
  examinerviewer->show(); // SoXt needs this to map the window.

  So@Gui@::show(window);
  So@Gui@::mainLoop();

  delete examinerviewer;
  root->unref();

  return 0;
} // main()

// *************************************************************************
