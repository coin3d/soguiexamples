/**************************************************************************\
 *
 *  This file is part of a set of example programs for the Coin library.
 *  Copyright (C) 2000-2003 by Systems in Motion. All rights reserved.
 *
 *                   <URL:http://www.coin3d.org>
 *
 *  This sourcecode can be redistributed and/or modified under the
 *  terms of the GNU General Public License version 2 as published by
 *  the Free Software Foundation. See the file COPYING at the root
 *  directory of the distribution for more details.
 *
 *  As a special exception, all sourcecode of the demo examples can be
 *  used for any purpose for licensees of the Coin Professional
 *  Edition License, without the restrictions of the GNU GPL. See our
 *  web pages for information about how to acquire a Professional Edition
 *  License.
 *
 *  Systems in Motion, <URL:http://www.sim.no>, <mailto:support@sim.no>
 *
\**************************************************************************/

#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/SoInput.h>
#include <Inventor/SoOutput.h>
#include <Inventor/SoPickedPoint.h>
#include <Inventor/actions/SoRayPickAction.h>
#include <Inventor/events/SoMouseButtonEvent.h>
#include <Inventor/nodes/SoBaseColor.h>
#include <Inventor/nodes/SoCube.h>
#include <Inventor/nodes/SoEventCallback.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoSwitch.h>
#include <Inventor/nodes/SoTranslation.h>
#include <assert.h>
#include <stdlib.h>
#include <time.h>

#include <SmallChange/nodes/ShapeScale.h>

// Returns random value between 0.0f and 1.0f.
static float
normalized_rand(void)
{
  return float(rand())/float(RAND_MAX);
}

static SoSeparator *
construct_new_marker(const SbVec3f & v)
{
  SoSeparator * markerroot = new SoSeparator;

  SoTranslation * t = new SoTranslation;
  t->translation = v;
  markerroot->addChild(t);
  
  ShapeScale * kit = new ShapeScale;
  kit->active = TRUE;
  kit->projectedSize = 5.0f;
  
  // create the marker
  SoSeparator * markersep = new SoSeparator;

  SoBaseColor * mat = new SoBaseColor;
  mat->rgb.setValue(normalized_rand(), normalized_rand(), normalized_rand());
  markersep->addChild(mat);
  
  // marker shape should be unit size, with center in (0.0f, 0.0f, 0.0f)
  SoCube * cube = new SoCube;
  cube->width = 1.0f;
  cube->height = 1.0f;
  cube->depth = 1.0f;
  
  markersep->addChild(cube);
  kit->setPart("shape", markersep);

  markerroot->addChild(kit);

  return markerroot;
}

static void
event_cb(void * ud, SoEventCallback * n)
{
  const SoMouseButtonEvent * mbe = (SoMouseButtonEvent *)n->getEvent();
  
  if (mbe->getButton() == SoMouseButtonEvent::BUTTON1 &&
      mbe->getState() == SoButtonEvent::DOWN) {

    So@Gui@ExaminerViewer * viewer = (So@Gui@ExaminerViewer *)ud;
    
    SoRayPickAction rp(viewer->getViewportRegion());
    rp.setPoint(mbe->getPosition());
    rp.apply(viewer->getSceneManager()->getSceneGraph());

    SoPickedPoint * point = rp.getPickedPoint();
    if (point == NULL) {
      (void)fprintf(stderr, "\n** miss! **\n\n");
      return;
    }

    n->setHandled();

    const SoPath * p = rp.getCurPath();

    int i;
    for (i = 0; i < p->getLength(); i++) {
      SoNode * n = p->getNodeFromTail(i);
      if (n->isOfType(SoGroup::getClassTypeId())) {
        SoGroup * g = (SoGroup *)n;
        g->addChild(construct_new_marker(point->getPoint()));
        break;
      }
    }
    assert(i < p->getLength());
  }
}

void
show_instructions( void )
{
  (void)fprintf(stdout, 
                "\nThis example program demonstrates the use of the ShapeScale nodekit.\n"
                "\nQuick instructions:\n\n"
                "  * place the marker by clicking on a shape with the left mouse button\n"
                "  * hit ESC to toggle back and forth to view mode\n"
                "  * zoom back and forth to see how the markers stay the same size\n\n");
}

int
main(int argc, char ** argv)
{
  if (argc != 2) {
    (void) fprintf(stderr,"\nSpecify an Inventor file as argument.\n");
    return -1;
  }

  @WIDGET@ window = So@Gui@::init( argv[0] );
  ShapeScale::initClass(); // init our extension nodekit

  So@Gui@ExaminerViewer * ex1 = new So@Gui@ExaminerViewer( window );
  
  SoInput input;
  SbBool ok = input.openFile(argv[1]);
  if (!ok) {
    (void) fprintf(stderr, "Unable to open file: %s\n", argv[1]);
    return -1;
  }

  SoSeparator * root = SoDB::readAll(&input); 
  
  if (root == NULL) {
    (void) fprintf(stderr, "Unable to read file: %s\n", argv[1]);
    return -1;
  }

  show_instructions();

  SoSeparator * newroot = new SoSeparator;
  newroot->ref();
  
  newroot->addChild(root);

  // create event callback and marker nodes
  SoSeparator * sep = new SoSeparator;
  newroot->addChild(sep);
  
  SoEventCallback * ecb = new SoEventCallback;
  ecb->addEventCallback(SoMouseButtonEvent::getClassTypeId(), event_cb, ex1);
  sep->addChild(ecb);
  
  ex1->setSceneGraph(newroot);
  ex1->setViewing(FALSE);
  
  ex1->show();
  So@Gui@::show( window );

  So@Gui@::mainLoop();
  delete ex1;

  newroot->unref();
  return 0;
}
