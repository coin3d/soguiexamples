/**************************************************************************\
 *
 *  Copyright (C) 2000 by Systems in Motion.  All rights reserved.
 *
 *  This file is part of the Coin library.
 *
 *  This file may be distributed under the terms of the Q Public License
 *  as defined by Troll Tech AS of Norway and appearing in the file
 *  LICENSE.QPL included in the packaging of this file.
 *
 *  If you want to use Coin in applications not covered by licenses
 *  compatible with the QPL, you can contact SIM to aquire a
 *  Professional Edition license for Coin.
 *
 *  Systems in Motion AS, Prof. Brochs gate 6, N-7030 Trondheim, NORWAY
 *  http://www.sim.no/ sales@sim.no Voice: +47 73540378 Fax: +47 73943861
 *
\**************************************************************************/

#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/SoDB.h>
#include <Inventor/actions/SoSearchAction.h>
#include <Inventor/manips/SoPointLightManip.h>
#include <Inventor/nodes/SoSeparator.h>


// *************************************************************************

static const char scenegraph[] = "#Inventor V2.1 ascii\n"
"Separator {\n"
"   DEF RedLight   PointLight { location -10 -10 10  color 1 0 0 }\n"
"   DEF GreenLight PointLight { location  -5 5 10  color 0 1 0 }\n"
"   DEF BlueLight  PointLight { location  10 10 10  color 0 0 1 }\n"
"   Material { diffuseColor 0.5 0.5 0.5  specularColor 1 1 1 }\n"
"   Array {\n"
"     origin CENTER\n"
"     numElements1 3  separation1 5.5 0 0\n"
"     numElements2 3  separation2 0 5.5 0\n"
"\n"
"     Sphere { radius 3 }\n"
"   }\n"
"}\n";

// *************************************************************************

// Print a quick instructions notice on stdout.
void
show_instructions( void )
{
  (void)fprintf( stdout, "\nThis example program demonstrates how pointlight manipulators works.\n" );
  (void)fprintf( stdout, "\nQuick instructions:\n\n" );
  (void)fprintf( stdout, "  * pick the manipulators with left mouse button and drag\n" );
  (void)fprintf( stdout, "    to modify the position of the pointlights\n" );
  (void)fprintf( stdout, "  * hit ESC to toggle back and forth to view mode\n" );
  (void)fprintf( stdout, "\n" );
}

// *************************************************************************


int
main(
  int argc,
  char ** argv )
{
  @WINWIDGET@ window = So@Gui@::init( argv[0] );

  show_instructions();

  SoInput in;
  in.setBuffer( (void *)scenegraph, strlen( scenegraph ) );
  SoSeparator * root = SoDB::readAll( &in );
  if ( root == NULL ) exit( 1 ); // Shouldn't happen.
  root->ref();

  const char * pointlightnames[3] = { "RedLight", "GreenLight", "BlueLight" };
  SoSearchAction sa;

  for (int i = 0; i < 3; i++) {
    sa.setName( pointlightnames[i] );
    sa.setInterest( SoSearchAction::FIRST );
    sa.setSearchingAll( FALSE );
    sa.apply( root );
    SoPath * path = sa.getPath();
    if ( path == NULL) exit( 1 ); // Shouldn't happen.

    SoPointLightManip * manip = new SoPointLightManip;
    manip->replaceNode( path );
  }


  So@Gui@ExaminerViewer * examinerviewer = new So@Gui@ExaminerViewer( window );
  examinerviewer->setViewing( FALSE );
  examinerviewer->setHeadlight( FALSE );
  examinerviewer->setSceneGraph( root );
  // We want nice transparency, not that ugly default "screendoor" stuff.
  examinerviewer->setTransparencyType( SoGLRenderAction::DELAYED_BLEND );

  examinerviewer->show(); // SoXt needs this to map the window.

  So@Gui@::show( window );
  So@Gui@::mainLoop();

  delete examinerviewer;
  root->unref();

  return 0;
} // main()

// *************************************************************************
