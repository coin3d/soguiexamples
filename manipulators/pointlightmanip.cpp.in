/**************************************************************************\
 * Copyright (c) Kongsberg Oil & Gas Technologies AS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\**************************************************************************/

#include <stdlib.h> // exit()
#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/SoDB.h>
#include <Inventor/actions/SoSearchAction.h>
#include <Inventor/manips/SoPointLightManip.h>
#include <Inventor/nodes/SoSeparator.h>


// *************************************************************************

static const char scenegraph[] = "#Inventor V2.1 ascii\n"
"Separator {\n"
"   DEF RedLight   PointLight { location -10 -10 10  color 1 0 0 }\n"
"   DEF GreenLight PointLight { location  -5 5 10  color 0 1 0 }\n"
"   DEF BlueLight  PointLight { location  10 10 10  color 0 0 1 }\n"
"   Material { diffuseColor 0.5 0.5 0.5  specularColor 1 1 1 }\n"
"   Array {\n"
"     origin CENTER\n"
"     numElements1 3  separation1 5.5 0 0\n"
"     numElements2 3  separation2 0 5.5 0\n"
"\n"
"     Sphere { radius 3 }\n"
"   }\n"
"}\n";

// *************************************************************************

// Print a quick instructions notice on stdout.
void
show_instructions( void )
{
  (void)fprintf( stdout, "\nThis example program demonstrates how pointlight manipulators works.\n" );
  (void)fprintf( stdout, "\nQuick instructions:\n\n" );
  (void)fprintf( stdout, "  * pick the manipulators with left mouse button and drag\n" );
  (void)fprintf( stdout, "    to modify the position of the pointlights\n" );
  (void)fprintf( stdout, "  * hit ESC to toggle back and forth to view mode\n" );
  (void)fprintf( stdout, "\n" );
}

// *************************************************************************


int
main(
  int argc,
  char ** argv )
{
  @WIDGET@ window = So@Gui@::init( argv[0] );

  show_instructions();

  SoInput in;
  in.setBuffer( (void *)scenegraph, strlen( scenegraph ) );
  SoSeparator * root = SoDB::readAll( &in );
  if ( root == NULL ) exit( 1 ); // Shouldn't happen.
  root->ref();

  const char * pointlightnames[3] = { "RedLight", "GreenLight", "BlueLight" };
  SoSearchAction sa;

  for (int i = 0; i < 3; i++) {
    sa.setName( pointlightnames[i] );
    sa.setInterest( SoSearchAction::FIRST );
    sa.setSearchingAll( FALSE );
    sa.apply( root );
    SoPath * path = sa.getPath();
    if ( path == NULL) exit( 1 ); // Shouldn't happen.

    SoPointLightManip * manip = new SoPointLightManip;
    manip->replaceNode( path );
  }


  So@Gui@ExaminerViewer * examinerviewer = new So@Gui@ExaminerViewer( window );
  examinerviewer->setViewing( FALSE );
  examinerviewer->setHeadlight( FALSE );
  examinerviewer->setSceneGraph( root );
  // We want nice transparency, not that ugly default "screendoor" stuff.
  examinerviewer->setTransparencyType( SoGLRenderAction::DELAYED_BLEND );

  examinerviewer->show(); // SoXt needs this to map the window.

  So@Gui@::show( window );
  So@Gui@::mainLoop();

  delete examinerviewer;
  root->unref();

  return 0;
} // main()

// *************************************************************************
