/**************************************************************************\
 * Copyright (c) Kongsberg Oil & Gas Technologies AS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\**************************************************************************/

#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/actions/SoRayPickAction.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoSphere.h>
#include <Inventor/nodes/SoTranslation.h>
#include <Inventor/nodes/SoEventCallback.h>
#include <Inventor/events/SoMouseButtonEvent.h>
#include <Inventor/SoPickedPoint.h>

#include <VolumeViz/nodes/SoTransferFunction.h>
#include <VolumeViz/nodes/SoVolumeData.h>
#include <VolumeViz/nodes/SoVolumeRender.h>
#include <VolumeViz/nodes/SoVolumeRendering.h>
#include <VolumeViz/nodes/SoOrthoSlice.h>
#include <VolumeViz/details/SoOrthoSliceDetail.h>
#include <VolumeViz/readers/SoVRVolFileReader.h>

#include "OrthoSliceHandler.h"
#include "TransferFunctionHandler.h"
#include "utility.h"

static void
event_cb(void * ud, SoEventCallback * n)
{
  const SoMouseButtonEvent * mbe = (SoMouseButtonEvent *)n->getEvent();

  if (mbe->getButton() == SoMouseButtonEvent::BUTTON1 &&
      mbe->getState() == SoButtonEvent::DOWN) {
    So@Gui@ExaminerViewer * viewer = (So@Gui@ExaminerViewer *)ud;

    SoRayPickAction rp(viewer->getViewportRegion());
    rp.setPoint(mbe->getPosition());
    rp.apply(viewer->getSceneManager()->getSceneGraph());

    SoPickedPoint * point = rp.getPickedPoint();
    if (point == NULL) {
      (void)fprintf(stderr, "\n** miss! **\n\n");
      return;
    }

    n->setHandled();

    SbVec3f v = point->getPoint();
    SbVec3f nv = point->getNormal();
    (void)fprintf(stdout,
                  "SoPickedPoint::getPoint()=<%f, %f, %f>, "
                  "SoPickedPoint::getNormal()=<%f, %f, %f>\n",
                  v[0], v[1], v[2], nv[0], nv[1], nv[2]);

    const SoDetail * d = point->getDetail();
    if (d && d->getTypeId() == SoOrthoSliceDetail::getClassTypeId()) {
      SoOrthoSliceDetail * detail = (SoOrthoSliceDetail *)d;

      v = detail->getValueObjectPos();
      const SbVec3s ijk = detail->getValueDataPos();
      (void)fprintf(stdout,
                    "SoOrthoSliceDetail::getValueObjectPos()=<%f, %f, %f>, "
                    "SoOrthoSliceDetail::getValueDataPos()=<%d, %d, %d>, "
                    "SoOrthoSliceDetail::getValue==%u\n",
                    v[0], v[1], v[2], ijk[0], ijk[1], ijk[2],
                    detail->getValue());
    }
  }
}

int
main(int argc, char ** argv)
{
  @WIDGET@ window = So@Gui@::init(argv[0]);
  SoVolumeRendering::init();

  SoSeparator * root = new SoSeparator;
  root->ref();

  uint8_t * voxeldata = NULL;
  SoVolumeData * volumedata = NULL;

  // Add SoVolumeData to scene graph

  if (argc != 2) { // Generate dataset
    SbVec3s dim = SbVec3s(64, 64, 64);
    voxeldata = generate8bitVoxelSet(dim);

    volumedata = new SoVolumeData();
    volumedata->setVolumeData(dim, voxeldata, SoVolumeData::UNSIGNED_BYTE);
    volumedata->setVolumeSize(SbBox3f(-64, -32, -32, 64, 32, 32));
    root->addChild(volumedata);
  }
  else { // Read VOL file
    SoVRVolFileReader * filereader = new SoVRVolFileReader;
    filereader->setUserData(argv[1]);

    volumedata = new SoVolumeData();
    volumedata->setReader(*filereader);
    root->addChild(volumedata);
  }

  // Add TransferFunction (color map) to scene graph
  SoTransferFunction * transfunc = new SoTransferFunction();
  root->addChild(transfunc);

  TransferFunctionHandler * tfdia = new TransferFunctionHandler(transfunc, 0, 255);

  // Add SoOrthoSlice to scene graph
  SoOrthoSlice * orthoslice = new SoOrthoSlice();
  orthoslice->alphaUse = SoOrthoSlice::ALPHA_AS_IS;
  root->addChild(orthoslice);

  OrthoSliceHandler * osdia = new OrthoSliceHandler(orthoslice, volumedata);

  // Add SoVolumeRender to scene graph
  if (0) { // enable or disable this at will
    SoVolumeRender * volrend = new SoVolumeRender();
    root->addChild(volrend);
  }

  // These spheres are here just for testing the cutting
  // functionality.
  if (0) { // debug
    const SbBox3f & volumebbox = volumedata->getVolumeSize();
    float dx, dy, dz;
    volumebbox.getSize(dx, dy, dz);
    float mindim = SbGuiExMin(SbGuiExMin(dx, dy), dz);

    SoSphere * sph = new SoSphere;
    sph->radius = mindim * 0.1f;

    SoTranslation * translate0 = new SoTranslation;
    translate0->translation.setValue(0, 0, volumebbox.getMin()[2] - dz);
    SoTranslation * translate1 = new SoTranslation;
    translate1->translation.setValue(0, 0, volumebbox.getMax()[2] + dz);
    root->addChild(translate0);
    root->addChild(sph);
    root->addChild(translate1);
    root->addChild(sph);
  }

  So@Gui@ExaminerViewer * viewer = new So@Gui@ExaminerViewer(window);
  viewer->setBackgroundColor(SbColor(0.1f, 0.3f, 0.5f));

  SoEventCallback * ecb = new SoEventCallback;
  ecb->addEventCallback(SoMouseButtonEvent::getClassTypeId(), event_cb, viewer);
  root->addChild(ecb);

  viewer->setSceneGraph(root);

  viewer->show();
  So@Gui@::show(window);
  So@Gui@::mainLoop();
  delete viewer;

  root->unref();
  delete[] voxeldata;

  return 0;
}
