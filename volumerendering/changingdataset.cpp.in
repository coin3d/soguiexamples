/**************************************************************************\
 * Copyright (c) Kongsberg Oil & Gas Technologies AS
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\**************************************************************************/

#include <cassert>

#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/sensors/SoTimerSensor.h>

#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>

#include <VolumeViz/nodes/SoTransferFunction.h>
#include <VolumeViz/nodes/SoVolumeData.h>
#include <VolumeViz/nodes/SoVolumeRender.h>
#include <VolumeViz/nodes/SoVolumeRendering.h>

// *************************************************************************

static float
unit_rand(void)
{
  return float(rand()) / float(RAND_MAX - 1);
}

static void
addRandom8bitVoxels(uint8_t * voxels, SbVec3s & dim, const int num)
{
  for (int i=0; i < num; i++) {
    SbVec3f v(unit_rand(), unit_rand(), unit_rand());
    assert(v[0] < 1.0f && v[1] < 1.0f && v[2] < 1.0f);

    const int nx = int(dim[0] * v[0]);
    const int ny = int(dim[1] * v[1]);
    const int nz = int(dim[2] * v[2]);

    const int memposition = nz*dim[0]*dim[1] + ny*dim[0] + nx;
    voxels[memposition] = (uint8_t)(255.0 * unit_rand());
  }
}


// This function is called 20 times each second.
static void
timersensorcallback(void * data, SoSensor *)
{
  SoVolumeData * voldata = (SoVolumeData *)data;
  SbVec3s dim;
  void * voxeldata;
  SoVolumeData::DataType type;
  SbBool ok = voldata->getVolumeData(dim, voxeldata, type);
  assert(ok);

  const size_t blocksize = dim[0] * dim[1] * dim[2];
  (void)memset(voxeldata, 0, blocksize);

  addRandom8bitVoxels((uint8_t *)voxeldata, dim, 500);

  (void)fprintf(stdout, "data changed\n");
  voldata->touch();
}

int
main(int argc, char ** argv)
{
  @WIDGET@ window = So@Gui@::init(argv[0]);
  SoVolumeRendering::init();

  SoSeparator * root = new SoSeparator;
  root->ref();

  SbVec3s dim = SbVec3s(64, 64, 64);
  const size_t blocksize = dim[0] * dim[1] * dim[2];
  uint8_t * voxels = new uint8_t[blocksize];
  (void)memset(voxels, 0, blocksize);
  addRandom8bitVoxels(voxels, dim, 500);

  // Add SoVolumeData to scene graph
  SoVolumeData * volumedata = new SoVolumeData();
  volumedata->setVolumeData(dim, voxels, SoVolumeData::UNSIGNED_BYTE);
  root->addChild(volumedata);

  // Add TransferFunction (color map) to scene graph
  SoTransferFunction * transfunc = new SoTransferFunction();
  root->addChild(transfunc);

  // Add VolumeRender to scene graph
  SoVolumeRender * volrend = new SoVolumeRender();
  volrend->interpolation = SoVolumeRender::NEAREST;
  root->addChild(volrend);

  // Timer sensor
  SoTimerSensor * timer = new SoTimerSensor(timersensorcallback, volumedata);
  timer->setInterval(3.0);
  timer->schedule();

  So@Gui@ExaminerViewer * viewer = new So@Gui@ExaminerViewer(window);
  viewer->setBackgroundColor(SbColor(0.1f, 0.3f, 0.5f));
  viewer->setSceneGraph(root);

  viewer->show();
  So@Gui@::show(window);
  So@Gui@::mainLoop();
  delete viewer;

  root->unref();
  delete[] voxels;

  return 0;
}
