#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/SoPickedPoint.h>
#include <Inventor/actions/SoRayPickAction.h>
#include <Inventor/events/SoMouseButtonEvent.h>
#include <Inventor/nodes/SoCoordinate3.h>
#include <Inventor/nodes/SoCube.h>
#include <Inventor/nodes/SoDrawStyle.h>
#include <Inventor/nodes/SoEventCallback.h>
#include <Inventor/nodes/SoLightModel.h>
#include <Inventor/nodes/SoPickStyle.h>
#include <Inventor/nodes/SoPointSet.h>
#include <Inventor/nodes/SoSeparator.h>
#include <VolumeViz/nodes/SoTransferFunction.h>
#include <VolumeViz/nodes/SoVolumeData.h>
#include <VolumeViz/nodes/SoVolumeRender.h>
#include <VolumeViz/details/SoVolumeRenderDetail.h>

#include "utility.h"

// *************************************************************************

static SoCoordinate3 * pickpoints = NULL;

// *************************************************************************

static void
event_cb(void * ud, SoEventCallback * n)
{
  const SoMouseButtonEvent * mbe = (SoMouseButtonEvent *)n->getEvent();

  if (mbe->getButton() == SoMouseButtonEvent::BUTTON1 &&
      mbe->getState() == SoButtonEvent::DOWN) {
    So@Gui@ExaminerViewer * viewer = (So@Gui@ExaminerViewer *)ud;

    SoRayPickAction rp(viewer->getViewportRegion());
    rp.setPoint(mbe->getPosition());
    rp.apply(viewer->getSceneManager()->getSceneGraph());

    SoPickedPoint * point = rp.getPickedPoint();
    if (point == NULL) {
      (void)fprintf(stderr, "\n** miss! **\n\n");
      return;
    }

    n->setHandled();

    (void)fprintf(stdout, "\n");

    SbVec3f v = point->getPoint();
    SbVec3f nv = point->getNormal();
    (void)fprintf(stdout, "point=<%f, %f, %f>, normvec=<%f, %f, %f>\n",
                  v[0], v[1], v[2], nv[0], nv[1], nv[2]);

    const SoDetail * d = point->getDetail();
    if (d->getTypeId() == SoVolumeRenderDetail::getClassTypeId()) {
      const SoVolumeRenderDetail * detail = (const SoVolumeRenderDetail *)d;
      const int nrprofilepoints = detail->getProfileDataPos();
      (void)fprintf(stdout, "hit %d voxels\n", nrprofilepoints);
      (void)fprintf(stdout, "voxel values: ");
      for (int i=0; i < nrprofilepoints; i++) {
        SbVec3f objpos;
        unsigned int voxelval = detail->getProfileValue(i, NULL, &objpos);
        (void)fprintf(stdout, "0x%08x ", voxelval);
      }
      (void)fprintf(stdout, "\n");
      
      SbVec3f pos;
      SbBool hit = detail->getFirstNonTransparentValue(NULL, NULL, &pos);
      if (hit) {
        // Adds a point marker to the picked point.
        const int idx = pickpoints->point.getNum();
        pickpoints->point.set1Value(idx, pos);
      }
      else {
        (void)fprintf(stdout, "fully transparent volume\n");
      }
    }

    // Adds a point marker to the picked point.
    const int idx = pickpoints->point.getNum();
    pickpoints->point.set1Value(idx, v);
  }
}

// *************************************************************************

static SoSeparator *
pickedPointsSubGraph(void)
{
  SoSeparator * picksep = new SoSeparator;
  SoPickStyle * pickstyle = new SoPickStyle;
  pickstyle->style = SoPickStyle::UNPICKABLE;
  picksep->addChild(pickstyle);

  SoDrawStyle * drawstyle = new SoDrawStyle;
  drawstyle->pointSize = 10;
  picksep->addChild(drawstyle);

  // The SoCoordinate3 pointer is a global variable.
  pickpoints = new SoCoordinate3;
  pickpoints->point.setNum(0);
  picksep->addChild(pickpoints);

  picksep->addChild(new SoPointSet);

  return picksep;
}

// *************************************************************************

int
main(int argc, char ** argv)
{
  @WIDGET@ window = So@Gui@::init(argv[0]);
  SoVolumeRendering::init();

  So@Gui@ExaminerViewer * viewer = new So@Gui@ExaminerViewer(window);

  SoSeparator * root = new SoSeparator;
  root->ref();

  root->addChild(pickedPointsSubGraph());

  SoEventCallback * ecb = new SoEventCallback;
  ecb->addEventCallback(SoMouseButtonEvent::getClassTypeId(), event_cb, viewer);
  root->addChild(ecb);

  SbVec3s dim(64, 64, 64);
  void * voxels = generateRGBAVoxelSet(dim);

  SoVolumeData * voldata = new SoVolumeData();
  voldata->setVolumeData(dim, voxels, SoVolumeData::RGBA);
  root->addChild(voldata);

  SoTransferFunction * transfun = new SoTransferFunction();
  root->addChild(transfun);

  SoVolumeRender * volrend = new SoVolumeRender();
  volrend->interpolation = SoVolumeRender::NEAREST;
  root->addChild(volrend);

  { // Show bounding box.
    SoSeparator * bboxsep = new SoSeparator;
    root->addChild(bboxsep);

    SoLightModel * lm = new SoLightModel;
    lm->model = SoLightModel::BASE_COLOR;
    bboxsep->addChild(lm);

    SoDrawStyle * drawstyle = new SoDrawStyle;
    drawstyle->style = SoDrawStyle::LINES;
    bboxsep->addChild(drawstyle);

    SoPickStyle * pickstyle = new SoPickStyle;
    pickstyle->style = SoPickStyle::UNPICKABLE;
    bboxsep->addChild(pickstyle);

    SoCube * volcage = new SoCube;
    const SbBox3f volspan = voldata->getVolumeSize();

    float dx, dy, dz;
    volspan.getSize(dx, dy, dz);
    volcage->width = dx;
    volcage->height = dy;
    volcage->depth = dz;
    bboxsep->addChild(volcage);
  }

  viewer->setSceneGraph(root);
  viewer->show();
  So@Gui@::show(window);

  So@Gui@::mainLoop();

  delete viewer;
  root->unref();
  return 0;
}

// *************************************************************************
