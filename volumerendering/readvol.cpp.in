#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/nodes/SoCube.h>
#include <Inventor/nodes/SoDirectionalLight.h>
#include <Inventor/nodes/SoDrawStyle.h>
#include <Inventor/nodes/SoPickStyle.h>
#include <Inventor/nodes/SoLightModel.h>
#include <Inventor/nodes/SoPerspectiveCamera.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoSwitch.h>
#include <Inventor/nodes/SoTransformSeparator.h>
#include <Inventor/nodes/SoScale.h>
#include <Inventor/nodes/SoEventCallback.h>
#include <Inventor/nodes/SoTranslation.h>
#include <Inventor/sensors/SoTimerSensor.h>
#include <Inventor/errors/SoDebugError.h>
#include <Inventor/manips/SoClipPlaneManip.h>
#include <Inventor/events/SoKeyboardEvent.h>

#include <VolumeViz/nodes/SoTransferFunction.h>
#include <VolumeViz/nodes/SoVolumeData.h>
#include <VolumeViz/nodes/SoVolumeRender.h>
#include <VolumeViz/nodes/SoVolumeRendering.h>
#include <VolumeViz/readers/SoVRVolFileReader.h>

#include "TransferFunctionHandler.h"
#include "VolumeRenderHandler.h"


static void
setColorMapALPHA(SoMFFloat * cmap)
{
  cmap->setNum(256);
  for (int idx=0; idx < 256; idx++) {
    // Make a "staircase" pattern.
    cmap->set1Value(idx, float(idx - (idx % 32)) / 255.0f);
  }
}

static void
setColorMapLUMALPHA(SoMFFloat * cmap)
{
  cmap->setNum(2 * 256);
  for (int idx=0; idx < 256; idx++) {
    cmap->set1Value(idx * 2, float(idx) / 255.0f);
    cmap->set1Value(idx * 2 + 1, float(255 - idx) / 255.0f);
  }
}

static void
setColorMapRGBA(SoMFFloat * cmap)
{
  cmap->setNum(4 * 256);
  for (int idx=0; idx < 256; idx++) {
    cmap->set1Value(idx * 4 + 0, float(255 - idx) / 255.0f);
    cmap->set1Value(idx * 4 + 1, float(255 - idx) / 255.0f);
    cmap->set1Value(idx * 4 + 2, 1.0f);
    cmap->set1Value(idx * 4 + 3, 0.5f);
  }
}

static const char * MANIPSWITCH = "manipswitch";

static void
event_cb(void * userdata, SoEventCallback * node)
{
  // Switch manip in/out of scene graph with 'm'.
  if (SO_KEY_PRESS_EVENT(node->getEvent(), M)) {
    SoSwitch * manipswitch = (SoSwitch *)
      SoBase::getNamedBase(MANIPSWITCH, SoSwitch::getClassTypeId());
    assert(manipswitch);
    const int val = manipswitch->whichChild.getValue();
    manipswitch->whichChild = (val == SO_SWITCH_NONE) ? SO_SWITCH_ALL : SO_SWITCH_NONE;
  }
}

int
main(int argc, char ** argv)
{
  if (argc < 2) {
    (void)fprintf(stderr, "\nUsage: %s dataset.vol\n\n", argv[0]);
    exit(1);
  }

  (void)printf("\nNote: use 'm' to turn clip-plane manipulator on / off.\n\n");

  @WIDGET@ window = So@Gui@::init(argv[0]);
  SoVolumeRendering::init();

  SoSeparator * root = new SoSeparator;
  root->ref();

  // To catch keypresses.
  SoEventCallback * event = new SoEventCallback;
  root->addChild(event);
  event->addEventCallback(SoKeyboardEvent::getClassTypeId(), event_cb, NULL);

  SoVRVolFileReader * filereader = new SoVRVolFileReader;
  filereader->setUserData(argv[1]);

  SbBox3f size;
  SoVolumeData::DataType type;
  SbVec3s dim;
  filereader->getDataChar(size, type, dim);
  
  // Add VolumeData to scene graph
  SoVolumeData * voldata = new SoVolumeData();
  voldata->setReader(filereader);

  { // Show bounding box.
    SoSeparator * bboxsep = new SoSeparator;
    root->addChild(bboxsep);

    SoLightModel * lm = new SoLightModel;
    lm->model = SoLightModel::BASE_COLOR;
    bboxsep->addChild(lm);

    SoDrawStyle * drawstyle = new SoDrawStyle;
    drawstyle->style = SoDrawStyle::LINES;
    bboxsep->addChild(drawstyle);

    SoPickStyle * pickstyle = new SoPickStyle;
    pickstyle->style = SoPickStyle::UNPICKABLE;
    bboxsep->addChild(pickstyle);

    SoCube * volcage = new SoCube;
    const SbBox3f volspan = voldata->getVolumeSize();

    float dx, dy, dz;
    volspan.getSize(dx, dy, dz);
    volcage->width = dx;
    volcage->height = dy;
    volcage->depth = dz;
    bboxsep->addChild(volcage);
  }

  root->addChild(voldata);

  SoTransferFunction * transfunc = new SoTransferFunction();
  const int remaplow = 1, remaphigh = 255;
  transfunc->reMap(remaplow, remaphigh);
  root->addChild(transfunc);

  TransferFunctionHandler * tfdia = new TransferFunctionHandler(transfunc, remaplow, remaphigh);

//   transfunc->predefColorMap = SoTransferFunction::NONE;

//   transfunc->colorMapType = SoTransferFunction::ALPHA;
//   setColorMapALPHA(&transfunc->colorMap);
//   transfunc->colorMapType = SoTransferFunction::LUM_ALPHA;
//   setColorMapLUMALPHA(&transfunc->colorMap);
  transfunc->colorMapType = SoTransferFunction::RGBA;
  setColorMapRGBA(&transfunc->colorMap);

  {
    SoTransformSeparator * sep = new SoTransformSeparator;
    root->addChild(sep);

    const SbBox3f volspan = voldata->getVolumeSize();
    float dx, dy, dz;
    volspan.getSize(dx, dy, dz);

    SoScale * scale = new SoScale;
    scale->scaleFactor.setValue(dx / 10.0f, dy / 10.0f, dz / 10.0f);
    sep->addChild(scale);

    SoTranslation * trans = new SoTranslation;
    trans->translation.setValue(- dx / 2.0f, 0, 0);

    // Use a group node above the manip to make it simple to switch it
    // in and out of the graph.
    SoSwitch * manipswitch = new SoSwitch;
    manipswitch->whichChild = SO_SWITCH_NONE;
    manipswitch->setName(MANIPSWITCH); // Name it so we can easily grab it.
    sep->addChild(manipswitch);
    
    SoClipPlaneManip * clipplane = new SoClipPlaneManip;
    manipswitch->addChild(clipplane);
  }

  // Add VolumeRender to scene graph
  SoVolumeRender * volrendnode = new SoVolumeRender();

  volrendnode->numSlicesControl = SoVolumeRender::MANUAL;
  volrendnode->numSlices = 40;

  VolumeRenderHandler * vrdialog = new VolumeRenderHandler(volrendnode, voldata);

  root->addChild(volrendnode);

  So@Gui@ExaminerViewer * ex = new So@Gui@ExaminerViewer(window);
  ex->setBackgroundColor(SbColor(0.1f, 0.3f, 0.5f));
  ex->setSceneGraph(root);

  ex->show();
  So@Gui@::show(window);
  So@Gui@::mainLoop();

  delete ex;
  delete filereader;

  root->unref();

  return 0;
}
