/**************************************************************************\
 *
 *  This file is part of a set of example programs for the Coin library.
 *  Copyright (C) 2000-2005 by Systems in Motion. All rights reserved.
 *
 *                   <URL:http://www.coin3d.org>
 *
 *  This sourcecode can be redistributed and/or modified under the
 *  terms of the GNU General Public License version 2 as published by
 *  the Free Software Foundation. See the file COPYING at the root
 *  directory of the distribution for more details.
 *
 *  As a special exception, all sourcecode of the demo examples can be
 *  used for any purpose for licensees of the Coin Professional
 *  Edition License, without the restrictions of the GNU GPL. See our
 *  web pages for information about how to acquire a Professional Edition
 *  License.
 *
 *  Systems in Motion, <URL:http://www.sim.no>, <mailto:support@sim.no>
 *
\**************************************************************************/

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif // HAVE_CONFIG_H

#ifdef  HAVE_SOSHADERPROGRAM // --------------------------------------------

#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/SoOutput.h>

#include <Inventor/nodes/SoShaderProgram.h>
#include <Inventor/nodes/SoFragmentShader.h>
#include <Inventor/nodes/SoVertexShader.h>
#include <Inventor/nodes/SoShaderParameter.h>

int main(int argc,char **argv)
{

  @WIDGET@ widget = So@Gui@::init(argv[0]);

  (void) printf("A Toonshader using ARB programs through the SoShaderProgram node.\n\n");
  if(argc != 2){
    (void) printf("Usage: %s <inventor file>\n\n", argv[0]);
    return 0;
  }

  SoDB::init();  
  So@Gui@ExaminerViewer * eviewer = new So@Gui@ExaminerViewer(widget);

  eviewer->setBackgroundColor(SbColor(0.051, 0.051, 0.35));
  eviewer->setStereoOffset(200.0f);	
  eviewer->setAlphaChannel(TRUE);

  // Setup the ARB shader programs
  SbString fpshaderprogram = 
    "!!ARBfp1.0\n" // Fragment program
    "PARAM c0 = {1, 0.80000001, 0.2, 0};\n"
    "PARAM c1 = {0.40000001, 0, 0, 0};\n"
    "TEMP R0;\n"
    "TEMP R1;\n"
    "TEMP H0;\n"
    "MOV R0.x, fragment.texcoord[1].x;\n"
    "ADD R0.x, c1.x, -R0.x;\n"
    "CMP H0.x, R0.x, c0.x, c0.w;\n"
    "CMP R0.x, -H0.x, c0.y, c0.z;\n"
    "MUL R0, fragment.texcoord[4], R0.x;\n"
    "MOV R1.x, fragment.texcoord[0].x;\n"
    "ADD R1.x, c1.x, -R1.x;\n"
    "CMP H0.x, R1.x, c0.x, c0.w;\n"
    "CMP R1.x, -H0.x, c0.y, c0.z;\n"
    "MAD R0, fragment.texcoord[3], R1.x, R0;\n"
    "MOV R1.x, fragment.texcoord[2].x;\n"
    "ADD R1.x, c1.x, -R1.x;\n"
    "CMP H0.x, R1.x, c0.x, c0.w;\n"
    "CMP R1.x, -H0.x, c0.y, c0.z;\n"
    "MUL result.color.xyz, R1.x, R0;\n"
    "MOV result.color.w, c0.x;\n"
    "END\n";

  // FIXME: I'm getting the following error on my development system,
  // when having only the SoVertexShader node in the scene graph:
  //
  //   Coin error in SoGLARBShaderObject::load(): Error at position:
  //   383 (line 13, column 21: error: invalid texture coordinate
  //   reference)
  //
  // 20050513 mortene.
  
  SbString vpshaderprogram = 
    "!!ARBvp1.0\n" // Vertex program
    "PARAM c1 = { 0, 1, 2, 0 };\n"
    "TEMP R0, R1, R2;\n"
    "ATTRIB v18 = vertex.normal;\n"
    "ATTRIB v16 = vertex.position;\n"
    "PARAM c0 = program.local[0];\n"
    "PARAM s2 = state.material.specular;\n"
    "PARAM s1 = state.material.diffuse;\n"
    "PARAM s4 = state.material.shininess;\n"
    "PARAM s223[4] = { state.matrix.modelview[0] };\n"
    "PARAM s259[4] = { state.matrix.mvp };\n"
    "MOV result.texcoord[3], s1;\n"
    "MOV result.texcoord[4], s2;\n"
    "DP4 result.position.x, s259[0], v16;\n"
    "DP4 result.position.y, s259[1], v16;\n"
    "DP4 result.position.z, s259[2], v16;\n"
    "DP4 result.position.w, s259[3], v16;\n"
    "DP3 R0.y, s223[0].xyzx, v18.xyzx;\n"
    "DP3 R0.z, s223[1].xyzx, v18.xyzx;\n"
    "DP3 R0.w, s223[2].xyzx, v18.xyzx;\n"
    "DP3 R0.x, R0.yzwy, R0.yzwy;\n"
    "RSQ R0.x, R0.x;\n"
    "MUL R1.xyz, R0.x, R0.yzwy;\n"
    "DP3 R0.x, R1.xyzx, c0.xyzx;\n"
    "MAX R0.w, R0.x, c1.x;\n"
    "MOV result.texcoord[0].x, R0.w;\n"
    "DP4 R2.x, s223[0], v16;\n"
    "DP4 R2.y, s223[1], v16;\n"
    "DP4 R2.z, s223[2], v16;\n"
    "DP3 R0.x, -R2.xyzx, -R2.xyzx;\n"
    "RSQ R0.x, R0.x;\n"
    "MUL R0.xyz, R0.x, -R2.xyzx;\n"
    "ADD R2.xyz, c0.xyzx, R0.xyzx;\n"
    "DP3 R1.w, R2.xyzx, R2.xyzx;\n"
    "RSQ R1.w, R1.w;\n"
    "MUL R2.xyz, R1.w, R2.xyzx;\n"
    "DP3 R1.w, R1.xyzx, R2.xyzx;\n"
    "MAX R2.xy, R1.w, c1.x;\n"
    "MOV R2.zw, s4.x;\n"
    "LIT R2.z, R2;\n"
    "SGE R1.w, c1.x, R0.w;\n"
    "ADD R0.w, c1.y, -R1.w;\n"
    "MUL R0.w, R0.w, R2.z;\n"
    "MAD result.texcoord[1].x, R1.w, c1.x, R0.w;\n"
    "DP3 R0.x, R1.xyzx, R0.xyzx;\n"
    "MAX result.texcoord[2].x, R0.x, c1.x;\n"
    "END";

  SoSeparator *root = new SoSeparator;
  root->ref();

  // FIXME: should check whether fragment programs are supported or
  // not, and exit if not. 20050513 mortene.
  SoFragmentShader * fragmentshader = new SoFragmentShader;
  fragmentshader->sourceType = SoShaderObject::ARB_PROGRAM;
  fragmentshader->sourceProgram.setValue(fpshaderprogram);

  // FIXME: should check whether vertex programs are supported or not,
  // and exit if not. 20050513 mortene.
  SoVertexShader * vertexshader = new SoVertexShader;
  vertexshader->sourceType = SoShaderObject::ARB_PROGRAM;
  vertexshader->sourceProgram.setValue(vpshaderprogram);

  // Setup the light direction as a 'local parameter' which then is
  // fetched by the vertex program (line 6 in 'vpshaderprogram')
  SoShaderParameter3f * vertexshaderparam = new SoShaderParameter3f;
  vertexshaderparam->name.setValue("lightDirection");
  vertexshaderparam->value.setValue(0.0f, 1.0f, 0.0f);
  vertexshader->parameter.addNode(vertexshaderparam);

  SoShaderProgram * shader = new SoShaderProgram;
  shader->shaderObject.addNode(fragmentshader);
  shader->shaderObject.addNode(vertexshader);
  root->addChild(shader);

  SoInput * in = new SoInput;
  if (in->openFile(argv[1])) {
    SoSeparator * model = SoDB::readAll(in);
    if (!model) {
      (void) printf("Error loading file '%s'...\n", argv[1]); 
      return -1;
    }
    root->addChild(model);
  } else {
    (void) printf("Could not find file '%s'...\n", argv[1]);
    return -1;
  }

  eviewer->setSceneGraph(root);
  eviewer->setTitle("Toonshading");
  eviewer->show();

  So@Gui@::show(widget); // display main window
  So@Gui@::mainLoop();   // main Coin event loop

  delete eviewer;
  root->unref();
  SoDB::cleanup();
  return 0;

} 


#else // -------------------------------------------------------------------------

#include <stdio.h>
int main(int argc, char ** argv)
{
  (void) printf("This example depends on shader support in Coin. The Coin version "
                "found does not contain this feature as it is probably too old.\n"
                "Exiting...\n\n");
}

#endif // !HAVE_SOSHADERPROGRAM
