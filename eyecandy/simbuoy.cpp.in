/**************************************************************************\
 *
 *  This file is part of a set of example programs for the Coin library.
 *  Copyright (C) 2000-2003 by Systems in Motion. All rights reserved.
 *
 *                   <URL:http://www.coin3d.org>
 *
 *  This sourcecode can be redistributed and/or modified under the
 *  terms of the GNU General Public License version 2 as published by
 *  the Free Software Foundation. See the file COPYING at the root
 *  directory of the distribution for more details.
 *
 *  As a special exception, all sourcecode of the demo examples can be
 *  used for any purpose for licensees of the Coin Professional
 *  Edition License, without the restrictions of the GNU GPL. See our
 *  web pages for information about how to acquire a Professional Edition
 *  License.
 *
 *  Systems in Motion, <URL:http://www.sim.no>, <mailto:support@sim.no>
 *
\**************************************************************************/

/*
 * Written by Tor-Helge Skei.
 */

#include <assert.h>
#include <string.h>
#include <stdlib.h> // rand(), exit()

#include <Inventor/SoDB.h>
#include <Inventor/nodes/SoComplexity.h>
#include <Inventor/nodes/SoCone.h>
#include <Inventor/nodes/SoCoordinate3.h>
#include <Inventor/nodes/SoCube.h>
#include <Inventor/nodes/SoCylinder.h>
#include <Inventor/nodes/SoDirectionalLight.h>
#include <Inventor/nodes/SoFile.h>
#include <Inventor/nodes/SoIndexedFaceSet.h>
#include <Inventor/nodes/SoLightModel.h>
#include <Inventor/nodes/SoMaterial.h>
#include <Inventor/nodes/SoNormalBinding.h>
#include <Inventor/nodes/SoNormal.h>
#include <Inventor/nodes/SoBaseColor.h>
#include <Inventor/nodes/SoPerspectiveCamera.h>
#include <Inventor/nodes/SoPointLight.h>
#include <Inventor/nodes/SoRotation.h>
#include <Inventor/nodes/SoRotor.h>
#include <Inventor/nodes/SoScale.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoShapeHints.h>
#include <Inventor/nodes/SoShapeHints.h>
#include <Inventor/nodes/SoTexture2.h>
#include <Inventor/nodes/SoText3.h>
#include <Inventor/nodes/SoTransform.h>
#include <Inventor/nodes/SoTranslation.h>
#include <Inventor/sensors/SoTimerSensor.h>

#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>

// *************************************************************************

#define MESHSIZE       32      // number of polygons in water-mesh
#define GRID          (MESHSIZE+1) // number of vertices in water-mesh
#define GRIDSCALE      2.0f    // value for uniform scale of the water-mesh
#define CUBESIZE       6       // size of cube
#define SINHEIGHT      2       // 'height of sine' (in sine-table)
#define WAVESIZE      -10.0f   // size of 'rain'
#define WATERINTERVAL  6       // how often it rains (frames between each drop)
#define WATERDAMPING   0.05f   // how fast the ripples fade back to normal

#define PTLGTON  25
#define PTLGTOFF 30

// adders for sine-waves
#define sinaddxinner1  5
#define sinaddyinner1  3
#define sinaddxouter1  4
#define sinaddyouter1  6
#define sinaddxinner2  2
#define sinaddyinner2  6
#define sinaddxouter2  3
#define sinaddyouter2  5

#define M_PI_F ((float)M_PI)

// *************************************************************************

float sintable[256];
int sinposx1, sinposy1;
int sinposx2, sinposy2;

float wavemap1[ GRID*GRID ];
float wavemap2[ GRID*GRID ];
float * water, * oldwater, * tempwater;
unsigned char watercount;
float sinusmap[ GRID*GRID ];

SoSeparator * grid;
SoCoordinate3 * gridCoords;
float vertices[ GRID*GRID ][3];
SoIndexedFaceSet *gridFaceSet;
int32_t indexes[ MESHSIZE*MESHSIZE*4*2 ];
SoNormal *gridNormals;
float normals[ GRID*GRID ][3];

SoNode * buoy;
SoTranslation * cubetrans;
SoScale * cubescale;
SoRotation * cuberotx;
SoRotation * cuberoty;
SoPointLight * plcube;
SoPointLight * plwater;

// *************************************************************************

const char * sim_logo =
"#VRML V1.0 ascii\n"
"\n"
"Separator {\n"
"  Material {\n"
"    ambientColor 0.100000 0.100000 0.200000\n"
"    diffuseColor 0.200000 0.200000 0.700000\n"
"    specularColor 1.000000 1.000000 1.000000\n"
"    shininess 0.500000\n"
"   }\n"
"   Coordinate3 {\n"
"    point [\n"
"     -8.5502253e+00 -2.6843038e+00 8.2506388e-01,\n"
"     -8.0403576e+00 -1.2146850e+00 8.2506388e-01,\n"
"     -7.4105210e+00 -1.2446772e+00 8.2506388e-01,\n"
"     -7.0806069e+00 -2.7442882e+00 8.2506388e-01,\n"
"     -6.5707388e+00 -1.1846927e+00 8.2506382e-01,\n"
"     -6.5707388e+00 -1.1846927e+00 8.2506388e-01,\n"
"     -6.3308015e+00 -2.7742805e+00 8.2506382e-01,\n"
"     -6.3308015e+00 -2.7742805e+00 8.2506388e-01,\n"
"     -5.7309570e+00 -9.7474718e-01 8.2506382e-01,\n"
"     -5.7309570e+00 -9.7474718e-01 8.2506388e-01,\n"
"     -5.6709723e+00 -2.5643349e+00 8.2506382e-01,\n"
"     -5.6709723e+00 -2.5643349e+00 8.2506388e-01,\n"
"     -4.9811511e+00 -4.6487942e-01 8.2506388e-01,\n"
"     -4.9511590e+00 -2.1744361e+00 8.2506388e-01,\n"
"     -4.4412913e+00 2.5493389e-01 8.2506388e-01,\n"
"     -4.0813847e+00 -1.4546227e+00 8.2506388e-01,\n"
"     -3.6614935e+00 1.5445994e+00 8.2506382e-01,\n"
"     -3.6614935e+00 1.5445994e+00 8.2506388e-01,\n"
"     -3.2116103e+00 -1.6495723e-01 8.2506382e-01,\n"
"     -3.2116103e+00 -1.6495723e-01 8.2506388e-01,\n"
"     -2.9716725e+00 2.5343428e+00 8.2506388e-01,\n"
"     -2.4618046e+00 1.0347316e+00 8.2506382e-01,\n"
"     -2.4618046e+00 1.0347316e+00 8.2506388e-01,\n"
"     -2.4618046e+00 3.1941717e+00 8.2506382e-01,\n"
"     -2.4618046e+00 3.1941717e+00 8.2506388e-01,\n"
"     -1.8919525e+00 1.8145294e+00 8.2506388e-01,\n"
"     -1.8319681e+00 3.6740472e+00 8.2506382e-01,\n"
"     -1.8319681e+00 3.6740472e+00 8.2506388e-01,\n"
"     -1.3221003e+00 2.3543894e+00 8.2506382e-01,\n"
"     -1.3221003e+00 2.3543894e+00 8.2506388e-01,\n"
"     -1.2321236e+00 3.9139850e+00 8.2506388e-01,\n"
"     -8.4222472e-01 2.5643349e+00 8.2506388e-01,\n"
"     -5.1231027e-01 4.0639462e+00 8.2506388e-01,\n"
"     -4.5232582e-01 2.5043504e+00 8.2506388e-01,\n"
"     4.4744080e-01 1.0347316e+00 8.2506382e-01,\n"
"     1.0472852e+00 1.8745139e+00 8.2506382e-01,\n"
"     1.1072696e+00 -2.2494166e-01 8.2506382e-01,\n"
"     1.5271608e+00 3.9739695e+00 8.2506388e-01,\n"
"     1.7371063e+00 2.5943272e+00 8.2506382e-01,\n"
"     1.7371063e+00 2.5943272e+00 8.2506388e-01,\n"
"     2.0970130e+00 9.4475496e-01 8.2506382e-01,\n"
"     2.2769663e+00 3.0742028e+00 8.2506388e-01,\n"
"     2.8768108e+00 1.8145294e+00 8.2506382e-01,\n"
"     2.8768108e+00 1.8145294e+00 8.2506388e-01,\n"
"     2.9667873e+00 -2.7742805e+00 8.2506388e-01,\n"
"     2.9667873e+00 3.5840704e+00 8.2506388e-01,\n"
"     3.2067251e+00 1.9344983e+00 8.2506382e-01,\n"
"     3.2067251e+00 1.9344983e+00 8.2506388e-01,\n"
"     3.5666318e+00 3.9139850e+00 8.2506388e-01,\n"
"     3.6566086e+00 -1.7845372e+00 8.2506388e-01,\n"
"     3.8965464e+00 3.9739695e+00 8.2506382e-01,\n"
"     3.8965464e+00 3.9739695e+00 8.2506388e-01,\n"
"     4.2564530e+00 3.8540006e+00 8.2506382e-01,\n"
"     4.2564530e+00 3.8540006e+00 8.2506388e-01,\n"
"     4.4663987e+00 3.6440549e+00 8.2506388e-01,\n"
"     4.5563750e+00 1.3346539e+00 8.2506388e-01,\n"
"     4.7063365e+00 -5.2486390e-01 8.2506388e-01,\n"
"     4.8263054e+00 2.5343428e+00 8.2506382e-01,\n"
"     4.8263054e+00 2.5343428e+00 8.2506388e-01,\n"
"     4.8263054e+00 3.1341872e+00 8.2506382e-01,\n"
"     4.8263054e+00 3.1341872e+00 8.2506388e-01,\n"
"     5.2761884e+00 2.2044282e+00 8.2506388e-01,\n"
"     5.3661652e+00 -2.8342650e+00 8.2506388e-01,\n"
"     5.8760328e+00 8.2478607e-01 8.2506388e-01,\n"
"     5.9960017e+00 2.8642571e+00 8.2506388e-01,\n"
"     6.5058694e+00 3.3741250e+00 8.2506388e-01,\n"
"     6.7158151e+00 -2.8642571e+00 8.2506388e-01,\n"
"     6.7458072e+00 1.8445216e+00 8.2506388e-01,\n"
"     6.9857450e+00 1.5745916e+00 8.2506388e-01,\n"
"     7.0157375e+00 1.8445216e+00 8.2506382e-01,\n"
"     7.0157375e+00 1.8445216e+00 8.2506388e-01,\n"
"     7.0757217e+00 3.7340317e+00 8.2506388e-01,\n"
"     7.6755662e+00 3.9439771e+00 8.2506382e-01,\n"
"     7.6755662e+00 3.9439771e+00 8.2506388e-01,\n"
"     8.0654650e+00 3.8540006e+00 8.2506382e-01,\n"
"     8.0654650e+00 3.8540006e+00 8.2506388e-01,\n"
"     8.4553642e+00 3.4041171e+00 8.2506388e-01,\n"
"     8.5753326e+00 2.0844593e+00 8.2506388e-01,\n"
"     8.5753326e+00 2.5643349e+00 8.2506388e-01\n"
"    ]\n"
"   }\n"
"   IndexedFaceSet {\n"
"    coordIndex [\n"
"     75, 78, 76, -1, 62, 66, 77, -1, 68, 62, 77, -1,\n"
"     70, 68, 77, 78, -1, 78, 75, 70, -1, 74, 72, 69,\n"
"     -1, 70, 73, 71, 67, -1, 67, 71, 65, -1, 67, 65,\n"
"     64, -1, 63, 67, 64, 61, -1, 63, 61, 55, 56, -1,\n"
"     44, 49, 55, -1, 55, 58, 47, -1, 57, 59, 46, -1,\n"
"     60, 54, 47, -1, 47, 54, 53, -1, 52, 50, 46, -1,\n"
"     47, 51, 48, -1, 47, 48, 45, -1, 43, 47, 45, 41,\n"
"     -1, 43, 41, 39, -1, 40, 42, 38, 35, -1, 36, 40,\n"
"     35, 34, -1, 33, 37, 32, -1, 33, 32, 30, -1, 31,\n"
"     33, 30, -1, 29, 31, 30, 27, -1, 28, 26, 23, -1,\n"
"     25, 29, 24, -1, 22, 25, 24, 20, -1, 22, 20, 17,\n"
"     -1, 18, 21, 16, -1, 15, 19, 17, 14, -1, 15, 14,\n"
"     12, -1, 12, 13, 15, -1, 9, 11, 13, 12, -1, 4,\n"
"     6, 10, 8, -1, 2, 3, 7, 5, -1, 1, 0, 3,\n"
"     2, -1, \n"
"    ]\n"
"  }\n"
"   Coordinate3 {\n"
"    point [\n"
"     -8.5502253e+00 -2.6843038e+00 -6.8493611e-01,\n"
"     -8.5502253e+00 -2.6843038e+00 8.2506388e-01,\n"
"     -8.0403576e+00 -1.2146850e+00 -6.8493611e-01,\n"
"     -8.0403576e+00 -1.2146850e+00 8.2506388e-01,\n"
"     -7.4105210e+00 -1.2446772e+00 -6.8493611e-01,\n"
"     -7.4105210e+00 -1.2446772e+00 8.2506388e-01,\n"
"     -7.0806069e+00 -2.7442882e+00 -6.8493611e-01,\n"
"     -7.0806069e+00 -2.7442882e+00 8.2506388e-01,\n"
"     -6.5707388e+00 -1.1846927e+00 -6.8493611e-01,\n"
"     -6.5707388e+00 -1.1846927e+00 8.2506382e-01,\n"
"     -6.5707388e+00 -1.1846927e+00 8.2506388e-01,\n"
"     -6.3308015e+00 -2.7742805e+00 -6.8493611e-01,\n"
"     -6.3308015e+00 -2.7742805e+00 8.2506382e-01,\n"
"     -6.3308015e+00 -2.7742805e+00 8.2506388e-01,\n"
"     -5.7309570e+00 -9.7474718e-01 -6.8493611e-01,\n"
"     -5.7309570e+00 -9.7474718e-01 8.2506382e-01,\n"
"     -5.7309570e+00 -9.7474718e-01 8.2506388e-01,\n"
"     -5.6709723e+00 -2.5643349e+00 -6.8493611e-01,\n"
"     -5.6709723e+00 -2.5643349e+00 8.2506382e-01,\n"
"     -5.6709723e+00 -2.5643349e+00 8.2506388e-01,\n"
"     -4.9811511e+00 -4.6487942e-01 -6.8493611e-01,\n"
"     -4.9811511e+00 -4.6487942e-01 8.2506388e-01,\n"
"     -4.9511590e+00 -2.1744361e+00 -6.8493611e-01,\n"
"     -4.9511590e+00 -2.1744361e+00 8.2506388e-01,\n"
"     -4.4412913e+00 2.5493389e-01 -6.8493611e-01,\n"
"     -4.4412913e+00 2.5493389e-01 8.2506388e-01,\n"
"     -4.0813847e+00 -1.4546227e+00 -6.8493611e-01,\n"
"     -4.0813847e+00 -1.4546227e+00 8.2506388e-01,\n"
"     -3.6614935e+00 1.5445994e+00 -6.8493611e-01,\n"
"     -3.6614935e+00 1.5445994e+00 8.2506388e-01,\n"
"     -3.2116103e+00 -1.6495723e-01 -6.8493611e-01,\n"
"     -3.2116103e+00 -1.6495723e-01 8.2506382e-01,\n"
"     -3.2116103e+00 -1.6495723e-01 8.2506388e-01,\n"
"     -2.9716725e+00 2.5343428e+00 -6.8493611e-01,\n"
"     -2.9716725e+00 2.5343428e+00 8.2506388e-01,\n"
"     -2.4618046e+00 1.0347316e+00 -6.8493611e-01,\n"
"     -2.4618046e+00 1.0347316e+00 8.2506382e-01,\n"
"     -2.4618046e+00 1.0347316e+00 8.2506388e-01,\n"
"     -2.4618046e+00 3.1941717e+00 -6.8493611e-01,\n"
"     -2.4618046e+00 3.1941717e+00 8.2506382e-01,\n"
"     -2.4618046e+00 3.1941717e+00 8.2506388e-01,\n"
"     -2.3718281e+00 -2.6843038e+00 -6.8493611e-01,\n"
"     -2.3718281e+00 -2.6843038e+00 8.2506388e-01,\n"
"     -1.8919525e+00 1.8145294e+00 -6.8493611e-01,\n"
"     -1.8919525e+00 1.8145294e+00 8.2506388e-01,\n"
"     -1.8319681e+00 3.6740472e+00 -6.8493611e-01,\n"
"     -1.8319681e+00 3.6740472e+00 8.2506382e-01,\n"
"     -1.8319681e+00 3.6740472e+00 8.2506388e-01,\n"
"     -1.3221003e+00 2.3543894e+00 -6.8493611e-01,\n"
"     -1.3221003e+00 2.3543894e+00 8.2506388e-01,\n"
"     -1.2321236e+00 3.9139850e+00 -6.8493611e-01,\n"
"     -1.2321236e+00 3.9139850e+00 8.2506388e-01,\n"
"     -9.6219361e-01 -2.7142961e+00 -6.8493611e-01,\n"
"     -9.6219361e-01 -2.7142961e+00 8.2506388e-01,\n"
"     -8.4222472e-01 2.5643349e+00 -6.9493610e-01,\n"
"     -8.4222472e-01 2.5643349e+00 -6.8489999e-01,\n"
"     -8.4222472e-01 2.5643349e+00 8.2506388e-01,\n"
"     -5.1231027e-01 4.0639462e+00 -6.8493611e-01,\n"
"     -5.1231027e-01 4.0639462e+00 8.2506388e-01,\n"
"     -4.5232582e-01 2.5043504e+00 -6.8493611e-01,\n"
"     -4.5232582e-01 2.5043504e+00 8.2506388e-01,\n"
"     4.4744080e-01 1.0347316e+00 -6.8493611e-01,\n"
"     4.4744080e-01 1.0347316e+00 8.2506382e-01,\n"
"     4.4744080e-01 1.0347316e+00 8.2506388e-01,\n"
"     1.0472852e+00 1.8745139e+00 -6.8493611e-01,\n"
"     1.0472852e+00 1.8745139e+00 8.2506382e-01,\n"
"     1.1072696e+00 -2.2494166e-01 -6.8493611e-01,\n"
"     1.1072696e+00 -2.2494166e-01 8.2506382e-01,\n"
"     1.1072696e+00 -2.2494166e-01 8.2506388e-01,\n"
"     1.4971685e+00 -2.7742805e+00 -6.8493611e-01,\n"
"     1.4971685e+00 -2.7742805e+00 8.2506382e-01,\n"
"     1.4971685e+00 -2.7742805e+00 8.2506388e-01,\n"
"     1.5271608e+00 3.9739695e+00 -6.8493611e-01,\n"
"     1.5271608e+00 3.9739695e+00 8.2506388e-01,\n"
"     1.7371063e+00 2.5943272e+00 -6.8493611e-01,\n"
"     1.7371063e+00 2.5943272e+00 8.2506382e-01,\n"
"     1.7371063e+00 2.5943272e+00 8.2506388e-01,\n"
"     2.0970130e+00 9.4475496e-01 -6.8493611e-01,\n"
"     2.0970130e+00 9.4475496e-01 8.2506382e-01,\n"
"     2.2769663e+00 3.0742028e+00 -6.8493611e-01,\n"
"     2.2769663e+00 3.0742028e+00 8.2506388e-01,\n"
"     2.8768108e+00 1.8145294e+00 -6.8493611e-01,\n"
"     2.8768108e+00 1.8145294e+00 8.2506382e-01,\n"
"     2.8768108e+00 1.8145294e+00 8.2506388e-01,\n"
"     2.9667873e+00 -2.7742805e+00 -6.8493611e-01,\n"
"     2.9667873e+00 -2.7742805e+00 8.2506388e-01,\n"
"     2.9667873e+00 3.5840704e+00 -6.8493611e-01,\n"
"     2.9667873e+00 3.5840704e+00 8.2506388e-01,\n"
"     3.2067251e+00 1.9344983e+00 -6.8493611e-01,\n"
"     3.2067251e+00 1.9344983e+00 8.2506382e-01,\n"
"     3.2067251e+00 1.9344983e+00 8.2506388e-01,\n"
"     3.5666318e+00 3.9139850e+00 -6.8493611e-01,\n"
"     3.5666318e+00 3.9139850e+00 8.2506388e-01,\n"
"     3.6566086e+00 -1.7845372e+00 -6.8493611e-01,\n"
"     3.6566086e+00 -1.7845372e+00 8.2506388e-01,\n"
"     3.8965464e+00 3.9739695e+00 -6.8493611e-01,\n"
"     3.8965464e+00 3.9739695e+00 8.2506382e-01,\n"
"     3.8965464e+00 3.9739695e+00 8.2506388e-01,\n"
"     4.2564530e+00 3.8540006e+00 -6.8493611e-01,\n"
"     4.2564530e+00 3.8540006e+00 8.2506382e-01,\n"
"     4.2564530e+00 3.8540006e+00 8.2506388e-01,\n"
"     4.4663987e+00 3.6440549e+00 -6.8493611e-01,\n"
"     4.4663987e+00 3.6440549e+00 8.2506388e-01,\n"
"     4.5563750e+00 1.3346539e+00 -6.8493611e-01,\n"
"     4.5563750e+00 1.3346539e+00 8.2506382e-01,\n"
"     4.5563750e+00 1.3346539e+00 8.2506388e-01,\n"
"     4.7063365e+00 -5.2486390e-01 -6.8493611e-01,\n"
"     4.7063365e+00 -5.2486390e-01 8.2506388e-01,\n"
"     4.8263054e+00 2.5343428e+00 -6.8493611e-01,\n"
"     4.8263054e+00 2.5343428e+00 8.2506382e-01,\n"
"     4.8263054e+00 2.5343428e+00 8.2506388e-01,\n"
"     4.8263054e+00 3.1341872e+00 -6.8493611e-01,\n"
"     4.8263054e+00 3.1341872e+00 8.2506382e-01,\n"
"     4.8263054e+00 3.1341872e+00 8.2506388e-01,\n"
"     5.2761884e+00 2.2044282e+00 -6.8493611e-01,\n"
"     5.2761884e+00 2.2044282e+00 8.2506388e-01,\n"
"     5.3661652e+00 -2.8342650e+00 -6.8493611e-01,\n"
"     5.3661652e+00 -2.8342650e+00 8.2506388e-01,\n"
"     5.8760328e+00 8.2478607e-01 -6.8493611e-01,\n"
"     5.8760328e+00 8.2478607e-01 8.2506388e-01,\n"
"     5.9960017e+00 2.8642571e+00 -6.8493611e-01,\n"
"     5.9960017e+00 2.8642571e+00 8.2506388e-01,\n"
"     6.5058694e+00 3.3741250e+00 -6.8493611e-01,\n"
"     6.5058694e+00 3.3741250e+00 8.2506388e-01,\n"
"     6.7158151e+00 -2.8642571e+00 -6.8493611e-01,\n"
"     6.7158151e+00 -2.8642571e+00 8.2506388e-01,\n"
"     6.7458072e+00 1.8445216e+00 -6.8493611e-01,\n"
"     6.7458072e+00 1.8445216e+00 8.2506388e-01,\n"
"     6.9857450e+00 1.5745916e+00 -6.8493611e-01,\n"
"     6.9857450e+00 1.5745916e+00 8.2506388e-01,\n"
"     7.0157375e+00 1.8445216e+00 -6.8493611e-01,\n"
"     7.0157375e+00 1.8445216e+00 8.2506388e-01,\n"
"     7.0757217e+00 3.7340317e+00 -6.8493611e-01,\n"
"     7.0757217e+00 3.7340317e+00 8.2506388e-01,\n"
"     7.6755662e+00 3.9439771e+00 -6.8493611e-01,\n"
"     7.6755662e+00 3.9439771e+00 8.2506382e-01,\n"
"     7.6755662e+00 3.9439771e+00 8.2506388e-01,\n"
"     8.0654650e+00 3.8540006e+00 -6.8493611e-01,\n"
"     8.0654650e+00 3.8540006e+00 8.2506382e-01,\n"
"     8.0654650e+00 3.8540006e+00 8.2506388e-01,\n"
"     8.4553642e+00 3.4041171e+00 -6.8493611e-01,\n"
"     8.4553642e+00 3.4041171e+00 8.2506388e-01,\n"
"     8.5753326e+00 2.0844593e+00 -6.8493611e-01,\n"
"     8.5753326e+00 2.0844593e+00 8.2506388e-01,\n"
"     8.5753326e+00 2.5643349e+00 -6.8493611e-01,\n"
"     8.5753326e+00 2.5643349e+00 8.2506388e-01\n"
"    ]\n"
"   }\n"
"   IndexedFaceSet {\n"
"    coordIndex [\n"
"     60, 63, 73, -1, 53, 68, 63, -1, 139, 137, 144, 145,\n"
"     -1, 145, 144, 140, 141, -1, 141, 140, 137, 139, -1, 117,\n"
"     116, 124, 125, -1, 125, 124, 142, 143, -1, 129, 128, 116,\n"
"     117, -1, 131, 130, 128, 129, -1, 143, 142, 144, 145, -1,\n"
"     138, 137, 134, 135, -1, 136, 134, 132, 133, -1, 127, 126,\n"
"     130, 131, -1, 133, 132, 122, 123, -1, 123, 122, 120, 121,\n"
"     -1, 119, 118, 126, 127, -1, 121, 120, 114, 115, -1, 115,\n"
"     114, 103, 105, -1, 107, 106, 118, 119, -1, 94, 93, 106,\n"
"     107, -1, 85, 84, 93, 94, -1, 71, 69, 84, 85, -1,\n"
"     89, 88, 69, 70, -1, 105, 103, 108, 110, -1, 109, 108,\n"
"     111, 112, -1, 113, 111, 101, 102, -1, 102, 101, 98, 100,\n"
"     -1, 99, 98, 95, 96, -1, 97, 95, 91, 92, -1, 92,\n"
"     91, 86, 87, -1, 83, 81, 88, 90, -1, 87, 86, 79,\n"
"     80, -1, 80, 79, 74, 76, -1, 78, 77, 81, 82, -1,\n"
"     75, 74, 64, 65, -1, 67, 66, 77, 78, -1, 65, 64,\n"
"     61, 62, -1, 60, 59, 41, 42, -1, 42, 41, 52, 53,\n"
"     -1, 73, 72, 57, 58, -1, 58, 57, 50, 51, -1, 51,\n"
"     50, 45, 47, -1, 46, 45, 38, 39, -1, 44, 43, 48,\n"
"     49, -1, 37, 35, 43, 44, -1, 40, 38, 33, 34, -1,\n"
"     34, 33, 28, 29, -1, 31, 30, 35, 36, -1, 27, 26,\n"
"     30, 32, -1, 29, 28, 24, 25, -1, 25, 24, 20, 21,\n"
"     -1, 23, 22, 26, 27, -1, 19, 17, 22, 23, -1, 21,\n"
"     20, 14, 16, -1, 12, 11, 17, 18, -1, 15, 14, 8,\n"
"     9, -1, 7, 6, 11, 13, -1, 10, 8, 4, 5, -1,\n"
"     3, 2, 0, 1, -1, 1, 0, 6, 7, -1, 5, 4,\n"
"     2, 3, -1, 63, 61, 72, 73, -1, 53, 52, 66, 68,\n"
"     -1, 2, 6, 0, -1, 2, 4, 6, -1, 4, 8, 11,\n"
"     6, -1, 8, 17, 11, -1, 8, 14, 22, 17, -1, 14,\n"
"     20, 26, 22, -1, 20, 30, 26, -1, 20, 24, 30, -1,\n"
"     24, 28, 35, 30, -1, 28, 33, 43, 35, -1, 142, 131,\n"
"     124, -1, 128, 142, 124, -1, 124, 116, 128, -1, 128, 130,\n"
"     144, 142, -1, 130, 140, 144, -1, 130, 137, 140, -1, 137,\n"
"     130, 134, -1, 130, 126, 132, 134, -1, 126, 122, 132, -1,\n"
"     126, 120, 122, -1, 126, 118, 120, -1, 118, 114, 120, -1,\n"
"     118, 106, 114, -1, 103, 114, 106, -1, 103, 106, 93, -1,\n"
"     93, 84, 69, 103, -1, 108, 69, 88, -1, 108, 103, 69,\n"
"     -1, 111, 108, 88, -1, 88, 101, 111, -1, 98, 101, 88,\n"
"     -1, 88, 95, 98, -1, 91, 95, 88, -1, 88, 81, 86,\n"
"     91, -1, 81, 79, 86, -1, 74, 79, 81, 77, -1, 77,\n"
"     64, 74, -1, 66, 77, 64, 61, -1, 66, 61, 64, 77,\n"
"     -1, 52, 41, 59, -1, 52, 59, 61, -1, 61, 59, 72,\n"
"     -1, 59, 57, 72, -1, 48, 45, 50, -1, 48, 43, 45,\n"
"     -1, 43, 38, 45, -1, 33, 38, 43, -1, 59, 55, 57,\n"
"     -1, 55, 48, 50, 57, -1, 60, 56, 54, 59, -1, 54,\n"
"     56, 49, 48, -1, 53, 62, 60, -1, 60, 42, 53, -1,\n"
"     71, 85, 105, -1, 94, 107, 104, -1, 71, 105, 90, -1,\n"
"     66, 52, 61, -1, \n"
"    ]\n"
"   }\n"
"  Translation {\n"
"    translation 1.11 5.7 0\n"
"  }\n"
"  Material {\n"
"    ambientColor 0.000000 0.000000 0.200000\n"
"    diffuseColor 0.500000 0.100000 0.000000\n"
"    specularColor 1.000000 1.000000 1.000000\n"
"    shininess 0.500000\n"
"  }\n"
"  Sphere {\n"
"  }\n"
"}";

// *************************************************************************

void
DrawDrop(
  float * dst,
  int x,
  int y )
{
  if ( x >= (GRID-2) || x <= 2 || y >= (GRID-2) || y <= 2 )
    return; // ugly clipping (return if not totally inside grid)

  //  +
  // +#+
  //  +
  int pos = y * GRID + x;
  dst[pos]        += WAVESIZE;
  dst[pos-GRID]   += WAVESIZE/2.0f;
  dst[pos+GRID]   += WAVESIZE/2.0f;
  dst[pos-1]      += WAVESIZE/2.0f;
  dst[pos+1]      += WAVESIZE/2.0f;
  dst[pos-GRID-1] += WAVESIZE/(2.0f*1.4142f);
  dst[pos-GRID+1] += WAVESIZE/(2.0f*1.4142f);
  dst[pos+GRID-1] += WAVESIZE/(2.0f*1.4142f);
  dst[pos+GRID+1] += WAVESIZE/(2.0f*1.4142f);
} // DrawDrop()

// *************************************************************************

SoSeparator *
addText(
  float radius,
  float height,
  float radians,
  const char * text )
{
  SoSeparator * group = new SoSeparator;

  SoRotation * initrad = new SoRotation;
  initrad->rotation = SbRotation( SbVec3f( 0, 1, 0), radians );
  SoTranslation * trans = new SoTranslation;
  trans->translation = SbVec3f( radius, height, 0 );
  SoRotation * rottext = new SoRotation;
  rottext->rotation = SbRotation( SbVec3f(0,1,0), M_PI_F/2.0f );
  SoText3 * text3 = new SoText3;
  text3->string.setValue( text );
  text3->parts.setValue( SoText3::ALL );
  group->addChild(initrad);
  group->addChild(trans);
  group->addChild(rottext);
  group->addChild(text3);
  return group;
} // addText()

SoSeparator *
makeBuoy(
  void )
{
  SoSeparator *result = new SoSeparator;

  SoMaterial * mat = new SoMaterial;
  mat->diffuseColor.setValue( 0.8f, 0.8f, 0.8f );
  mat->specularColor.setValue( 0.8f, 0.8f, 0.8f );
  result->addChild( mat );
  cubetrans = new SoTranslation;
  result->addChild( cubetrans );
  cuberotx = new SoRotation;
  result->addChild( cuberotx );
  cuberoty = new SoRotation;
  result->addChild( cuberoty );
  cubescale = new SoScale;
  cubescale->scaleFactor.setValue( CUBESIZE, CUBESIZE, CUBESIZE );
  result->addChild( cubescale );

  SoCone * cone1 = new SoCone;
  SoCone * cone2 = new SoCone;
  SoSeparator * sep1 = new SoSeparator;
  SoSeparator * sep2 = new SoSeparator;
  SoSeparator * sep3 = new SoSeparator;
  SoSeparator * sep4 = new SoSeparator;
  plcube = new SoPointLight;
  plcube->color = SbColor( 1, 0, 0 );
  plcube->location = SbVec3f( 0, 0, 4 );
  plcube->on = FALSE;
  SoTransform * transform1 = new SoTransform;
  SoTransform * transform2 = new SoTransform;
  transform1->rotation = SbRotation( SbVec3f(1, 0, 0), -M_PI_F/2.0f );
  transform1->translation = SbVec3f( 0, 0, -1.0f-0.1f );
  transform2->rotation = SbRotation( SbVec3f(1, 0, 0), M_PI_F/2.0f );
  transform2->translation = SbVec3f( 0, 0, 0.5f-0.1f );
  cone1->parts = SoCone::SIDES;
  cone1->height = 2;
  cone2->parts = SoCone::SIDES;
  cone2->height = 1;
  SoComplexity * cmplx = new SoComplexity;
  cmplx->textureQuality  = 0.01f;
  SoTexture2 * tex = new SoTexture2;

  unsigned char bytes[] = {
    128,255,128,255,128,255,128,255, 128,255,128,255,128,255,128,255
  };

  tex->image.setValue( SbVec2s(8,2), 1, bytes );

  SoShapeHints * sh = new SoShapeHints;
  sh->creaseAngle = 0.8f;
  sh->vertexOrdering = SoShapeHints::COUNTERCLOCKWISE;
  sh->shapeType = SoShapeHints::SOLID;
        
  result->addChild( sh );
  result->addChild( plcube );
  result->addChild( sep4 );
  result->addChild( sep3 );
  result->addChild( cmplx );
  result->addChild( tex );
  sep1->addChild( transform1);
  sep1->addChild( cone1 );
  sep2->addChild( transform2);
  sep2->addChild( cone2 );
  result->addChild( sep1 );
  result->addChild( sep2 );

  SoCylinder * cyl = new SoCylinder;
  SoTransform * cyltrans = new SoTransform;
  cyltrans->rotation = SbRotation( SbVec3f(1,0,0), M_PI_F/2.0f );
  cyltrans->translation = SbVec3f( 0, 0, 1.5f );
  cyl->radius = 0.02f;
  cyl->height = 2.0f;
  sep3->addChild( cyltrans );
  sep3->addChild( cyl );

  SoTransform * filetrans = new SoTransform;
  filetrans->scaleFactor = SbVec3f( 0.05f, 0.05f, 0.05f );
  filetrans->rotation = SbRotation( SbVec3f( 1, 0, 0 ), M_PI_F / 2 );
  filetrans->translation = SbVec3f( 0, 0, 2.5 );
  sep4->addChild( filetrans );

  SoInput logobuf;
  logobuf.setBuffer( (void *)(sim_logo), strlen(sim_logo) );
  SoNode * logo = NULL;
  SoDB::read( &logobuf, logo );
  sep4->addChild( logo );

  SoSeparator * sep5 = new SoSeparator;
  sep4->addChild( sep5 );

  SoRotor * rotor = new SoRotor;
  rotor->rotation = SbRotation( SbVec3f( 0, 1, 0 ), 0.01f );
  rotor->speed = -0.15f;
  sep5->addChild( rotor );

#define RADIANS 0.2f
#define INITR 0.0f
  sep5->addChild(addText(20,-4,INITR+RADIANS*-1.0f, "C"));
  sep5->addChild(addText(20,-4,INITR+RADIANS* 1.0f, "o"));
  sep5->addChild(addText(20,-4,INITR+RADIANS* 2.2f, "i"));
  sep5->addChild(addText(20,-4,INITR+RADIANS* 3.0f, "n"));

#undef INITR
#define INITR 1.0f
  sep5->addChild(addText(20,-19,INITR+RADIANS*-1.0f, "O"));
  sep5->addChild(addText(20,-19,INITR+RADIANS* 0.8f, "p"));
  sep5->addChild(addText(20,-19,INITR+RADIANS* 2.0f, "e"));
  sep5->addChild(addText(20,-19,INITR+RADIANS* 3.0f, "n"));

  sep5->addChild(addText(20,-19,INITR+RADIANS* 5.0f, "S"));
  sep5->addChild(addText(20,-19,INITR+RADIANS* 6.8f, "o"));
  sep5->addChild(addText(20,-19,INITR+RADIANS* 7.9f, "u"));
  sep5->addChild(addText(20,-19,INITR+RADIANS* 9.0f, "r"));
  sep5->addChild(addText(20,-19,INITR+RADIANS*10.0f, "c"));
  sep5->addChild(addText(20,-19,INITR+RADIANS*11.0f, "e"));

#undef INITR
#define INITR 2.0f
  sep5->addChild(addText(23,-35,INITR+RADIANS*-1.0f, "3"));
  sep5->addChild(addText(23,-35,INITR+RADIANS* 0.4f, "D"));

  sep5->addChild(addText(23,-35,INITR+RADIANS* 3.2f, "T"));
  sep5->addChild(addText(23,-35,INITR+RADIANS* 5.0f, "o"));
  sep5->addChild(addText(23,-35,INITR+RADIANS* 6.1f, "o"));
  sep5->addChild(addText(23,-35,INITR+RADIANS* 7.3f, "l"));
  sep5->addChild(addText(23,-35,INITR+RADIANS* 8.0f, "k"));
  sep5->addChild(addText(23,-35,INITR+RADIANS* 9.2f, "i"));
  sep5->addChild(addText(23,-35,INITR+RADIANS*10.0f, "t"));

  return result;
} // makeBuoy()

// ----------------------------------------------------------------------------------------------------

SoSeparator *
makeGridObject(
  void )
{
  memset(vertices,0,sizeof(vertices));
  memset(normals,0,sizeof(normals));
  memset(indexes,0,sizeof(indexes));

  // --- vertices ---
  int x, y;
  for ( x = 0; x < GRID; x++ ) {
    for ( y = 0; y < GRID; y++ ) {
      vertices[ y*GRID + x ][0] = (-(GRID/2)+x) * GRIDSCALE;
      vertices[ y*GRID + x ][1] = (-(GRID/2)+y) * GRIDSCALE;
      vertices[ y*GRID + x ][2] = 0;
    }
  }

  // --- face-indexes ---
  //   a       b
  //  1__2       1
  //  | /       /|  
  // 3|/      3/_|2

  for ( x = 0; x < MESHSIZE; x++ ) {
    for ( y = 0; y < MESHSIZE; y++ ) {
      indexes[((y*MESHSIZE+x)*8)  ] = (y*GRID+x);
      indexes[((y*MESHSIZE+x)*8)+1] = (y*GRID+x+1);
      indexes[((y*MESHSIZE+x)*8)+2] = (y*GRID+x+GRID);
      indexes[((y*MESHSIZE+x)*8)+3] = SO_END_FACE_INDEX;
      // b
      indexes[((y*MESHSIZE+x)*8)+4] = (y*GRID+x+1);
      indexes[((y*MESHSIZE+x)*8)+5] = (y*GRID+x+1+GRID);
      indexes[((y*MESHSIZE+x)*8)+6] = (y*GRID+x+GRID);
      indexes[((y*MESHSIZE+x)*8)+7] = SO_END_FACE_INDEX;
    }
  }
	
	/* _______	_____________
	   |\ |\ |	|\ | /|\ | /| 
	   |_\|_\|	|_\|/_|_\|/_|
	   |\ |\ |	| /|\ | /|\ | 
	   |_\|_\|	|/_|_\|/_|_\|
	*/
	
  SoSeparator *result = new SoSeparator;
  // --- material ---
  SoMaterial *mat = new SoMaterial;
  mat->diffuseColor.setValue(0.2f,0.6f,1.0f);
  mat->specularColor.setValue(1,1,1);
  mat->shininess.setValue(0.2f);
  mat->transparency.setValue(0.5f);
  result->addChild(mat);
  // --- normal binding ---
  SoNormalBinding *normbind = new SoNormalBinding;
  normbind->value.setValue(SoNormalBinding::PER_VERTEX_INDEXED);
  result->addChild(normbind);
  // --- shape hints ---
  SoShapeHints *shint = new SoShapeHints;
  shint->vertexOrdering.setValue(SoShapeHints::COUNTERCLOCKWISE);
  shint->faceType.setValue(SoShapeHints::CONVEX);
  shint->creaseAngle = M_PI_F;
  result->addChild(shint);
  // --- normal ---
  gridNormals = new SoNormal;
  gridNormals->vector.setValues(0,(GRID*GRID),normals);
  result->addChild(gridNormals);
  // --- vertex ---
  gridCoords = new SoCoordinate3;
  gridCoords->point.setValues(0,(GRID*GRID),vertices);
  result->addChild(gridCoords);
  // --- vertex index ---
  gridFaceSet = new SoIndexedFaceSet;
  gridFaceSet->coordIndex.setValues(0,(MESHSIZE*MESHSIZE*4*2),indexes);
  result->addChild(gridFaceSet);
  return result;
}

// ----------------------------------------------------------------------------------------------------

void
initialize(
  void )
{
	int   x,y;
	float a,b,c;

	memset(wavemap1,0,sizeof(wavemap1));
	memset(wavemap2,0,sizeof(wavemap2));
	memset(sinusmap,0,sizeof(sinusmap));
	SbVec3f *coords = gridCoords->point.startEditing();
	for (x=0;x<GRID;x++)
	{
		for (y=0;y<GRID;y++)
		{
			a = vertices[y*GRID+x][0];
			b = vertices[y*GRID+x][1];
			c = 0;
			coords[y*GRID+x].setValue( a,b,c );
		}
	}
	gridCoords->point.finishEditing();
	water = wavemap1;
	oldwater = wavemap2;
	watercount = 0;
	a = 0;
	b = (M_PI_F*2) / 256;
	for (x=0;x<256;x++)
	{
		sintable[x] = float(sin(a)) * SINHEIGHT;	// max x size
		a += b;
	}
	sinposx1 = 0;
	sinposy1 = 0;
	sinposx2 = 0;
	sinposy2 = 0;
}

// ----------------------------------------------------------------------------------------------------

void updateWave(float *dst, float *src, float damp)
{
  int   x,y,pos;
  float c;
  for (x=0;x<GRID;x++) {
    for (y=0;y<GRID;y++) {
      pos = y*GRID+x;
      if ((x==0)||(x==GRID)||(y==0)||(y==GRID)) c = 0;
      else {
        c = src[pos-GRID] + src[pos+GRID] + src[pos-1] + src[pos+1];
        c *= 0.5;
        c -= dst[pos];
        c -= (c*damp);
        if (c < 0.01f) c = 0;	// un-necessary? just to be sure that we reach '0' height...
      }
      dst[pos] = c;
    }
  }

  // quick bugfix for top row
  for (x= 0; x<GRID;x++) {
    int frompos = (GRID-2)*GRID+x;
    pos = (GRID-1)*GRID+x;
    dst[pos] = dst[frompos];
  } 
  
  // --- some random drops ---
  if (watercount >= WATERINTERVAL) {
    //for (x=0;x<10;x++)	// if more than one drop per frame.
    //{
    DrawDrop(dst,rand()%GRID,rand()%GRID);
    //}
    watercount = 0;
  }
}

// ----------------------------------------------------------------------------------------------------

void updateSinus(void)
{
  int x,y;
  int u1,v1,u2,v2;
  v1 = sinposy1;
  v2 = sinposy2;
  for (x=0;x<GRID;x++) {
    u1 = sinposx1;
    u2 = sinposx2;
    for (y=0;y<GRID;y++) {
      sinusmap[y*GRID+x] = sintable[u1 & 255] + sintable[v1 & 255] + sintable[u2 & 255] + sintable[v2 & 255];
      u1 += sinaddxinner1;
      u2 += sinaddxinner2;
    }
    v1 += sinaddyinner1;
    v2 += sinaddyinner2;
  }
}
	
// ----------------------------------------------------------------------------------------------------
	
void updateMesh(void)
{		
  int   x,y,pos;

  // --- water+sinusmap -> coords
  SbVec3f *coords  = gridCoords->point.startEditing();
  SbVec3f *normals = gridNormals->vector.startEditing();
  for (x=0;x<GRID;x++) {
    for (y=0;y<GRID;y++) {
      pos = y*GRID+x;
      // --- vertices ---
      float a = vertices[pos][0];
      float b = vertices[pos][1];
      float c = water[pos] + sinusmap[pos];
      coords[pos].setValue( a, b, c );
      // --- `almost` normals ---
      if ((x==0)||(x==GRID)||(y==0)||(y==GRID)) normals[pos].setValue( 0,0,-1 );
      else {
        a = ( (water[pos+1]    + sinusmap[pos+1]    ) - (water[pos-1]    + sinusmap[pos-1])    )*0.5f;
        b = ( (water[pos+GRID] + sinusmap[pos+GRID] ) - (water[pos-GRID] + sinusmap[pos-GRID]) )*0.5f;
        c = 1;
        normals[pos].setValue( a, b, c );
				//normals[y*GRID+x].normalize();
      }
    }
  }
  

  // quick hack for edge normals
  for (x = 0; x < GRID; x++) {
    // top
    pos = GRID * (GRID - 1) + x;
    int frompos = pos - GRID;
    normals[pos] = normals[frompos];
    
    // bottom
    pos = x;
    frompos = pos + GRID;
    normals[pos] = normals[frompos];
    
    // right
    pos = GRID + GRID * x - 1;
    frompos = pos - 1;
    normals[pos] = normals[frompos];
    
    // left
    pos = GRID * x;
    frompos = pos + 1;
    normals[pos] = normals[frompos];
  }
  
  gridCoords->point.finishEditing();
  gridNormals->vector.finishEditing();
}

// --------------------------------------------------

void
timerSensorCallback(
  void * data,
  SoSensor * )
{
  // --- update water ---
  updateWave( water, oldwater, WATERDAMPING );
  updateSinus();
  updateMesh();

  tempwater = water;
  water = oldwater;
  oldwater = tempwater;
  watercount++;
  sinposx1 += sinaddxouter1;
  sinposx1 &= 255;
  sinposy1 += sinaddyouter1;
  sinposy1 &= 255;
  sinposx2 += sinaddxouter2;
  sinposx2 &= 255;
  sinposy2 += sinaddyouter2;
  sinposy2 &= 255;
  // --- update cube ---
  // --- x-rotation ---
  float z1 = sinusmap[ ((GRID/2)-CUBESIZE) * GRID + ((GRID/2)-CUBESIZE) ]; // topleft
  float z2 = sinusmap[ ((GRID/2)+CUBESIZE) * GRID + ((GRID/2)-CUBESIZE) ]; // bottomleft
  float temp1 = (z2-z1) / (CUBESIZE*2);
  z1 = sinusmap[ ((GRID/2)-CUBESIZE) * GRID + ((GRID/2)+CUBESIZE) ]; // topright
  z2 = sinusmap[ ((GRID/2)+CUBESIZE) * GRID + ((GRID/2)+CUBESIZE) ]; // bottomright
  float temp2 = (z2-z1) / (CUBESIZE*2);
  SbVec3f vec( 1.0f, 0.0f, 0.0f );
  cuberotx->rotation.setValue( vec, (temp1+temp2)*0.5f );
  // --- y-rotation ---
  z1 = sinusmap[ ((GRID/2)-CUBESIZE) * GRID + ((GRID/2)-CUBESIZE) ]; // topleft
  z2 = sinusmap[ ((GRID/2)-CUBESIZE) * GRID + ((GRID/2)+CUBESIZE) ]; // topright
  temp1 = (z2-z1) / (CUBESIZE*2);
  z1 = sinusmap[ ((GRID/2)+CUBESIZE) * GRID + ((GRID/2)-CUBESIZE) ]; // bottomleft
  z2 = sinusmap[ ((GRID/2)+CUBESIZE) * GRID + ((GRID/2)+CUBESIZE) ]; // bottomright
  temp2 = (z2-z1) / (CUBESIZE*2);
  vec.setValue(0,-1,0);
  cuberoty->rotation.setValue(vec,(temp1+temp2)*0.5f);
  // --- z-height ---
  cubetrans->translation.setValue( 0, 0, sinusmap[(GRID/2)*GRID + (GRID/2)] );
  
  static int ptlgtcnt = 0;
  ptlgtcnt++;
  if ( ptlgtcnt == PTLGTON ) {
    plcube->on = TRUE;
    plwater->on = TRUE;
  } else if ( ptlgtcnt == PTLGTOFF ) {
    plcube->on = FALSE;
    plwater->on = FALSE;
    ptlgtcnt = 0;
  }
} // timerSensorCallback()

// *************************************************************************

int
main(
  int argc,
  char ** argv )
{
  @WIDGET@ window = So@Gui@::init(argv[0]);
  if ( ! window )
    exit( 1 );

  SoSeparator * root = new SoSeparator;
  SoRotor * rotor = new SoRotor;
  rotor->rotation = SbRotation( 0,0,1,0 );
  rotor->speed = 0.02f;
  root->addChild( rotor );

  SoLightModel * lm = new SoLightModel;
  lm->model.setValue( SoLightModel::PHONG );
  root->addChild( lm );

  // just fake position
  plwater = new SoPointLight;
  plwater->color = SbColor( 1.0f, 0.0f, 0.0f );
  plwater->location = SbVec3f( 0.0f, 0.0f, 24.0f );
  plwater->on = FALSE;
  root->addChild( plwater );

  grid = makeGridObject();
  root->addChild( grid );
  buoy = makeBuoy();
  root->addChild( buoy );

  initialize();

  SoTimerSensor * timer = new SoTimerSensor( timerSensorCallback, NULL );
  timer->setInterval( 0.05 );
  timer->schedule();

  So@Gui@ExaminerViewer * viewer = new So@Gui@ExaminerViewer( window );
  viewer->setSceneGraph( root );
  viewer->setTransparencyType( SoGLRenderAction::SORTED_OBJECT_BLEND );
  viewer->setTitle( "SIM Buoy" );
  viewer->show();
  So@Gui@::show( window );
  So@Gui@::mainLoop();

  delete timer;
  delete viewer;
  return 0;
} // main()

// *************************************************************************

