/**************************************************************************\
 * Copyright (c) Kongsberg Oil & Gas Technologies AS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\**************************************************************************/

// Demonstration code for using the extension engine
// ``ComputeXfBoundingBox''.
//
// This code is to a large degree based on the ``computebbox'' example
// by <pederb@sim.no>. Modifications to use the ComputeXfBoundingBox
// extension engine instead of the built-in SoComputeBoundingBox done
// by <mortene@sim.no>.

#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/SoDB.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/SoInput.h>
#include <Inventor/nodes/SoDrawStyle.h>
#include <Inventor/nodes/SoLightModel.h>
#include <Inventor/nodes/SoCoordinate3.h>
#include <Inventor/nodes/SoIndexedLineSet.h>
#include <Inventor/engines/SoCompose.h>
#include <Inventor/engines/SoConcatenate.h>
#include <Inventor/nodes/SoPointSet.h>
#include <assert.h>
#include <stdio.h>

#include <ComputeXfBoundingBox.h>

// *************************************************************************

int
main(int argc, char ** argv)
{
  if (argc != 2) {
    (void) fprintf(stderr,"\nSpecify an Inventor file as argument.\n");
    return -1;
  }

  @WIDGET@ window = So@Gui@::init(argv[0]);
  ComputeXfBoundingBox::initClass();

  So@Gui@ExaminerViewer * ex1 = new So@Gui@ExaminerViewer(window);
  
  SoInput input;
  SbBool ok = input.openFile(argv[1]);
  if (!ok) {
    (void) fprintf(stderr, "Unable to open file: %s\n", argv[1]);
    return -1;
  }
  SoSeparator *root = SoDB::readAll(&input); 
  if (!root) {
    (void) fprintf(stderr, "Unable to read file: %s\n", argv[1]);
    return -1;
  }

  // set up an engine to calculate the bounding box of the loaded scene
  ComputeXfBoundingBox * bboxengine = new ComputeXfBoundingBox;
  bboxengine->node = root;

  // construct a new scene graph, that includes an indexed line to
  // render the bounding box.
  SoSeparator * sep = new SoSeparator;
  sep->ref();

  SoSeparator * sep2 = new SoSeparator;

  SoLightModel * lm = new SoLightModel;
  lm->model = SoLightModel::BASE_COLOR;

  SoCoordinate3 * coords = new SoCoordinate3;
  // use the points calculated by our engines
  coords->point.connectFrom(&bboxengine->corners);

  SoDrawStyle * ds = new SoDrawStyle;
  ds->lineWidth = 2;
  ds->linePattern = 0xf0f0;

  SoIndexedLineSet * ls = new SoIndexedLineSet;
  const int32_t idx[] = {
    0, 1, 2, 3, 0, -1, // bottom face
    4, 5, 6, 7, 4, -1, // top face
    0, 7, -1, 1, 6, -1, 2, 5, -1, 3, 4, -1 // corner "bars"
  };
  ls->coordIndex.setNum(sizeof(idx) / sizeof(int32_t));
  ls->coordIndex.setValues(0, sizeof(idx) / sizeof(int32_t), idx);

  sep2->addChild(lm);
  sep2->addChild(coords);
  sep2->addChild(ds);
  sep2->addChild(ls);

  sep->addChild(sep2);
  sep->addChild(root);

  ex1->setSceneGraph(sep);

  ex1->show();

  So@Gui@::show(window);

  So@Gui@::mainLoop();
  delete ex1;

  sep->unref();
  return 0;
}
