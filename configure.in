# **************************************************************************
AC_INIT(actions/search.cpp.in)
AC_CONFIG_AUX_DIR(cfg)

# **************************************************************************
# Check the CVS repository setup

SIM_AC_CVS_CHANGES([
  SIM_AC_CVS_CHANGE([
    rm -rf conf-macros
    cvs co SoGuiExampleMacros
  ], [test -d cfg/m4], [test ! -d conf-macros])
])

# If the Microsoft Visual C++ cl.exe compiler is available, set us up for
# compiling with it.

SIM_AC_SETUP_MSVC_IFELSE([
], [
  case $host in
  *-cygwin)
    AC_MSG_ERROR([You need Microsoft Visual C++ to build on Cygwin])
    ;;
  esac
])

# **************************************************************************

AC_PROG_CXX
AC_LANG(C++)

# **************************************************************************
# Miscellaneous options and initializations.

AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(examples, 1.0.0)

# File to cram results from the configure tests into.
AM_CONFIG_HEADER(config.h)

# Turn off default maintainer make-rules -- use ./bootstrap instead.
AM_MAINTAINER_MODE

# **************************************************************************
# Compiler control.

SIM_AC_COMPILE_DEBUG

SIM_AC_DEBUGSYMBOLS
SIM_AC_RTTI_SUPPORT
SIM_EXCEPTION_HANDLING
SIM_PROFILING_SUPPORT
SIM_COMPILER_WARNINGS

# **************************************************************************
# Search and set up necessary stuff to use the Inventor implementation.

if test x"$with_inventor" = xyes; then
  # If we want to compile and link against InventorXt and Inventor, we
  # need to check for a shitload of libraries.

  SIM_AC_CHECK_MATHLIB
  SIM_AC_CHECK_DL
  SIM_CHECK_X11
  
  if test x"$sim_ac_x11_avail" = xyes; then
    SIM_CHECK_X11SHMEM
    SIM_CHECK_X11MU
    SIM_CHECK_X11XID
    SIM_AC_CHECK_X11_XP
    SIM_CHECK_X_INTRINSIC
  fi
  
  SIM_AC_CHECK_OPENGL( , AC_MSG_ERROR(needs an OpenGL-compatible development system installation))
  SIM_AC_CHECK_GLU( , AC_MSG_ERROR(needs the GLU library functions))
  SIM_AC_HAVE_INVENTOR_IFELSE(
    [CPPFLAGS="$sim_ac_inventor_cppflags $CPPFLAGS"
     LDFLAGS="$sim_ac_inventor_ldflags $LDFLAGS"
     LIBS="$sim_ac_inventor_libs $LIBS"],
    AC_MSG_ERROR(couldn't compile and link against Open Inventor))
  SIM_CHECK_MOTIF( , AC_MSG_ERROR(couldn't compile and link with Motif))
  SIM_CHECK_MOTIF_GLWIDGET
  
  SIM_CHECK_XMEDRAWSHADOWS
  
  # If XmeDrawShadows() isn't provided by the installed Motif library,
  # we make our own stub. InventorXt uses this function of Motif, but
  # it wasn't provided in earlier versions of Lesstif (because it's a
  # Motif 2.0 function?).
  
  if test x"$sim_ac_xmedrawshadows_avail" = xno; then
    cat > xmedrawshadows.cpp <<EOF
      extern "C" {
      #include <Xm/Xm.h>
      void XmeDrawShadows(Display *, Drawable, GC, GC, Position, Position, Dimension, Dimension, Dimension, unsigned int) { }
      }
EOF
    $CXX -c $CXXFLAGS $CPPFLAGS xmedrawshadows.cpp
    LIBS="$LIBS `pwd`/xmedrawshadows.o"
  fi
  
  SIM_CHECK_OIV_XT( , AC_MSG_ERROR(couldn't compile and link against the InventorXt library))

  GUI=XT
  Gui=Xt
  gui=xt
  WIDGET=Widget
  EVENT="XAnyEvent *"
  COMPONENTHEADER=

  AM_CONDITIONAL(HAVE_EXAMINERVIEWER, true)
  AM_CONDITIONAL(HAVE_PLANEVIEWER, true)
  AM_CONDITIONAL(HAVE_WALKVIEWER, true)
  AM_CONDITIONAL(HAVE_FLYVIEWER, true)
  AM_CONDITIONAL(HAVE_SLIDERSETS, true)
  AM_CONDITIONAL(HAVE_MATERIALEDITOR, true)
  AM_CONDITIONAL(HAVE_DIRECTIONALLIGHTEDITOR, true)
  AM_CONDITIONAL(HAVE_MATERIALLIST, true)
  AM_CONDITIONAL(HAVE_PRINTDIALOG, true)

else
  sim_ac_gui_default=soxt

  test x${with_qt+set} = xset && sim_ac_gui_default=soqt
  test x${with_xt+set} = xset && sim_ac_gui_default=soxt
  test x${with_gtk+set} = xset && sim_ac_gui_default=sogtk

  AC_ARG_WITH(
    soxt,
    AC_HELP_STRING([--with-soxt], [build against the SoXt toolkit]),
    [sim_ac_gui_default=soxt])
  AC_ARG_WITH(
    soqt,
    AC_HELP_STRING([--with-soqt], [build against the SoQt toolkit]),
    [sim_ac_gui_default=soqt])
  AC_ARG_WITH(
    sowin,
    AC_HELP_STRING([--with-sowin], [build against the SoWin toolkit]),
    [sim_ac_gui_default=sowin])
  AC_ARG_WITH(
    sogtk,
    AC_HELP_STRING([--with-sogtk], [build against the SoGtk toolkit]),
    [sim_ac_gui_default=sogtk])
  AC_ARG_WITH(
    oiv,
    AC_HELP_STRING([--with-oiv], [build against the InventorXt toolkit]),
    [sim_ac_gui_default=oivxt])

  AC_ARG_WITH(
    toolkit,
    AC_HELP_STRING([--with-toolkit=<toolkit>],
                   [select GUI toolkit to use (default=SoXt)]),
    [lwithval=`echo $withval | tr A-Z a-z`
    case $lwithval in
      xt  | soxt)    sim_ac_gui_toolkit=soxt  ;;
      qt  | soqt)    sim_ac_gui_toolkit=soqt  ;;
      win | sowin)   sim_ac_gui_toolkit=sowin ;;
      gtk | sogtk)   sim_ac_gui_toolkit=sogtk ;;
      be  | sobe)    sim_ac_gui_toolkit=sobe  ;;
      oiv )          sim_ac_gui_toolkit=oivxt ;;
      *) AC_MSG_ERROR([invalid --with-toolkit value: "$withval"]) ;;
    esac],
    [sim_ac_gui_toolkit=$sim_ac_gui_default])

  # **************************************************************************
  # Environment variables to configure the generic sourcefiles.

  sim_ac_path=$PATH
  test x"$prefix" = xNONE || sim_ac_path=$prefix/bin:$sim_ac_path

  sim_ac_gui_configcmd=${sim_ac_gui_toolkit}-config
  AC_PATH_PROG(soguiconfig, $sim_ac_gui_configcmd, false, $sim_ac_path)
  if $soguiconfig; then
    GUI=`$soguiconfig --ac-subst GUI`
    Gui=`$soguiconfig --ac-subst Gui`
    gui=`$soguiconfig --ac-subst gui`
    WIDGET=`$soguiconfig --ac-subst WIDGET`
    EVENT=`$soguiconfig --ac-subst EVENT`
    COMPONENTHEADER=`$soguiconfig --ac-subst COMPONENTHEADER`
  else
    AC_MSG_ERROR([cannot find required '$sim_ac_gui_configcmd' utility])
  fi

  # Which examples to build. These env vars also taken from
  # libconfigvars.sh of the "parent module".

  AM_CONDITIONAL(HAVE_EXAMINERVIEWER,
    $soguiconfig --have-feature examinerviewer)
  AM_CONDITIONAL(HAVE_PLANEVIEWER,
    $soguiconfig --have-feature planeviewer)
  AM_CONDITIONAL(HAVE_WALKVIEWER,
    $soguiconfig --have-feature walkviewer)
  AM_CONDITIONAL(HAVE_FLYVIEWER,
    $soguiconfig --have-feature flyviewer)
  AM_CONDITIONAL(HAVE_SLIDERSETS,
    $soguiconfig --have-feature sliderset)
  AM_CONDITIONAL(HAVE_MATERIALEDITOR,
    $soguiconfig --have-feature materialeditor)
  AM_CONDITIONAL(HAVE_DIRECTIONALLIGHTEDITOR,
    $soguiconfig --have-feature directionallighteditor)
  AM_CONDITIONAL(HAVE_MATERIALLIST,
    $soguiconfig --have-feature materiallist)
  AM_CONDITIONAL(HAVE_PRINTDIALOG,
    $soguiconfig --have-feature printdialog)

  CPPFLAGS="`$soguiconfig --cppflags` $CPPFLAGS"
  LDFLAGS="`$soguiconfig --ldflags` $LDFLAGS"
  LIBS="`$soguiconfig --libs` $LIBS"
fi

AC_SUBST(GUI)
AC_SUBST(Gui)
AC_SUBST(gui)
AC_SUBST(EVENT)
AC_SUBST(WIDGET)
AC_SUBST(COMPONENTHEADER)

# **************************************************************************
# In case of building against SGI/TGS SoXt.

AC_LANG(C)
AC_LANG(C++)
SIM_AC_HAVE_INVENTOR_FEATURE(
  [for So${Gui}Viewer::setStereoViewing functions],
  [#include <Inventor/${Gui}/viewers/So${Gui}ExaminerViewer.h>], [
   So${Gui}ExaminerViewer * viewer = (So${Gui}ExaminerViewer *) 0;
   viewer->setStereoViewing(FALSE);],
  [HAVE_VIEWER_STEREO_VIEWING])

# **************************************************************************
# All files configure must automatically generate.

AC_OUTPUT([
	Makefile
	components/Makefile
	actions/Makefile
	draggers/Makefile
	manipulators/Makefile
	nodes/Makefile
	sensors/Makefile
	eyecandy/Makefile
	coin-competitions/SIM-20010803/Makefile
])

# **************************************************************************
