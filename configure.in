# **************************************************************************
AC_INIT(actions/search.cpp.in)
AC_CONFIG_AUX_DIR(cfg)

# **************************************************************************
# Check the CVS repository setup

sim_ac_cvs_syncproblem=false;

sim_ac_macro_dir=${srcdir}/cfg/m4

if test ! -d $sim_ac_macro_dir; then
  if test "x${with_auto_cvs_update+set}" = "xset"; then
    echo "Trying to honor the --with-auto-cvs-update option."
    sim_ac_save_cwd="`pwd`"
    cd ${srcdir}
    if test -d cfg/m4 -o ! -f ./CVS/Entries; then
      AC_MSG_ERROR([something failed horribly - can't do auto-cvs-update])
    fi
    test -d conf-macros && rm -rf conf-macros
    cvs co SoGuiExampleMacros
    cd ${sim_ac_save_cwd}
    echo "Done.  Proceeding..."
  fi
fi

if test ! -d $sim_ac_macro_dir; then
  cat <<EOF

  You appear to have an old setup of the SoGuiExamples source repository.
  Parts of it have changed structurally, and you need to do the following
  in the SoGuiExamples source directory:

    $ rm -rf conf-macros
    $ cvs co SoGuiExampleMacros

  You can also run configure with the option --with-auto-cvs-update
  to allow the configure script to try to take care of this.  This
  option is a bit experimental - use at your own risk.
EOF
  sim_ac_cvs_syncproblem=true
fi

$sim_ac_cvs_syncproblem && echo "" && echo "Aborting..." && exit 1

# **************************************************************************
AC_PROG_CXX
AC_LANG_CPLUSPLUS

# **************************************************************************
# Miscellaneous options and initializations.

AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(examples, 1.0.0)

# File to cram results from the configure tests into.
AM_CONFIG_HEADER(config.h)

# Turn off default maintainer make-rules -- use ./autogen.sh instead.
AM_MAINTAINER_MODE

# Initialize libtool
AC_PROG_LIBTOOL

SIM_AC_CHECK_LINKSTYLE

# **************************************************************************
# Search and set up necessary stuff to use the GUI library.

sim_ac_gui_default=soxt
# No Xt on Windows, so we default to Qt for the Windows platform
test x"$sim_ac_linking_style" = xmswin && sim_ac_gui_default=soqt

test x${with_qt+set} = xset && sim_ac_gui_default=soqt
test x${with_xt+set} = xset && sim_ac_gui_default=soxt
test x${with_gtk+set} = xset && sim_ac_gui_default=sogtk

AC_ARG_WITH(
  soxt,
  AC_HELP_STRING([--with-soxt], [build against the SoXt toolkit]),
  [sim_ac_gui_default=soxt])
AC_ARG_WITH(
  soqt,
  AC_HELP_STRING([--with-soqt], [build against the SoQt toolkit]),
  [sim_ac_gui_default=soqt])
AC_ARG_WITH(
  sowin,
  AC_HELP_STRING([--with-sowin], [build against the SoWin toolkit]),
  [sim_ac_gui_default=sowin])
AC_ARG_WITH(
  sogtk,
  AC_HELP_STRING([--with-sogtk], [build against the SoGtk toolkit]),
  [sim_ac_gui_default=sogtk])

AC_ARG_WITH(
  toolkit,
  AC_HELP_STRING([--with-toolkit=<toolkit>],
                 [select GUI toolkit to use (default=SoXt)]),
  [lwithval=`echo $withval | tr A-Z a-z`
  case $lwithval in
    xt  | soxt)    sim_ac_gui_toolkit=soxt  ;;
    qt  | soqt)    sim_ac_gui_toolkit=soqt  ;;
    win | sowin)   sim_ac_gui_toolkit=sowin ;;
    gtk | sogtk)   sim_ac_gui_toolkit=sogtk ;;
    be  | sobe)    sim_ac_gui_toolkit=sobe  ;;
    ivxt| oivxt)   sim_ac_gui_toolkit=oivxt ;;
    iv  | oiv)     sim_ac_gui_toolkit=oivxt ;;
    *) AC_MSG_ERROR([invalid --with-toolkit value: "$withval"]) ;;
  esac],
  [sim_ac_gui_toolkit=$sim_ac_gui_default])

# **************************************************************************
# Environment variables to configure the generic sourcefiles.

sim_ac_path=$PATH
test x"$prefix" = xNONE || sim_ac_path=$prefix/bin:$sim_ac_path

sim_ac_gui_configcmd=${sim_ac_gui_toolkit}-config
AC_PATH_PROG(soguiconfig, $sim_ac_gui_configcmd, false, $sim_ac_path)
if $soguiconfig; then
  GUI=`$soguiconfig --ac-subst GUI`
  Gui=`$soguiconfig --ac-subst Gui`
  gui=`$soguiconfig --ac-subst gui`
  WIDGET=`$soguiconfig --ac-subst WIDGET`
  EVENT=`$soguiconfig --ac-subst EVENT`
  COMPONENTHEADER=`$soguiconfig --ac-subst COMPONENTHEADER`
else
  AC_MSG_ERROR([cannot find required '$sim_ac_gui_configcmd' utility])
fi

AC_SUBST(GUI)
AC_SUBST(Gui)
AC_SUBST(gui)
AC_SUBST(EVENT)
AC_SUBST(WIDGET)
AC_SUBST(COMPONENTHEADER)

# Which examples to build. These env vars also taken from
# libconfigvars.sh of the "parent module".

AM_CONDITIONAL(HAVE_ROSTER,
  $soguiconfig --have-feature roster)
AM_CONDITIONAL(HAVE_RENDERAREA,
  $soguiconfig --have-feature renderarea)
AM_CONDITIONAL(HAVE_EXAMINERVIEWER,
  $soguiconfig --have-feature examinerviewer)
AM_CONDITIONAL(HAVE_PLANEVIEWER,
  $soguiconfig --have-feature planeviewer)
AM_CONDITIONAL(HAVE_WALKVIEWER,
  $soguiconfig --have-feature walkviewer)
AM_CONDITIONAL(HAVE_FLYVIEWER,
  $soguiconfig --have-feature flyviewer)
AM_CONDITIONAL(HAVE_CUSTOMVIEWER,
  $soguiconfig --have-feature customviewer)
AM_CONDITIONAL(HAVE_LIGHTSLIDERSET,
  $soguiconfig --have-feature lightsliderset)
AM_CONDITIONAL(HAVE_MATERIALSLIDERSET,
  $soguiconfig --have-feature materialsliderset)
AM_CONDITIONAL(HAVE_TRANSFORMSLIDERSET,
  $soguiconfig --have-feature transformsliderset)
AM_CONDITIONAL(HAVE_MATERIALEDITOR,
  $soguiconfig --have-feature materialeditor)
AM_CONDITIONAL(HAVE_DIRECTIONALLIGHTEDITOR,
  $soguiconfig --have-feature directionallighteditor)
AM_CONDITIONAL(HAVE_MATERIALLIST,
  $soguiconfig --have-feature materiallist)
AM_CONDITIONAL(HAVE_PRINTDIALOG,
  $soguiconfig --have-feature printdialog)
AM_CONDITIONAL(HAVE_GRAPHEDITOR,
  $soguiconfig --have-feature grapheditor)

CPPFLAGS="`$soguiconfig --cppflags` $CPPFLAGS"
LDFLAGS="`$soguiconfig --ldflags` $LDFLAGS"
LIBS="`$soguiconfig --libs` $LIBS"

# **************************************************************************
# Compiler control.

SIM_COMPILE_DEBUG

SIM_AC_DEBUGSYMBOLS
SIM_AC_RTTI_SUPPORT
SIM_EXCEPTION_HANDLING
SIM_PROFILING_SUPPORT
SIM_COMPILER_WARNINGS

# **************************************************************************
# All files configure must automatically generate.

AC_OUTPUT([
	Makefile
	components/Makefile
	actions/Makefile
	draggers/Makefile
	engines/Makefile
	manipulators/Makefile
	nodes/Makefile
	sensors/Makefile
	eyecandy/Makefile
])

# **************************************************************************
