# **************************************************************************
AC_INIT(actions/search.cpp.in)

# Locate C++ compiler and set C++ as the default compiler to run in tests.
AC_PROG_CXX
AC_LANG_CPLUSPLUS

# **************************************************************************
# Miscellaneous options and initializations.

AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(examples, 1.0.0)

# File to cram results from the configure tests into.
AM_CONFIG_HEADER(config.h)

# Turn off default maintainer make-rules -- use ./autogen.sh instead.
AM_MAINTAINER_MODE

# Initialize libtool
AC_PROG_LIBTOOL

# **************************************************************************
# Search and set up necessary stuff to use the GUI library.

AC_ARG_WITH(
  toolkit,
  AC_HELP_STRING([--with-toolkit=<toolkit>],
                 [select GUI toolkit to use (default=SoXt)]),
  [lwithval=`echo $withval | tr A-Z a-z`
  case $lwithval in
    xt  | soxt)    sim_ac_gui_toolkit=soxt  ;;
    qt  | soqt)    sim_ac_gui_toolkit=soqt  ;;
    gtk | sogtk)   sim_ac_gui_toolkit=sogtk ;;
    be  | sobe)    sim_ac_gui_toolkit=sobe  ;;
    iv  | oiv)     sim_ac_gui_toolkit=oiv   ;;
    *) AC_MSG_ERROR([invalid --with-toolkit value: "$withval"]) ;;
  esac],
  [sim_ac_gui_toolkit=soxt])

# Environment variables to configure the generic sourcefiles.

sim_ac_path=$PATH
test x"$prefix" = xNONE || sim_ac_path=$prefix/bin:$sim_ac_path

sim_ac_gui_configcmd=${sim_ac_gui_toolkit}-config
AC_PATH_PROG(soguiconfig, $sim_ac_gui_configcmd, false, $sim_ac_path)
if $soguiconfig; then
  GUI=`$soguiconfig --ac-subst GUI`
  Gui=`$soguiconfig --ac-subst Gui`
  gui=`$soguiconfig --ac-subst gui`
  WIDGET=`$soguiconfig --ac-subst WIDGET`
  EVENT=`$soguiconfig --ac-subst EVENT`
  COMPONENTHEADER=`$soguiconfig --ac-subst COMPONENTHEADER`
else
  AC_MSG_ERROR([cannot find required '$sim_ac_gui_configcmd' utility])
fi

if test x"${WINWIDGET+set}" != x"set"; then
  WINWIDGET=$WIDGET
fi

AC_SUBST(GUI)
AC_SUBST(Gui)
AC_SUBST(gui)
AC_SUBST(WIDGET)
AC_SUBST(WINWIDGET)
AC_SUBST(EVENT)
AC_SUBST(COMPONENTHEADER)

# Which examples to build. These env vars also taken from
# libconfigvars.sh of the "parent module".

AM_CONDITIONAL(HAVE_RENDERAREA,
  $soguiconfig --have-feature renderarea)
AM_CONDITIONAL(HAVE_EXAMINERVIEWER,
  $soguiconfig --have-feature examinerviewer)
AM_CONDITIONAL(HAVE_PLANEVIEWER,
  $soguiconfig --have-feature planeviewer)
AM_CONDITIONAL(HAVE_WALKVIEWER,
  $soguiconfig --have-feature walkviewer)
AM_CONDITIONAL(HAVE_FLYVIEWER,
  $soguiconfig --have-feature flyviewer)
AM_CONDITIONAL(HAVE_LIGHTSLIDERSET,
  $soguiconfig --have-feature lightsliderset)
AM_CONDITIONAL(HAVE_MATERIALSLIDERSET,
  $soguiconfig --have-feature materialsliderset)
AM_CONDITIONAL(HAVE_TRANSFORMSLIDERSET,
  $soguiconfig --have-feature transformsliderset)
AM_CONDITIONAL(HAVE_MATERIALEDITOR,
  $soguiconfig --have-feature materialeditor)
AM_CONDITIONAL(HAVE_DIRECTIONALLIGHTEDITOR,
  $soguiconfig --have-feature directionallighteditor)
AM_CONDITIONAL(HAVE_MATERIALLIST,
  $soguiconfig --have-feature materiallist)
AM_CONDITIONAL(HAVE_PRINTDIALOG,
  $soguiconfig --have-feature printdialog)

CPPFLAGS="`$soguiconfig --cppflags` $CPPFLAGS"
LDFLAGS="`$soguiconfig --ldflags` $LDFLAGS"
LIBS="`$soguiconfig --libs` $LIBS"

# **************************************************************************
# Compiler control.

SIM_COMPILE_DEBUG

SIM_DEBUGSYMBOLS
SIM_AC_RTTI_SUPPORT
SIM_EXCEPTION_HANDLING
SIM_PROFILING_SUPPORT
SIM_COMPILER_WARNINGS

# **************************************************************************
# All files configure must automatically generate.

AC_OUTPUT([
	Makefile
	components/Makefile
	actions/Makefile
	draggers/Makefile
	engines/Makefile
	manipulators/Makefile
	nodes/Makefile
	sensors/Makefile
	eyecandy/Makefile
])

# **************************************************************************
