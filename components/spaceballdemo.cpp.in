#include <Inventor/SoInput.h>
#include <Inventor/SoPath.h>
#include <Inventor/SoPickedPoint.h>
#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/So@Gui@RenderArea.h>
#include <Inventor/events/SoMotion3Event.h>
#include <Inventor/events/SoKeyboardEvent.h>
#include <Inventor/events/SoMouseButtonEvent.h>
#include <Inventor/nodes/SoSphere.h>
#include <Inventor/nodes/SoPerspectiveCamera.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoEventCallback.h>
#include <Inventor/nodes/SoTransform.h>
#include <Inventor/actions/SoSearchAction.h>
#include <Inventor/manips/SoSpotLightManip.h>

//***********************************************************************
// Globals
static SbBool motion3oncamera = FALSE;
enum { SCENE, CAMERA, SPOTLIGHT };
static int OBJECT = SPOTLIGHT;
static SoSearchAction * searchaction = NULL;
//***********************************************************************
// Print instructions on stdout
void
show_instructions(void)
{
  (void)fprintf(stdout, "\nThis example program demonstrates possible ways to use the spaceball.\n");
  (void)fprintf(stdout, "\nQuick instructions:\n\n");
  (void)fprintf(stdout, "  * Select the object you want to move with the spaceball\n");
  (void)fprintf(stdout, "  * by placing the mouse cursor over the object and click.\n");
  (void)fprintf(stdout, "  * If you click where there is no object, the camera is selected.\n");
  (void)fprintf(stdout, "  * If you want something more exciting to look at than a sphere, specify a\n");
  (void)fprintf(stdout, "  * model file as a command line parameter.\n");
  (void)fprintf(stdout, "\n");
}

//***********************************************************************
// a helper method that searches for a given node in the scenegraph
static SoNode * 
searchForNode(SbString name, SoType type, void * userData)
{
  So@Gui@RenderArea * renderArea = (So@Gui@RenderArea *)userData;
  SoNode * root = renderArea->getSceneManager()->getSceneGraph();

  searchaction->setName(name);
    searchaction->apply(root);
    if (searchaction->getPath() != NULL) { 
      SoNode * node = searchaction->getPath()->getTail();
      if (node->isOfType(type)) {
        return node;
      }
    }
  return NULL;
}

//***********************************************************************
// this method is called when an event occurs
static void
eventCallback(void * userData, SoEventCallback * eventCB)
{
  const SoType type(eventCB->getEvent()->getTypeId());

  // handle object selection
  if (type.isDerivedFrom(SoMouseButtonEvent::getClassTypeId())) {
    const SoPickedPoint * pp = eventCB->getPickedPoint();
    if (pp != 0) {
      if (pp->getPath() != NULL) {
        SoNode * node = pp->getPath()->getTail();
        if (node->getName() == "spotlight") {
          OBJECT = SPOTLIGHT;
        } else {
          OBJECT = SCENE;
        }
      }
    } else {
      OBJECT = CAMERA;
    }
  }

  // Handle spaceball events. 
  if (type.isDerivedFrom(SoMotion3Event::getClassTypeId())) {
    SoMotion3Event * event = (SoMotion3Event *)eventCB->getEvent();

    switch (OBJECT) {
      case CAMERA: { // move the camera according to the spaceball input
        SoCamera * camera = (SoCamera *)
          searchForNode("camera", SoCamera::getClassTypeId(), userData);

        SbVec3f dir;
        camera->orientation.getValue().multVec(event->getTranslation(),dir);
        camera->position = camera->position.getValue() + dir;
        camera->orientation = 
          event->getRotation() * camera->orientation.getValue();
      break;
      }  
      case SCENE: { // move the model
        SoTransform * transf = (SoTransform *)
          searchForNode("transform", SoTransform::getClassTypeId(), userData);
        transf->translation = transf->translation.getValue() + event->getTranslation();
        transf->rotation = transf->rotation.getValue() * event->getRotation();
      break;
      }
      case SPOTLIGHT: { // move the spotlight
        SoSpotLightManip * spotlight = (SoSpotLightManip *)
          searchForNode("spotlight", SoSpotLightManip::getClassTypeId(), userData);

        SbVec3f dir;
        spotlight->location = spotlight->location.getValue() + event->getTranslation();
        event->getRotation().multVec(spotlight->direction.getValue(), dir);
        spotlight->direction.setValue(dir);
      break;
      }
    }
  }
}

//***********************************************************************

int
main(int argc, char ** argv)
{
  @WIDGET@ widget = So@Gui@::init(argv[0]);

  show_instructions();
  searchaction = new SoSearchAction;
  
  SoSeparator * root = new SoSeparator;
  root->ref();

  SoNode * model = NULL;
  if (argc > 1) {
    SoInput in;
    if (in.openFile(argv[1])) {
      model = SoDB::readAll(&in);
    }
  }
  if (!model) model = new SoSphere;
  model->setName("model");

  // set up the scene
  SoEventCallback * eventCB = new SoEventCallback;
  root->addChild(eventCB);

  SoPerspectiveCamera * camera = new SoPerspectiveCamera;
  camera->setName("camera");
  root->addChild(camera);

  SoSpotLightManip * spotlight = new SoSpotLightManip;
  spotlight->setName("spotlight");
  spotlight->color.setValue(1.0f,1.0f,1.0f);
  spotlight->location = SbVec3f(20.0f,20.0f,20.0f);
  spotlight->direction = SbVec3f(0.0,0.0,0.0) - spotlight->location.getValue();
  root->addChild(spotlight);

  SoTransform * transform = new SoTransform;
  transform->scaleFactor.setValue(10,10,10);
  transform->setName("transform");
  root->addChild(transform);
  root->addChild(model);

  So@Gui@RenderArea * renderarea = new So@Gui@RenderArea(widget);
  renderarea->setTitle("Spaceball demo");
  
  eventCB->addEventCallback(SoEvent::getClassTypeId(), eventCallback, renderarea);
  
  renderarea->setSize(SbVec2s(800,600));
  renderarea->setSceneGraph(root);
  renderarea->setBackgroundColor(SbColor(0.0f, 0.2f, 0.3f));

  camera->viewAll(root, renderarea->getViewportRegion());
  camera->nearDistance = 1.0f;
  camera->farDistance = 500.0f;

  renderarea->show();

  So@Gui@::show(widget);
  So@Gui@::mainLoop();

  delete renderarea;
  root->unref();

  return 0;
}
