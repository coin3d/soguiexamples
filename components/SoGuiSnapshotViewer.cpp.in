/**************************************************************************\
 * Copyright (c) Kongsberg Oil & Gas Technologies AS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * PIMPL SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF PIMPL SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\**************************************************************************/

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>

#include <Inventor/SoOffscreenRenderer.h>
#include <Inventor/errors/SoDebugError.h>
#include <Inventor/events/SoKeyboardEvent.h>
#include <Inventor/actions/SoGLRenderAction.h>
#include <Inventor/nodes/SoGroup.h>
#include <Inventor/nodes/SoCallback.h>
#include <Inventor/nodes/SoText2.h>
#include <Inventor/nodes/SoSwitch.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoBaseColor.h>
#include <Inventor/nodes/SoTranslation.h>
#include <Inventor/nodes/SoOrthographicCamera.h>
#include <Inventor/sensors/SoAlarmSensor.h>

#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>

#include <SoGuiSnapshotViewer.h>

#define INFO_TIME 5
#define STATUS_LINE 8

// *************************************************************************

class SoGuiSnapshotViewerP {
public:
  SoGuiSnapshotViewerP(So@Gui@SnapshotViewer * viewer);
  ~SoGuiSnapshotViewerP(void);

  static void snoopCB(void * userdata, SoAction * action);
  static void hideCB(void * userdata, SoSensor * sensor);

  SbBool antialiasing;
  SbBool transparency;
  SbBool autocropping;
  int cropborder;

  const char * defaultfilename;
  SbVec2s viewport;

  SoNode * realroot;

  SoAlarmSensor * alarm;
  SoSwitch * inforoot;
  SoText2 * infotext;
  SoTranslation * infotrans;

  So@Gui@SnapshotViewer * api;
};

SoGuiSnapshotViewerP::SoGuiSnapshotViewerP(So@Gui@SnapshotViewer * viewer)
{
  this->api = viewer;

  this->antialiasing = TRUE;
  this->transparency = TRUE;
  this->autocropping = FALSE;
  this->cropborder = 0;
  this->defaultfilename = strdup("snapshot.png");
  this->viewport = SbVec2s(0, 0);
  this->realroot = NULL;

  this->alarm = new SoAlarmSensor(SoGuiSnapshotViewerP::hideCB, this);
  this->infotext = new SoText2;
  this->infotext->string.set1Value(0, "");
  SoOrthographicCamera * cam = new SoOrthographicCamera;
  cam->height.setValue(1.0f);
  cam->nearDistance.setValue(0.0f);
  cam->farDistance.setValue(1.0f);

  this->infotrans = new SoTranslation;
  this->infotrans->translation.setValue(SbVec3f(0,0,-0.1f));
  SoBaseColor * color = new SoBaseColor;
  color->rgb.setValue(SbColor(1.0f, 0.0f, 0.0f));

  this->inforoot = new SoSwitch;
  this->inforoot->whichChild.setValue(SO_SWITCH_ALL);
  this->inforoot->addChild(cam);
  this->inforoot->addChild(color);
  this->inforoot->addChild(this->infotrans);
  this->inforoot->addChild(this->infotext);
  this->inforoot->ref();
}

SoGuiSnapshotViewerP::~SoGuiSnapshotViewerP(void)
{
  if ( this->defaultfilename ) free((void *)this->defaultfilename);
  if ( this->realroot ) this->realroot->unref();
  if ( this->alarm->isScheduled() ) this->alarm->unschedule();
  delete this->alarm;
  this->inforoot->unref();
}

void
SoGuiSnapshotViewerP::snoopCB(void * userdata, SoAction * action)
{
  SoGuiSnapshotViewerP * pimpl = (SoGuiSnapshotViewerP *) userdata;
  if ( action->getTypeId() != SoGLRenderAction::getClassTypeId() )
    return;
  if ( action->getWhatAppliedTo() != SoAction::NODE )
    return;
  if ( pimpl->realroot ) pimpl->realroot->unref();
  pimpl->realroot = action->getNodeAppliedTo();
  pimpl->realroot->ref();
}

void
SoGuiSnapshotViewerP::hideCB(void * userdata, SoSensor * sensor)
{
  SoGuiSnapshotViewerP * pimpl = (SoGuiSnapshotViewerP *) userdata;
  pimpl->inforoot->whichChild.setValue(SO_SWITCH_NONE);
  pimpl->infotext->string.set1Value(STATUS_LINE, "");
  pimpl->api->scheduleRedraw();
  if ( sensor->isScheduled() ) sensor->unschedule();
}

// *************************************************************************

#define PIMPL (this->pimpl)

SO@GUI@_OBJECT_SOURCE(So@Gui@SnapshotViewer);

So@Gui@SnapshotViewer::So@Gui@SnapshotViewer(@WIDGET@ parent,
                                             const char * name,
                                             SbBool embed)
  : So@Gui@ExaminerViewer(parent, name, embed)
{
  PIMPL = new SoGuiSnapshotViewerP(this);
}

So@Gui@SnapshotViewer::~So@Gui@SnapshotViewer(void)
{
  delete PIMPL;
}

void
So@Gui@SnapshotViewer::setAntialiasingEnabled(SbBool enable)
{
  PIMPL->antialiasing = enable;
}

SbBool
So@Gui@SnapshotViewer::isAntialiasingEnabled(void) const
{
  return PIMPL->antialiasing;
}

void
So@Gui@SnapshotViewer::setTransparencyEnabled(SbBool enable)
{
  PIMPL->transparency = enable;
}

SbBool
So@Gui@SnapshotViewer::isTransparencyEnabled(void) const
{
  return PIMPL->transparency;
}

void
So@Gui@SnapshotViewer::setAutoCroppingEnabled(SbBool enable)
{
  PIMPL->autocropping = enable;
}

SbBool
So@Gui@SnapshotViewer::isAutoCroppingEnabled(void) const
{
  return PIMPL->autocropping;
}

void
So@Gui@SnapshotViewer::setCropBorderSize(int size)
{
  if ( size < 0 ) size = 0;
  PIMPL->cropborder = size;
}

int
So@Gui@SnapshotViewer::getCropBorderSize(void) const
{
  return PIMPL->cropborder;
}

void
So@Gui@SnapshotViewer::setDefaultSnapshotFilename(const char * filename)
{
  if ( PIMPL->defaultfilename ) {
    free((void *)PIMPL->defaultfilename);
    PIMPL->defaultfilename = NULL;
  }
  if ( filename )
    PIMPL->defaultfilename = strdup(filename);
}

const char *
So@Gui@SnapshotViewer::getDefaultSnapshotFilename(void) const
{
  return PIMPL->defaultfilename;
}

void
So@Gui@SnapshotViewer::showInfo(float seconds)
{
  SbString string;
  string.sprintf("[i] - display info, [s] - save snapshot");
  PIMPL->infotext->string.set1Value(1, string);
  string.sprintf("[a]ntialiasing    : %s", this->isAntialiasingEnabled() ? "on" : "off");
  PIMPL->infotext->string.set1Value(2, string);
  string.sprintf("[t]ransparency    : %s", this->isTransparencyEnabled() ? "on" : "off");
  PIMPL->infotext->string.set1Value(3, string);
  string.sprintf("auto[c]ropping    : %s", this->isAutoCroppingEnabled() ? "on" : "off");
  PIMPL->infotext->string.set1Value(4, string);
  string.sprintf("crop border [b/B] : %d pixels", this->getCropBorderSize());
  PIMPL->infotext->string.set1Value(5, string);
  string.sprintf("viewport size     : %dx%d", PIMPL->viewport[0], PIMPL->viewport[1]);
  PIMPL->infotext->string.set1Value(6, string);
  string.sprintf("snapshot filename : %s", this->getDefaultSnapshotFilename());
  PIMPL->infotext->string.set1Value(7, string);
  
  if ( PIMPL->alarm->isScheduled() ) PIMPL->alarm->unschedule();
  PIMPL->alarm->setTime(SbTime::getTimeOfDay() + seconds);
  PIMPL->alarm->schedule();

  PIMPL->inforoot->whichChild.setValue(SO_SWITCH_ALL);
  this->scheduleRedraw();
}

void
So@Gui@SnapshotViewer::hideInfo(void)
{
  PIMPL->inforoot->whichChild.setValue(SO_SWITCH_NONE);
  PIMPL->infotext->string.set1Value(STATUS_LINE, "");
  this->scheduleRedraw();
  if ( PIMPL->alarm->isScheduled() ) PIMPL->alarm->unschedule();
}

void
So@Gui@SnapshotViewer::createSnapshot(const char * filename)
{
  SoOffscreenRenderer * renderer = new SoOffscreenRenderer(this->getGLSize());

  if ( PIMPL->transparency ) {
    // FIXME: why does transparency work at home, and not at work?
    renderer->setComponents(SoOffscreenRenderer::RGB_TRANSPARENCY);
    // FIXME: when using transparency - maybe set white background?  this is
    // only an issue if it affects the antialiasing along the object edges,
    // and/or if the background color stains transparent surfaces...
    renderer->setBackgroundColor(this->getSceneManager()->getBackgroundColor());
  } else {
    renderer->setComponents(SoOffscreenRenderer::RGB);
    renderer->setBackgroundColor(this->getSceneManager()->getBackgroundColor());
  }

  if ( PIMPL->antialiasing ) {
    renderer->getGLRenderAction()->setNumPasses(9);
  }

  renderer->render(PIMPL->realroot);

  int left = 0;
  int right = PIMPL->viewport[0] - 1;
  int top = 0;
  int bottom = PIMPL->viewport[1] - 1;
  if ( PIMPL->autocropping ) {
    const int components = renderer->getComponents();
    unsigned char * buffer = renderer->getBuffer();
    SbColor background = renderer->getBackgroundColor();
    SbVec4f bg = SbVec4f(background[0], background[1], background[2], 255);
    if ( PIMPL->transparency ) bg[3] = 0;
    SbBool loop = TRUE;
    // note that the border indices come out off-by-one when breaking the loop
    for ( ; loop && (left < PIMPL->viewport[0]); left++ )
      for ( int i = 0; loop && (i < PIMPL->viewport[1]); i++ )
        for ( int c = 0; loop && (c < components); c++ )
          if ( buffer[(i*components*PIMPL->viewport[0])+(left*components)+c] != bg[c] )
            loop = FALSE;
    loop = TRUE;
    for ( ; loop && (right >= left); right-- )
      for ( int i = 0; loop && (i < PIMPL->viewport[1]); i++ )
        for ( int c = 0; loop && (c < components); c++ )
          if ( buffer[(i*components*PIMPL->viewport[0])+(right*components)+c] != bg[c] )
            loop = FALSE;
    loop = TRUE;
    for ( ; loop && (top < PIMPL->viewport[1]); top++ )
      for ( int i = 0; loop && (i < PIMPL->viewport[0]); i++ )
        for ( int c = 0; loop && (c < components); c++ )
          if ( buffer[(top*components*PIMPL->viewport[0])+(i*components)+c] != bg[c] )
            loop = FALSE;
    loop = TRUE;
    for ( ; loop && (bottom >= top); bottom-- )
      for ( int i = 0; loop && (i < PIMPL->viewport[0]); i++ )
        for ( int c = 0; loop && (c < components); c++ )
          if ( buffer[(bottom*components*PIMPL->viewport[0])+(i*components)+c] != bg[c] )
            loop = FALSE;
    left -= PIMPL->cropborder + 1;
    right += PIMPL->cropborder + 1;
    top -= PIMPL->cropborder + 1;
    bottom += PIMPL->cropborder + 1;

    // cropping support is a hack, but it works
    SoOffscreenRenderer * cropped = new SoOffscreenRenderer(SbViewportRegion(right-left+1, bottom-top+1));
    if ( !PIMPL->transparency ) {
      cropped->setComponents(SoOffscreenRenderer::RGB);
    } else {
      cropped->setComponents(SoOffscreenRenderer::RGB_TRANSPARENCY);
    }
    // FIXME: figure out what to do with the background when crop-border extends image size
     cropped->setBackgroundColor(SbColor(bg[0], bg[1], bg[2]));
    do {
      SoSeparator * empty = new SoSeparator();
      empty->ref();
      cropped->render(empty);
      empty->unref();
    } while ( FALSE );
    unsigned char * newbuf = cropped->getBuffer();
    for ( int y = top; y <= bottom; y++ ) {
      if ( (y >= 0) && (y < PIMPL->viewport[1]) ) {
        for ( int x = left; x <= right; x++ ) {
          if ( (x >= 0) && (x < PIMPL->viewport[0]) ) {
            for ( int a = 0; a < components; a++ ) {
              newbuf[((y-top)*components*(right-left+1))+((x-left)*components)+a] =
                buffer[(y*components*PIMPL->viewport[0])+(x*components)+a];
            }
          }
        }
      }
    }
    delete renderer;
    renderer = cropped;
  }

  const char * format = strrchr(filename, '.');
  if ( format ) format++;
  else format = "rgb";
  if ( !renderer->isWriteSupported(format) ) {
    SoDebugError::postWarning("So@Gui@SnapshotViewer::createSnapshot",
                              "\"%s\" is not a supported format - writing as rgb\n", format);
    format = "rgb";
  }
  if ( !renderer->writeToFile(filename, format) ) {
    SoDebugError::post("So@Gui@SnapshotViewer::createSnapshot",
                       "error writing snapshot with format %s\n", format);
    PIMPL->infotext->string.set1Value(STATUS_LINE, "SAVE ERROR");
  } else {
    SbString status;
    status.sprintf("SAVE OK (%dx%d%+d%+d)", right - left + 1, bottom - top + 1, left, top);
    PIMPL->infotext->string.set1Value(STATUS_LINE, status);
  }
  delete renderer;
  this->showInfo(INFO_TIME);
}

void
So@Gui@SnapshotViewer::setSceneGraph(SoNode * root)
{
  if ( PIMPL->realroot != NULL ) {
    PIMPL->realroot->unref();
    PIMPL->realroot = NULL;
  }
  SoGroup * myroot = new SoGroup;
  SoCallback * snoop = new SoCallback;
  snoop->setCallback(SoGuiSnapshotViewerP::snoopCB, PIMPL);
  myroot->addChild(snoop);
  myroot->addChild(root);
  So@Gui@ExaminerViewer::setSceneGraph(myroot);

  this->addSuperimposition(PIMPL->inforoot);
  this->setSuperimpositionEnabled(PIMPL->inforoot, TRUE);
}

SoNode *
So@Gui@SnapshotViewer::getSceneGraph(void)
{
  SoGroup * myroot = (SoGroup *) So@Gui@ExaminerViewer::getSceneGraph();
  return myroot->getChild(1); // the user root
}

SbBool
So@Gui@SnapshotViewer::processSoEvent(const SoEvent * const event)
{
  if ( // this->isViewing() &&
       event->getTypeId() == SoKeyboardEvent::getClassTypeId() ) {
    SoKeyboardEvent * kbevent = (SoKeyboardEvent *) event;
    switch ( kbevent->getKey() ) {
    case SoKeyboardEvent::A: // 'a' for antialiasing
      if ( kbevent->getState() == SoButtonEvent::DOWN ) {
        this->setAntialiasingEnabled(this->isAntialiasingEnabled() ? FALSE : TRUE);
        this->showInfo(INFO_TIME);
      }
      return TRUE;
    case SoKeyboardEvent::T: // 't' for transparency
      if ( kbevent->getState() == SoButtonEvent::DOWN ) {
	this->setTransparencyEnabled(this->isTransparencyEnabled() ? FALSE : TRUE);
        this->showInfo(INFO_TIME);
      }
      return TRUE;
    case SoKeyboardEvent::C: // 'c' for cropping
      if ( kbevent->getState() == SoButtonEvent::DOWN ) {
        this->setAutoCroppingEnabled(this->isAutoCroppingEnabled() ? FALSE : TRUE);
        this->showInfo(INFO_TIME);
      }
      return TRUE;
    case SoKeyboardEvent::B: // 'b' for border
      if ( kbevent->getState() == SoButtonEvent::DOWN ) {
        if ( !kbevent->wasShiftDown() ) {
          this->setCropBorderSize(this->getCropBorderSize() + 1);
        } else {
          this->setCropBorderSize(this->getCropBorderSize() - 1);
        }
        this->showInfo(INFO_TIME);
      }
      return TRUE;
    case SoKeyboardEvent::I: // 'i' for info
      if ( kbevent->getState() == SoButtonEvent::DOWN )
        this->showInfo(10);
      // else if ( kbevent->getState() == SoButtonEvent::UP )
      //  this->hideInfo();
      return TRUE;
    case SoKeyboardEvent::S: // 's' for snapshot
      if ( kbevent->getState() == SoButtonEvent::DOWN ) {
        this->createSnapshot(this->getDefaultSnapshotFilename());
        this->showInfo(INFO_TIME);
      }
      return TRUE;
    case SoKeyboardEvent::E: // 'e' for eps-snapshot
      if ( kbevent->getState() == SoButtonEvent::DOWN ) {
        this->createSnapshot("snapshot.eps");
        this->showInfo(INFO_TIME);
      }
      return TRUE;
    default:
      break;
    }
  }
  return So@Gui@ExaminerViewer::processSoEvent(event);
}

void
So@Gui@SnapshotViewer::sizeChanged(const SbVec2s & size)
{
  So@Gui@ExaminerViewer::sizeChanged(size);
  PIMPL->viewport = this->getGLSize();
  float aspect = float(PIMPL->viewport[0]) / float(PIMPL->viewport[1]);
  float x = 0, y = 0;
  if ( aspect < 1.0f ) {
    x = -0.5f;
    y = 0.5f * 1.0f/aspect;
  } else {
    x = -0.5f * aspect;
    y = 0.5f;
  }
  // need air - adjust inwards by four pixels
  x -= ((2.0f * x) / PIMPL->viewport[0]) * 4;
  y -= ((2.0f * y) / PIMPL->viewport[1]) * 4;
  PIMPL->infotrans->translation.setValue(SbVec3f(x, y, 0.1f));
  this->showInfo(INFO_TIME);
}

// *************************************************************************
