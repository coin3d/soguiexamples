/**************************************************************************\
 * Copyright (c) Kongsberg Oil & Gas Technologies AS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\**************************************************************************/

#include <math.h>
#include <stdlib.h>
#include <time.h>
#include <errno.h>
#include <string.h>

#include <Inventor/@Gui@/viewers/So@Gui@Viewer.h>
#include <Inventor/SoDB.h>
#include <Inventor/SoInput.h>
#include <Inventor/nodes/SoBaseColor.h>
#include <Inventor/nodes/SoCone.h>
#include <Inventor/nodes/SoCube.h>
#include <Inventor/nodes/SoCylinder.h>
#include <Inventor/nodes/SoScale.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoShapeHints.h>
#include <Inventor/nodes/SoSphere.h>
#include <Inventor/nodes/SoText3.h>
#include <Inventor/errors/SoDebugError.h>

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif // HAVE_CONFIG_H

#ifdef HAVE_SIMVOLEON_LIBRARY
#define VOLUMERENDERING
#endif // HAVE_SIMVOLEON_LIBRARY

#ifdef HAVE_VOLUMEVIZ_LIBRARY
#define VOLUMERENDERING
#endif // HAVE_VOLUMEVIZ_LIBRARY

#ifdef VOLUMERENDERING
#include <VolumeViz/nodes/SoVolumeRendering.h>
#endif // VOLUMERENDERING

#ifdef HAVE_SMALLCHANGE_LIBRARY
#include <SmallChange/misc/Init.h>
#endif // HAVE_SMALLCHANGE_LIBRARY

#ifdef HAVE_COINSCENERY_LIBRARY
#include <sim/coinscenery/SmScenery.h>
#endif // HAVE_COINSCENERY_LIBRARY

#ifdef HAVE_SIMARUBA_LIBRARY
#define GRAPH_MESH_EXTENSIONLIBRARY
#endif // HAVE_SIMARUBA_LIBRARY

#ifdef HAVE_MESHVIZ_LIBRARY
#define GRAPH_MESH_EXTENSIONLIBRARY
#endif // HAVE_MESHVIZ_LIBRARY

#ifdef GRAPH_MESH_EXTENSIONLIBRARY
#include <DataViz/PoDataViz.h>
#endif // GRAPH_MESH_EXTENSIONLIBRARY

// *************************************************************************

void
init_extra_libraries(void)
{
#ifdef HAVE_SMALLCHANGE_LIBRARY
  // It is useful to include and init the SmallChange library, as we
  // can then automatically load iv-files which includes extension
  // nodes, engines, nodekits, etc from SmallChange.
  smallchange_init();
#endif // HAVE_SMALLCHANGE_LIBRARY

#ifdef HAVE_SIMVOLEON_LIBRARY
  // Inits SIM Voleon, if available, for the same reason as for
  // SmallChange above.
  SoVolumeRendering::init();
#endif // HAVE_SIMVOLEON_LIBRARY

#ifdef GRAPH_MESH_EXTENSIONLIBRARY
  // Inits SIM Aruba or TGS MeshViz, if available, for the same reason
  // as for SmallChange above.
  PoDataViz::init();
#endif // GRAPH_MESH_EXTENSIONLIBRARY

#ifdef HAVE_COINSCENERY_LIBRARY
  // Inits the Coin nodes binding to SIM Scenery.
  SmScenery::initClasses();
#endif // HAVE_COINSCENERY_LIBRARY
}

// *************************************************************************

// Returns random value between 0.0f and 1.0f.
static float
normalized_rand(void)
{
  return float(rand())/float(RAND_MAX);
}

// *************************************************************************

template <class Type>
inline Type cu_max(const Type A, const Type B) {
  return (A < B) ? B : A;
}

template <class Type>
inline Type cu_min(const Type A, const Type B) {
  return (A < B) ? A : B;
}

// *************************************************************************

static SoNode *
shape_to_scene_graph(
  SoShape * shape)
{
  SoSeparator * root = new SoSeparator;
  SoShapeHints * hints = new SoShapeHints;
  hints->vertexOrdering = SoShapeHints::COUNTERCLOCKWISE;
  hints->shapeType = SoShapeHints::SOLID;
  hints->creaseAngle = 0.91f;
  root->addChild(hints);
  SoBaseColor * basecol = new SoBaseColor;
  basecol->rgb.setValue(cu_min(1.0f, 0.3f + normalized_rand()),
                         cu_min(1.0f, 0.3f + normalized_rand()),
                         cu_min(1.0f, 0.3f + normalized_rand()));
  root->addChild(basecol);

  SoScale * nonuniformscale = new SoScale;
  nonuniformscale->scaleFactor.setValue(normalized_rand() * 5.0f + 1.0f,
                                         normalized_rand() * 5.0f + 1.0f,
                                         normalized_rand() * 5.0f + 1.0f);
  root->addChild(nonuniformscale);

  root->addChild(shape);
  return (SoNode *) root;
} // shape_to_scene_graph()

// *************************************************************************

SoNode *
get_scene_graph(
  int argc,
  char ** argv)
{
  srand((unsigned int) time(NULL));

  if (argc > 1) {
    SoSeparator * root = new SoSeparator;
    root->ref();

    for (int c = 1; c < argc; ++c) {
      if (argv[c][0] == '-') {
        if (! strcmp(argv[c], "--cube")) {
          root->addChild(shape_to_scene_graph(new SoCube));
        } else if (! strcmp(argv[c], "--sphere")) {
          root->addChild(shape_to_scene_graph(new SoSphere));
        } else if (! strcmp(argv[c], "--cone")) {
          root->addChild(shape_to_scene_graph(new SoCone));
        } else if (! strcmp(argv[c], "--cylinder")) {
          root->addChild(shape_to_scene_graph(new SoCylinder));
        } else if (! strcmp(argv[c], "--text3")) {
          SoText3 * textnode = new SoText3;
          const char * s[] = { "www", "Coin3D", "org" };
          textnode->string.setValues(0, 3, s);
          textnode->parts.setValue(SoText3::ALL);
          textnode->justification = SoText3::CENTER;
          root->addChild(shape_to_scene_graph(textnode));
        }
      } else {
#if HAVE_DIME2SO
#endif
#if HAVE_PROFIT2SO
        if (prf_openflight_check_file(argv[c])) {
          SoNode * r = prf_openinventor_import(argv[c]);
          if (r) { root->addChild(r); }
        }
#endif
        SoInput in;
        if (in.openFile(argv[c])) {
          SoNode * r = SoDB::readAll(&in);
          if (r) { root->addChild(r); }
        }
      }
    }

    SoNode * n;
    switch (root->getNumChildren()) {
    case 0:
      root->unref();
      return NULL;
    case 1:
      n = root->getChild(0);
      n->ref();
      root->unref();
      n->unrefNoDelete();
      return n;
    default:
      root->unrefNoDelete();
      return root;
    }

  }
  int randval = rand() % 5;
  switch (randval) {
  case 0:  return shape_to_scene_graph(new SoCone);
  case 1:  return shape_to_scene_graph(new SoCube);
  case 2:  return shape_to_scene_graph(new SoCylinder);
  case 3:  return shape_to_scene_graph(new SoSphere);
  default:
    SoText3 * textnode = new SoText3;
    const char * s[] = { "www", "Coin3D", "org" };
    textnode->string.setValues(0, 3, s);
    textnode->parts.setValue(SoText3::ALL);
    textnode->justification = SoText3::CENTER;
    return shape_to_scene_graph(textnode);
  }
} // get_scene_graph()

static inline void
setStereoViewing(So@Gui@Viewer * v, SbBool f)
{
#ifdef HAVE_VIEWER_STEREO_VIEWING
  v->setStereoViewing(f);
#else // !HAVE_VIEWER_STEREO_VIEWING
  SoDebugError::postWarning("computils:config_viewer",
                            "So@Gui@Viewer::setStereoViewing() not available");
#endif // !HAVE_VIEWER_STEREO_VIEWING
}

static inline void
setQuadBufferStereo(So@Gui@Viewer * v, SbBool f)
{
#ifdef HAVE_VIEWER_QUADBUFFER_STEREO
  v->setQuadBufferStereo(f);
#else // !HAVE_VIEWER_QUADBUFFER_STEREO
  SoDebugError::postWarning("computils:config_viewer",
                            "So@Gui@Viewer::setQuadBufferStereo() not available");
#endif // !HAVE_VIEWER_QUADBUFFER_STEREO
}


void 
config_viewer(So@Gui@Viewer * viewer, int argc, char ** argv)
{
  int numpasses = 1;
  SbBool smoothing = FALSE;

  int i = 1;
  while (i < argc) {
    if (!strncmp(argv[i], "-psn_", 5)) {
      // ignore this bogus arg (OS X bundle launch argument)
      i++;
    }
    else if (!strcmp(argv[i], "--stereo")) {
      setQuadBufferStereo(viewer, TRUE);
      setStereoViewing(viewer, TRUE);
      i++;
    }
    else if (!strcmp(argv[i], "--anaglyph")) {
      setQuadBufferStereo(viewer, FALSE);
      setStereoViewing(viewer, TRUE);
      i++;
    }
    else if (!strcmp(argv[i], "--stereooffset") && (i < argc - 1)) {
      viewer->setStereoOffset(atoi(argv[i+1]));
      i += 2;
    }
    else

    if (!strcmp(argv[i], "--title") && (i < argc - 1)) {
      viewer->setTitle(argv[i+1]);
      i += 2;
    }
    else if (!strcmp(argv[i], "--size") && (i < argc - 2)) {
      viewer->setSize(SbVec2s(atoi(argv[i+1]), atoi(argv[i+2])));
      i += 3;
    }
    else if (!strcmp(argv[i], "--noheadlight")) {
      viewer->setHeadlight(FALSE);
      i++;
    }
    else if (!strcmp(argv[i], "--noautoclip")) {
      viewer->setAutoClipping(FALSE);
      i++;
    }
    else if (!strcmp(argv[i], "--smoothing")) {
      smoothing = TRUE;
      i++;
    }
    else if (!strcmp(argv[i], "--numpasses") && (i < argc -1)) {
      numpasses = atoi(argv[i+1]);
      i += 2;

      if ((numpasses < 1) || (numpasses > 15)) {
        (void)fprintf(stderr,
                      "Error: \"--numpasses\" option should give a value "
                      "in the range [1, 15].\n");
        exit(1);
      }
    }
    else if (!strcmp(argv[i], "--background")) {
      SbBool err = FALSE;
      if (argc < i+4) { err = TRUE; }
      SbColor col;
      if (!err) {
        char * chk;
        errno = 0;
        for (int j=0; (j < 3) && !err; j++) {
          const char * nptr = argv[i+1+j];
          col[j] = strtod(nptr, &chk);
          if (((col[j] == 0.0f) && (chk == nptr)) || (errno!=0) ||
              (col[j] < 0.0f) || (col[j] > 1.0f)) {
            err = TRUE;
          }
        }
      }

      if (err) {
        (void)fprintf(stderr,
                      "Error: \"--background\" option must be given with "
                      "3 \"R G B\" color values in the range [0.0, 1.0].\n");
        exit(1);
      }

      viewer->setBackgroundColor(col);
      i += 4;
    }
    else i++;
  }

#ifdef HAVE_SOGUIGLWIDGET_ACCUMULATIONBUFFER
  if (numpasses > 1) viewer->setAccumulationBuffer(TRUE);
#endif // HAVE_SOGUIGLWIDGET_ACCUMULATIONBUFFER

  if (smoothing || numpasses > 1) {
    viewer->setAntialiasing(smoothing, numpasses);
  }

} // config_viewer


// *************************************************************************
