/**************************************************************************\
 *
 *  This file is part of a set of example programs for the Coin library.
 *  Copyright (C) 2000-2003 by Systems in Motion. All rights reserved.
 *
 *                   <URL:http://www.coin3d.org>
 *
 *  This sourcecode can be redistributed and/or modified under the
 *  terms of the GNU General Public License version 2 as published by
 *  the Free Software Foundation. See the file COPYING at the root
 *  directory of the distribution for more details.
 *
 *  As a special exception, all sourcecode of the demo examples can be
 *  used for any purpose for licensees of the Coin Professional
 *  Edition License, without the restrictions of the GNU GPL. See our
 *  web pages for information about how to acquire a Professional Edition
 *  License.
 *
 *  Systems in Motion, <URL:http://www.sim.no>, <mailto:support@sim.no>
 *
\**************************************************************************/

#include <Inventor/SbBasic.h>
#include <Inventor/errors/SoDebugError.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoMaterial.h>
#include <Inventor/nodes/SoCube.h>
#include <Inventor/nodes/SoCylinder.h>
#include <Inventor/nodes/SoTexture2.h>
#include <Inventor/nodes/SoComplexity.h>
#include <Inventor/nodes/SoShapeHints.h>
#include <Inventor/nodes/SoRotation.h>

#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/@Gui@/So@Gui@MaterialSliderSet.h>

// *************************************************************************

int
main(
  int argc,
  char ** argv )
{
  @WIDGET@ window = So@Gui@::init( argv[0] );

  So@Gui@ExaminerViewer * viewer = new So@Gui@ExaminerViewer( window );
  viewer->setTransparencyType(SoGLRenderAction::DELAYED_BLEND);
  viewer->setDecoration( FALSE );
  SoSeparator * root = new SoSeparator;

  // turn on backface culling
  SoShapeHints * sh = new SoShapeHints;
  sh->vertexOrdering = SoShapeHints::COUNTERCLOCKWISE;
  sh->shapeType = SoShapeHints::SOLID;
  root->addChild(sh);

  // maximum resolution on cylinders, turn off texture filtering
  SoComplexity * cmplx = new SoComplexity;
  cmplx->textureQuality = 0.01f;
  cmplx->type = SoComplexity::OBJECT_SPACE;
  cmplx->value = 1.0f;
  root->addChild(cmplx);

  // make textured cube
  SoSeparator * sep = new SoSeparator;
  SoCube * cube = new SoCube;
  SoTexture2 * tex2 = new SoTexture2;
  unsigned char mytex[4] = {0xff, 0x88,0x88, 0xff}; 
  tex2->image.setValue(SbVec2s(2,2), 1, mytex);
  sep->addChild(tex2);
  sep->addChild(cube);
  root->addChild(sep);

  // add the material node
  SoMaterial * materialNode = new SoMaterial;
  root->addChild( materialNode );

  // add a cylinder
  SoCylinder * cyl = new SoCylinder;
  cyl->height = 1.7f;
  cyl->radius = 1.33f;
  root->addChild( cyl );

  // rotate and add cylinder again
  SoRotation * rot1 = new SoRotation;
  rot1->rotation = SbRotation(SbVec3f(1,0,0), M_PI/2.0); 
  root->addChild(rot1);
  root->addChild(cyl);
  
  viewer->setSceneGraph( root );
  viewer->show();

  So@Gui@MaterialSliderSet * materialsliders =
    new So@Gui@MaterialSliderSet( NULL, NULL, FALSE, materialNode );
  materialsliders->show();
  
  So@Gui@::show( window );
  So@Gui@::mainLoop();

  delete materialsliders;
  delete viewer;

  return 0;
} // main()

// *************************************************************************
