/**************************************************************************\
 * Copyright (c) Kongsberg Oil & Gas Technologies AS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\**************************************************************************/

// A simple example that shows how to set up a scenegraph in the
// overlay planes.

#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/actions/SoGLRenderAction.h>
#include <Inventor/nodes/SoColorIndex.h>
#include <Inventor/nodes/SoCoordinate3.h>
#include <Inventor/nodes/SoLightModel.h>
#include <Inventor/nodes/SoLineSet.h>
#include <Inventor/nodes/SoOrthographicCamera.h>
#include <Inventor/nodes/SoPerspectiveCamera.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoSphere.h>
#include <Inventor/nodes/SoAsciiText.h>

// *************************************************************************

int
main(int argc, char ** argv)
{
  @WIDGET@ window = So@Gui@::init(argv[0]);

  // Set up scenegraph for normal OpenGL planes.
  SoSeparator * normalroot = new SoSeparator;
  SoAsciiText * text = new SoAsciiText;
  const char * strings[] = {
    "If overlay planes are available you should now",
    "see a lineset rectangle over the 3D text.",
    "If not, overlay planes are not supported."
  };
  text->string.setValues(0, sizeof(strings) / sizeof(char *), strings);
  text->justification = SoAsciiText::CENTER;
  normalroot->addChild(text);

  SoSeparator * overlayroot = new SoSeparator;

  // set up camera of overlay scene
  SoOrthographicCamera * overlayCamera = new SoOrthographicCamera;
  overlayCamera->position.setValue(0, 0, 5);
  overlayCamera->nearDistance.setValue(1);
  overlayCamera->farDistance.setValue(10);
  overlayroot->addChild(overlayCamera);

  // we only have to render in BaseColor
  SoLightModel * overlayLightModel = new SoLightModel;
  overlayLightModel->model = SoLightModel::BASE_COLOR;
  overlayroot->addChild(overlayLightModel);

  // use the first entry in the overlay color map as
  // Base Color
  SoColorIndex * overlayColorIndex = new SoColorIndex;
  overlayColorIndex->index = 1;
  overlayroot->addChild(overlayColorIndex);

  // here is the stuff to be rendered
  SoSeparator * overlaygeometry = new SoSeparator;
  overlayroot->addChild(overlaygeometry);

  SoSeparator * lineSep = new SoSeparator;
  overlaygeometry->addChild(lineSep);

  SoCoordinate3 * lineCoords = new SoCoordinate3;
  SoLineSet * lineSet = new SoLineSet;

  lineSep->addChild(lineCoords);
  lineSep->addChild(lineSet);

  lineCoords->point.set1Value(0,-0.5f,-0.5f, 0.0f);
  lineCoords->point.set1Value(1,-0.5f, 0.5f, 0.0f);
  lineCoords->point.set1Value(2, 0.5f, 0.5f, 0.0f);
  lineCoords->point.set1Value(3, 0.5f,-0.5f, 0.0f);
  lineCoords->point.set1Value(4,-0.5f,-0.5f, 0.0f);

  lineSet->numVertices.setValue(5);

  So@Gui@ExaminerViewer * viewer = new So@Gui@ExaminerViewer(window);
  viewer->setBackgroundColor(SbColor(0.0f, 0.2f, 0.3f));
  viewer->setSceneGraph(normalroot);
  viewer->setOverlaySceneGraph(overlayroot);

  overlayCamera->viewAll(overlaygeometry, viewer->getViewportRegion());

  viewer->show();
  So@Gui@::show(window);

  So@Gui@::mainLoop();

  delete viewer;
  return 0;
} // main()

// *************************************************************************
