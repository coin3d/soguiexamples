/**************************************************************************\
 *
 *  This file is part of a set of demo programs for the Coin library.
 *  Copyright (C) 2000-2001 by Systems in Motion. All rights reserved.
 *
 *  This sourcecode can be redistributed and/or modified under the
 *  terms of the GNU General Public License version 2 as published by
 *  the Free Software Foundation. See the file COPYING at the root
 *  directory of the distribution for more details.
 *
 *  As a special exception, all sourcecode of the demo examples can be
 *  used for any purpose for licensees of the Coin Professional
 *  Edition License, without the restrictions of the GNU GPL. See our
 *  web pages for information about how to acquire a Professional Edition
 *  License.
 *
 *  Systems in Motion, Prof Brochs gate 6, 7030 Trondheim, NORWAY
 *  http://www.sim.no support@sim.no Voice: +47 22114160 Fax: +47 22207097
 *
\**************************************************************************/
/* ********************************************************************** *
 * styx
 *
 * Demo application for showcasing Coin.
 *
 * Written by Lars J. Aas <larsa@coin3d.org>.
 * ********************************************************************** */
 
#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>

#include <Inventor/SbLinear.h>
#include <Inventor/actions/SoGLRenderAction.h>
#include <Inventor/actions/SoSearchAction.h>
#include <Inventor/nodes/SoCoordinate3.h>
#include <Inventor/nodes/SoCallback.h>

#include <stdio.h>
#include <string.h>

/* ********************************************************************** */

const char * scenegraph[] = {
  "#Inventor V2.1 ascii",
  "",
  "Separator {",
  "  DEF hook Callback {}",
  "  ShapeHints {",
  "    vertexOrdering COUNTERCLOCKWISE",
  "    shapeType SOLID",
  "  }",
  "  DirectionalLight {",
  "    color 0.4 0 0.8",
  "    intensity 0.5",
  "    direction 0.1 0 1",
  "  }",
//  "  DEF camera PerspectiveCamera {}",
  "  Rotor {",
  "    rotation 0 1 0 0.01",
  "    speed 0.02",
  "  }",
  "  Translation {",
  "    translation -150 -100 -100",
  "  }",
  "  Separator {",
  "    Coordinate3 {",
  "      point [",
  "        0 0 0",
  "        300 0 0",
  "        300 200 0",
  "        0 200 0",
  "        0 0 200",
  "        300 0 200",
  "        300 200 200",
  "        0 200 200",
  "      ]",
  "    }",
  "    Material {",
  "      diffuseColor 0.4 0 0",
  "      transparency 0.6",
  "    }",
//  "    IndexedFaceSet {", // frontfaces
//  "      coordIndex [",
//  "        3 2 1 0 -1",
//  "        4 5 6 7 -1",
//  "        0 1 5 4 -1",
//  "        2 3 7 6 -1",
//  "      ]",
//  "    }",
  "    Material {",
  "      diffuseColor 1 1 1",
  "      transparency 0",
  "    }",
  "    IndexedLineSet {",
  "      coordIndex [",
  "        0 1 -1",
  "        1 2 -1",
  "        2 3 -1",
  "        3 0 -1",
  "        0 4 -1",
  "        1 5 -1",
  "        2 6 -1",
  "        3 7 -1",
  "        4 5 -1",
  "        5 6 -1",
  "        6 7 -1",
  "        7 4 -1",
  "      ]",
  "    }",
  "    Separator {", // the animated styx
#define LINES 33
  "      Material {",
  "        diffuseColor 1 0 0",
  "        transparency 0",
  "      }",
  "      DEF redlines Coordinate3 {}",
  "      LineSet {",
  "        numVertices [",
  "          2 2 2 2 2 2 2 2 2 2", // 10 lines
  "          2 2 2 2 2 2 2 2 2 2", // 10 lines
  "          2 2 2 2 2 2 2 2 2 2", // 10 lines
  "          2 2 2", // 3 lines
  "          -1",
  "        ]",
  "      }",
  "      Material {",
  "        diffuseColor 0 1 0",
  "        transparency 0",
  "      }",
  "      DEF greenlines Coordinate3 {}",
  "      LineSet {",
  "        numVertices [",
  "          2 2 2 2 2 2 2 2 2 2", // 10 lines
  "          2 2 2 2 2 2 2 2 2 2", // 10 lines
  "          2 2 2 2 2 2 2 2 2 2", // 10 lines
  "          2 2 2", // 3 lines
  "          -1",
  "        ]",
  "      }",
  "      Material {",
  "        diffuseColor 0 0 1",
  "        transparency 0",
  "      }",
  "      DEF bluelines Coordinate3 {}",
  "      LineSet {",
  "        numVertices [",
  "          2 2 2 2 2 2 2 2 2 2", // 10 lines
  "          2 2 2 2 2 2 2 2 2 2", // 10 lines
  "          2 2 2 2 2 2 2 2 2 2", // 10 lines
  "          2 2 2", // 3 lines
  "          -1",
  "        ]",
  "      }",
  "    }",
//  "    Separator {", // the animated star scrollers
//  "      PolygonOffset {",
//  "        units 1",
//  "        styles POINTS",
//  "      }",
  "      Material {",
  "        diffuseColor 0 0.5 1",
  "        emissiveColor 0 0.9 0.9",
  "      }",
  "      DEF points Coordinate3 {}",
  "      PointSet {",
#define POINTS 400
  "        numPoints 400",
  "      }",
//  "    }",
  "  }",
  "}",
  NULL
};

/* ********************************************************************** */

char *
strconcat(const char * array[], unsigned int &total)
{
  int i;
  for (i = total = 0; array[i]; i++ )
    total += strlen(array[i]) + 1;
  char * buf = new char [total + 1];
  for (i = total = 0; array[i]; i++ ) {
    strcpy(buf+total, array[i]);
    total += strlen(array[i]);
    buf[total] = '\n';
    total++;
  }
  return buf;
}

/* ********************************************************************** */

SoNode *
getNodeByName(SoNode * root, const char * name)
{
  static SoSearchAction * action;
  if ( !action ) action = new SoSearchAction;
  action->reset();
  action->setFind(SoSearchAction::NODE);
  action->setInterest(SoSearchAction::FIRST);
  action->setName(SbName(name));
  action->apply(root);
  if ( !action->isFound() ) return NULL;
  return action->getPath()->getTail();
}

/* ********************************************************************** */

void
initLines(SoCoordinate3 * coords)
{
  float floats[LINES*2][3]; // = new float [ LINES * 2 ][3];
  for ( int i = 0; i < LINES; i++ ) {
    floats[i*2][0] = (300.0f / float(LINES)) * float(i);
    floats[i*2][1] = 0.0f;
    floats[i*2][2] = 0.0f;

    floats[i*2+1][0] = (300.0f / float(LINES)) * float(i);
    floats[i*2+1][1] = 0.0f;
    floats[i*2+1][2] = 200.0f;
  }
  coords->point.setValues(0, LINES * 2, floats);
}

void
tickLines1(SoCoordinate3 * coords)
{
  static SbBool initialized = FALSE;
  static SbVec3f p1dir;
  static SbVec3f p2dir;
  int i;

  if ( ! initialized ) {
    initialized = TRUE;
    p1dir.setValue(0, 1, 0);
    p2dir.setValue(0, 1, 0);
  }
  SbVec3f * points = coords->point.startEditing();

  for ( i = 0; i < (LINES * 2); i++ ) {
    if ( (i / 2) == 0 ) {
      if ( (i&1) == 0 ) points[i] += p1dir * 5;
      else              points[i] += p2dir * 5;
    } else {
      SbVec3f gravity = points[i-2] - points[i];
      if ( (i&1) == 0 ) points[i] += (gravity * 0.2);
      else              points[i] += (gravity * 0.2);
    }
  }

  if ( points[0][0] < 0.0f || points[0][0] > 300.0f ) p1dir[0] = 0.0f - p1dir[0];
  if ( points[0][1] < 0.0f || points[0][1] > 200.0f ) p1dir[1] = 0.0f - p1dir[1];
  if ( points[0][2] < 0.0f || points[0][2] > 200.0f ) p1dir[2] = 0.0f - p1dir[2];

  if ( points[1][0] < 0.0f || points[1][0] > 300.0f ) p2dir[0] = 0.0f - p2dir[0];
  if ( points[1][1] < 0.0f || points[1][1] > 200.0f ) p2dir[1] = 0.0f - p2dir[1];
  if ( points[1][2] < 0.0f || points[1][2] > 200.0f ) p2dir[2] = 0.0f - p2dir[2];

  for ( i = 0; i < (LINES * 2); i++ ) {
    if ( points[i][0] < 0.0f )        points[i][0] = 0.0f - points[i][0];
    else if ( points[i][0] > 300.0f ) points[i][0] = 600.0f - points[i][0];
    if ( points[i][1] < 0.0f )        points[i][1] = 0.0f - points[i][1];
    else if ( points[i][1] > 200.0f ) points[i][1] = 400.0f - points[i][1];
    if ( points[i][2] < 0.0f )        points[i][2] = 0.0f - points[i][2];
    else if ( points[i][2] > 200.0f ) points[i][2] = 400.0f - points[i][2];
  }

  p1dir[0] += (fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p1dir[1] += (fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p1dir[2] += (fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p1dir.normalize();
  p2dir[0] += (fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p2dir[1] += (fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p2dir[2] += (fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p2dir.normalize();
  coords->point.finishEditing();
}

void
tickLines2(SoCoordinate3 * coords)
{
  static SbBool initialized = FALSE;
  static SbVec3f p1dir;
  static SbVec3f p2dir;
  int i;

  if ( ! initialized ) {
    initialized = TRUE;
    p1dir.setValue(0, 1, 0);
    p2dir.setValue(0, 1, 0);
  }
  SbVec3f * points = coords->point.startEditing();

  for ( i = 0; i < (LINES * 2); i++ ) {
    if ( (i / 2) == 0 ) {
      if ( (i&1) == 0 ) points[i] += p1dir * 5;
      else              points[i] += p2dir * 5;
    } else {
      SbVec3f gravity = points[i-2] - points[i];
      if ( (i&1) == 0 ) points[i] += (gravity * 0.2);
      else              points[i] += (gravity * 0.2);
    }
  }

  if ( points[0][0] < 0.0f || points[0][0] > 300.0f ) p1dir[0] = 0.0f - p1dir[0];
  if ( points[0][1] < 0.0f || points[0][1] > 200.0f ) p1dir[1] = 0.0f - p1dir[1];
  if ( points[0][2] < 0.0f || points[0][2] > 200.0f ) p1dir[2] = 0.0f - p1dir[2];

  if ( points[1][0] < 0.0f || points[1][0] > 300.0f ) p2dir[0] = 0.0f - p2dir[0];
  if ( points[1][1] < 0.0f || points[1][1] > 200.0f ) p2dir[1] = 0.0f - p2dir[1];
  if ( points[1][2] < 0.0f || points[1][2] > 200.0f ) p2dir[2] = 0.0f - p2dir[2];

  for ( i = 0; i < (LINES * 2); i++ ) {
    if ( points[i][0] < 0.0f )        points[i][0] = 0.0f - points[i][0];
    else if ( points[i][0] > 300.0f ) points[i][0] = 600.0f - points[i][0];
    if ( points[i][1] < 0.0f )        points[i][1] = 0.0f - points[i][1];
    else if ( points[i][1] > 200.0f ) points[i][1] = 400.0f - points[i][1];
    if ( points[i][2] < 0.0f )        points[i][2] = 0.0f - points[i][2];
    else if ( points[i][2] > 200.0f ) points[i][2] = 400.0f - points[i][2];
  }

  p1dir[0] += (fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p1dir[1] += (fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p1dir[2] += (fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p1dir.normalize();
  p2dir[0] += (fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p2dir[1] += (fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p2dir[2] += (fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p2dir.normalize();
  coords->point.finishEditing();
}

void
tickLines3(SoCoordinate3 * coords)
{
  static SbBool initialized = FALSE;
  static SbVec3f p1dir;
  static SbVec3f p2dir;
  int i;

  if ( ! initialized ) {
    initialized = TRUE;
    p1dir.setValue(0, 1, 0);
    p2dir.setValue(0, 1, 0);
  }
  SbVec3f * points = coords->point.startEditing();

  for ( i = 0; i < (LINES * 2); i++ ) {
    if ( (i / 2) == 0 ) {
      if ( (i&1) == 0 ) points[i] += p1dir * 5;
      else              points[i] += p2dir * 5;
    } else {
      SbVec3f gravity = points[i-2] - points[i];
      if ( (i&1) == 0 ) points[i] += (gravity * 0.2);
      else              points[i] += (gravity * 0.2);
    }
  }

  if ( points[0][0] < 0.0f || points[0][0] > 300.0f ) p1dir[0] = 0.0f - p1dir[0];
  if ( points[0][1] < 0.0f || points[0][1] > 200.0f ) p1dir[1] = 0.0f - p1dir[1];
  if ( points[0][2] < 0.0f || points[0][2] > 200.0f ) p1dir[2] = 0.0f - p1dir[2];

  if ( points[1][0] < 0.0f || points[1][0] > 300.0f ) p2dir[0] = 0.0f - p2dir[0];
  if ( points[1][1] < 0.0f || points[1][1] > 200.0f ) p2dir[1] = 0.0f - p2dir[1];
  if ( points[1][2] < 0.0f || points[1][2] > 200.0f ) p2dir[2] = 0.0f - p2dir[2];

  for ( i = 0; i < (LINES * 2); i++ ) {
    if ( points[i][0] < 0.0f )        points[i][0] = 0.0f - points[i][0];
    else if ( points[i][0] > 300.0f ) points[i][0] = 600.0f - points[i][0];
    if ( points[i][1] < 0.0f )        points[i][1] = 0.0f - points[i][1];
    else if ( points[i][1] > 200.0f ) points[i][1] = 400.0f - points[i][1];
    if ( points[i][2] < 0.0f )        points[i][2] = 0.0f - points[i][2];
    else if ( points[i][2] > 200.0f ) points[i][2] = 400.0f - points[i][2];
  }

  p1dir[0] += (fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p1dir[1] += (fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p1dir[2] += (fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p1dir.normalize();
  p2dir[0] += (fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p2dir[1] += (fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p2dir[2] += (fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p2dir.normalize();
  coords->point.finishEditing();
}

void
initPoints(SoCoordinate3 * coords)
{
  float floats[POINTS][3]; // = new float [ POINTS ][ 3 ];
  for ( int i = 0; i < POINTS; i++ ) {
    if ( i < POINTS/4 ) {
      floats[i][0] = (float) (rand() % 301);
      floats[i][1] = 0.0f;
      floats[i][2] = (float) (rand() % 201);
    } else if ( i < POINTS/2 ) {
      floats[i][0] = (float) (rand() % 301);
      floats[i][1] = (float) (rand() % 201);
      floats[i][2] = 0.0f;
    } else if ( i < (3*POINTS)/4 ) {
      floats[i][0] = (float) (rand() % 301);
      floats[i][1] = 200.0f;
      floats[i][2] = (float) (rand() % 201);
    } else {
      floats[i][0] = (float) (rand() % 301);
      floats[i][1] = (float) (rand() % 201);
      floats[i][2] = 200.0f;
    }
  }
  coords->point.setValues(0, POINTS, floats);
}

void
tickPoints(SoCoordinate3 * coords)
{
  static float * speed = NULL;
  int i;
  if ( ! speed ) {
    speed = new float [ POINTS ];
    for ( i = 0; i < POINTS; i++ ) {
      speed[i] = 2.0f + fmod(float(rand())/20.0f, 3.0f);
    }
  }
  SbVec3f * points = coords->point.startEditing();
  for ( i = 0; i < POINTS; i++ ) {
    points[i][0] -= speed[i];
    if ( points[i][0] < 0 ) points[i][0] += 300.0f;
  }
  coords->point.finishEditing();
}

/* ********************************************************************** */

void
event_cb(void * closure, SoAction * action)
{
  So@Gui@ExaminerViewer * viewer = (So@Gui@ExaminerViewer *) closure;
  if ( action->isOfType(SoGLRenderAction::getClassTypeId()) ) {
    SoGLRenderAction * raaction = (SoGLRenderAction *) action;
    SoNode * scene = action->getNodeAppliedTo();
    if ( scene ) {
      tickLines1((SoCoordinate3 *) getNodeByName(scene, "redlines"));
      tickLines2((SoCoordinate3 *) getNodeByName(scene, "greenlines"));
      tickLines3((SoCoordinate3 *) getNodeByName(scene, "bluelines"));
      tickPoints((SoCoordinate3 *) getNodeByName(scene, "points"));
    }
  }
}

/* ********************************************************************** */

int
main(
  int argc,
  char ** argv )
{
  setbuf(stderr, NULL);
  setbuf(stdout, NULL);
  @WIDGET@ window = So@Gui@::init(argc, argv, "Styx");

  srand(SbTime::getTimeOfDay().getMsecValue());

  So@Gui@ExaminerViewer * viewer = new So@Gui@ExaminerViewer(window);
  viewer->setTransparencyType(SoGLRenderAction::DELAYED_BLEND);
  viewer->setDecoration(FALSE);

  SoInput * in = new SoInput;
  unsigned int len;
  char * buffer = strconcat(scenegraph, len);
  in->setBuffer(buffer, len);
  SoNode * scene;
  if ( ! SoDB::read(in, scene) ) {
    delete [] buffer;
    delete in;
    delete viewer;
    fprintf(stderr, "%s: error in scene - exiting.\n", argv[0]);
    exit(-1);
  }
  delete [] buffer;
  delete in;
  scene->ref();

  SoCallback * hook = (SoCallback *) getNodeByName(scene, "hook");
  if ( ! hook ) {
    fprintf(stderr, "hook not installed.\n");
  } else {
    hook->setCallback(event_cb, viewer);
  }

  initLines((SoCoordinate3 *) getNodeByName(scene, "redlines"));
  initLines((SoCoordinate3 *) getNodeByName(scene, "greenlines"));
  initLines((SoCoordinate3 *) getNodeByName(scene, "bluelines"));
  initPoints((SoCoordinate3 *) getNodeByName(scene, "points"));

  scene->unrefNoDelete();
  viewer->setSceneGraph(scene);
  viewer->setFullScreen(TRUE); // might be too slow?
  viewer->show();
  viewer->viewAll();
  viewer->setTitle("Styx Demo");
  So@Gui@::show(window);
  So@Gui@::mainLoop();
  viewer->hide();
  delete viewer;
  return 0;
}

/* EOF ****************************************************************** */
