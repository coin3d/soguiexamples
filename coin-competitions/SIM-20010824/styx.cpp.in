/**************************************************************************\
 * Copyright (c) Kongsberg Oil & Gas Technologies AS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\**************************************************************************/
/* ********************************************************************** *
 * styx
 *
 * Demo application for showcasing Coin.
 *
 * Written by Lars J. Aas <larsa@coin3d.org>.
 * ********************************************************************** */

#if HAVE_CONFIG_H
#include <config.h>
#endif // HAVE_CONFIG_H

#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>

#include <Inventor/SbLinear.h>
#include <Inventor/actions/SoGLRenderAction.h>
#include <Inventor/actions/SoSearchAction.h>
#include <Inventor/nodes/SoCoordinate3.h>
#include <Inventor/nodes/SoCallback.h>

#include <cstdlib>  // srand(), rand(), exit()
#include <cstdio>
#include <cstring>

/* ********************************************************************** */

const char * scenegraph[] = {
  "#Inventor V2.1 ascii",
  "",
  "Separator {",
  "  DEF hook Callback {}",
  "  ShapeHints {",
  "    vertexOrdering COUNTERCLOCKWISE",
  "    shapeType SOLID",
  "  }",
  "  DirectionalLight {",
  "    color 0.4 0 0.8",
  "    intensity 0.5",
  "    direction 0.1 0 1",
  "  }",
//  "  DEF camera PerspectiveCamera {}",
  "  Rotor {",
  "    rotation 0 1 0 0.01",
  "    speed 0.02",
  "  }",
  "  Translation {",
  "    translation -150 -100 -100",
  "  }",
  "  Separator {",
  "    Coordinate3 {",
  "      point [",
  "        0 0 0,",
  "        300 0 0,",
  "        300 200 0,",
  "        0 200 0,",
  "        0 0 200,",
  "        300 0 200,",
  "        300 200 200,",
  "        0 200 200",
  "      ]",
  "    }",
  "    Material {",
  "      diffuseColor 0.4 0 0",
  "      transparency 0.6",
  "    }",
//  "    IndexedFaceSet {", // frontfaces
//  "      coordIndex [",
//  "        3 2 1 0 -1",
//  "        4 5 6 7 -1",
//  "        0 1 5 4 -1",
//  "        2 3 7 6 -1",
//  "      ]",
//  "    }",
  "    Material {",
  "      diffuseColor 1 1 1",
  "      transparency 0",
  "    }",
  "    IndexedLineSet {",
  "      coordIndex [",
  "        0, 1, -1,",
  "        1, 2, -1,",
  "        2, 3, -1,",
  "        3, 0, -1,",
  "        0, 4, -1,",
  "        1, 5, -1,",
  "        2, 6, -1,",
  "        3, 7, -1,",
  "        4, 5, -1,",
  "        5, 6, -1,",
  "        6, 7, -1,",
  "        7, 4, -1",
  "      ]",
  "    }",
  "    Separator {", // the animated styx
#define LINES 33
  "      Material {",
  "        diffuseColor 1 0 0",
  "        transparency 0",
  "      }",
  "      DEF redlines Coordinate3 {}",
  "      LineSet {",
  "        numVertices [",
  "          2, 2, 2, 2, 2, 2, 2, 2, 2, 2,", // 10 lines
  "          2, 2, 2, 2, 2, 2, 2, 2, 2, 2,", // 10 lines
  "          2, 2, 2, 2, 2, 2, 2, 2, 2, 2,", // 10 lines
  "          2, 2, 2,", // 3 lines
  "          -1",
  "        ]",
  "      }",
  "      Material {",
  "        diffuseColor 0 1 0",
  "        transparency 0",
  "      }",
  "      DEF greenlines Coordinate3 {}",
  "      LineSet {",
  "        numVertices [",
  "          2, 2, 2, 2, 2, 2, 2, 2, 2, 2,", // 10 lines
  "          2, 2, 2, 2, 2, 2, 2, 2, 2, 2,", // 10 lines
  "          2, 2, 2, 2, 2, 2, 2, 2, 2, 2,", // 10 lines
  "          2, 2, 2,", // 3 lines
  "          -1",
  "        ]",
  "      }",
  "      Material {",
  "        diffuseColor 0 0 1",
  "        transparency 0",
  "      }",
  "      DEF bluelines Coordinate3 {}",
  "      LineSet {",
  "        numVertices [",
  "          2, 2, 2, 2, 2, 2, 2, 2, 2, 2,", // 10 lines
  "          2, 2, 2, 2, 2, 2, 2, 2, 2, 2,", // 10 lines
  "          2, 2, 2, 2, 2, 2, 2, 2, 2, 2,", // 10 lines
  "          2, 2, 2,", // 3 lines
  "          -1",
  "        ]",
  "      }",
  "    }",
//  "    Separator {", // the animated star scrollers
//  "      PolygonOffset {",
//  "        units 1",
//  "        styles POINTS",
//  "      }",
  "      Material {",
  "        diffuseColor 0 0.5 1",
  "        emissiveColor 0 0.9 0.9",
  "      }",
  "      DEF points Coordinate3 {}",
  "      PointSet {",
#define POINTS 400
  "        numPoints 400",
  "      }",
//  "    }",
  "  }",
  "}",
  NULL
};

/* ********************************************************************** */

char *
strconcat(const char * array[], size_t &total)
{
  size_t i;
  for (i = total = 0; array[i]; i++ )
    total += strlen(array[i]) + 1;
  char * buf = new char [total + 1];
  for (i = total = 0; array[i]; i++ ) {
    strcpy(buf+total, array[i]);
    total += strlen(array[i]);
    buf[total] = '\n';
    total++;
  }
  return buf;
}

/* ********************************************************************** */

SoNode *
getNodeByName(SoNode * root, const char * name)
{
  static SoSearchAction * action;
  if ( !action ) action = new SoSearchAction;
  action->setName(SbName(name));
  action->setInterest(SoSearchAction::FIRST);
  action->apply(root);
  if ( !action->getPath() ) return NULL;
  return action->getPath()->getTail();
}

/* ********************************************************************** */

void
initLines(SoCoordinate3 * coords)
{
  float floats[LINES*2][3]; // = new float [ LINES * 2 ][3];
  for ( int i = 0; i < LINES; i++ ) {
    floats[i*2][0] = (300.0f / float(LINES)) * float(i);
    floats[i*2][1] = 0.0f;
    floats[i*2][2] = 0.0f;

    floats[i*2+1][0] = (300.0f / float(LINES)) * float(i);
    floats[i*2+1][1] = 0.0f;
    floats[i*2+1][2] = 200.0f;
  }
  // FIXME: this crashes under SGI Inventor. Investigate. 20010919 mortene.
  coords->point.setValues(0, LINES * 2, floats);
}

void
tickLines1(SoCoordinate3 * coords)
{
  static SbBool initialized = FALSE;
  static SbVec3f p1dir;
  static SbVec3f p2dir;
  int i;

  if ( ! initialized ) {
    initialized = TRUE;
    p1dir.setValue(0, 1, 0);
    p2dir.setValue(0, 1, 0);
  }
  SbVec3f * points = coords->point.startEditing();

  for ( i = 0; i < (LINES * 2); i++ ) {
    if ( (i / 2) == 0 ) {
      if ( (i&1) == 0 ) points[i] += p1dir * 5;
      else              points[i] += p2dir * 5;
    } else {
      SbVec3f gravity = points[i-2] - points[i];
      if ( (i&1) == 0 ) points[i] += (gravity * 0.2f);
      else              points[i] += (gravity * 0.2f);
    }
  }

  if ( points[0][0] < 0.0f || points[0][0] > 300.0f ) p1dir[0] = 0.0f - p1dir[0];
  if ( points[0][1] < 0.0f || points[0][1] > 200.0f ) p1dir[1] = 0.0f - p1dir[1];
  if ( points[0][2] < 0.0f || points[0][2] > 200.0f ) p1dir[2] = 0.0f - p1dir[2];

  if ( points[1][0] < 0.0f || points[1][0] > 300.0f ) p2dir[0] = 0.0f - p2dir[0];
  if ( points[1][1] < 0.0f || points[1][1] > 200.0f ) p2dir[1] = 0.0f - p2dir[1];
  if ( points[1][2] < 0.0f || points[1][2] > 200.0f ) p2dir[2] = 0.0f - p2dir[2];

  for ( i = 0; i < (LINES * 2); i++ ) {
    if ( points[i][0] < 0.0f )        points[i][0] = 0.0f - points[i][0];
    else if ( points[i][0] > 300.0f ) points[i][0] = 600.0f - points[i][0];
    if ( points[i][1] < 0.0f )        points[i][1] = 0.0f - points[i][1];
    else if ( points[i][1] > 200.0f ) points[i][1] = 400.0f - points[i][1];
    if ( points[i][2] < 0.0f )        points[i][2] = 0.0f - points[i][2];
    else if ( points[i][2] > 200.0f ) points[i][2] = 400.0f - points[i][2];
  }

  p1dir[0] += ((float)fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p1dir[1] += ((float)fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p1dir[2] += ((float)fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p1dir.normalize();
  p2dir[0] += ((float)fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p2dir[1] += ((float)fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p2dir[2] += ((float)fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p2dir.normalize();
  coords->point.finishEditing();
}

void
tickLines2(SoCoordinate3 * coords)
{
  static SbBool initialized = FALSE;
  static SbVec3f p1dir;
  static SbVec3f p2dir;
  int i;

  if ( ! initialized ) {
    initialized = TRUE;
    p1dir.setValue(0, 1, 0);
    p2dir.setValue(0, 1, 0);
  }
  SbVec3f * points = coords->point.startEditing();

  for ( i = 0; i < (LINES * 2); i++ ) {
    if ( (i / 2) == 0 ) {
      if ( (i&1) == 0 ) points[i] += p1dir * 5;
      else              points[i] += p2dir * 5;
    } else {
      SbVec3f gravity = points[i-2] - points[i];
      if ( (i&1) == 0 ) points[i] += (gravity * 0.2f);
      else              points[i] += (gravity * 0.2f);
    }
  }

  if ( points[0][0] < 0.0f || points[0][0] > 300.0f ) p1dir[0] = 0.0f - p1dir[0];
  if ( points[0][1] < 0.0f || points[0][1] > 200.0f ) p1dir[1] = 0.0f - p1dir[1];
  if ( points[0][2] < 0.0f || points[0][2] > 200.0f ) p1dir[2] = 0.0f - p1dir[2];

  if ( points[1][0] < 0.0f || points[1][0] > 300.0f ) p2dir[0] = 0.0f - p2dir[0];
  if ( points[1][1] < 0.0f || points[1][1] > 200.0f ) p2dir[1] = 0.0f - p2dir[1];
  if ( points[1][2] < 0.0f || points[1][2] > 200.0f ) p2dir[2] = 0.0f - p2dir[2];

  for ( i = 0; i < (LINES * 2); i++ ) {
    if ( points[i][0] < 0.0f )        points[i][0] = 0.0f - points[i][0];
    else if ( points[i][0] > 300.0f ) points[i][0] = 600.0f - points[i][0];
    if ( points[i][1] < 0.0f )        points[i][1] = 0.0f - points[i][1];
    else if ( points[i][1] > 200.0f ) points[i][1] = 400.0f - points[i][1];
    if ( points[i][2] < 0.0f )        points[i][2] = 0.0f - points[i][2];
    else if ( points[i][2] > 200.0f ) points[i][2] = 400.0f - points[i][2];
  }

  p1dir[0] += ((float)fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p1dir[1] += ((float)fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p1dir[2] += ((float)fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p1dir.normalize();
  p2dir[0] += ((float)fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p2dir[1] += ((float)fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p2dir[2] += ((float)fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p2dir.normalize();
  coords->point.finishEditing();
}

void
tickLines3(SoCoordinate3 * coords)
{
  static SbBool initialized = FALSE;
  static SbVec3f p1dir;
  static SbVec3f p2dir;
  int i;

  if ( ! initialized ) {
    initialized = TRUE;
    p1dir.setValue(0, 1, 0);
    p2dir.setValue(0, 1, 0);
  }
  SbVec3f * points = coords->point.startEditing();

  for ( i = 0; i < (LINES * 2); i++ ) {
    if ( (i / 2) == 0 ) {
      if ( (i&1) == 0 ) points[i] += p1dir * 5;
      else              points[i] += p2dir * 5;
    } else {
      SbVec3f gravity = points[i-2] - points[i];
      if ( (i&1) == 0 ) points[i] += (gravity * 0.2f);
      else              points[i] += (gravity * 0.2f);
    }
  }

  if ( points[0][0] < 0.0f || points[0][0] > 300.0f ) p1dir[0] = 0.0f - p1dir[0];
  if ( points[0][1] < 0.0f || points[0][1] > 200.0f ) p1dir[1] = 0.0f - p1dir[1];
  if ( points[0][2] < 0.0f || points[0][2] > 200.0f ) p1dir[2] = 0.0f - p1dir[2];

  if ( points[1][0] < 0.0f || points[1][0] > 300.0f ) p2dir[0] = 0.0f - p2dir[0];
  if ( points[1][1] < 0.0f || points[1][1] > 200.0f ) p2dir[1] = 0.0f - p2dir[1];
  if ( points[1][2] < 0.0f || points[1][2] > 200.0f ) p2dir[2] = 0.0f - p2dir[2];

  for ( i = 0; i < (LINES * 2); i++ ) {
    if ( points[i][0] < 0.0f )        points[i][0] = 0.0f - points[i][0];
    else if ( points[i][0] > 300.0f ) points[i][0] = 600.0f - points[i][0];
    if ( points[i][1] < 0.0f )        points[i][1] = 0.0f - points[i][1];
    else if ( points[i][1] > 200.0f ) points[i][1] = 400.0f - points[i][1];
    if ( points[i][2] < 0.0f )        points[i][2] = 0.0f - points[i][2];
    else if ( points[i][2] > 200.0f ) points[i][2] = 400.0f - points[i][2];
  }

  p1dir[0] += ((float)fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p1dir[1] += ((float)fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p1dir[2] += ((float)fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p1dir.normalize();
  p2dir[0] += ((float)fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p2dir[1] += ((float)fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p2dir[2] += ((float)fmod(float(rand())/200.0f,10.0f)-5.0f) / 50.0f;
  p2dir.normalize();
  coords->point.finishEditing();
}

void
initPoints(SoCoordinate3 * coords)
{
  float floats[POINTS][3]; // = new float [ POINTS ][ 3 ];
  for ( int i = 0; i < POINTS; i++ ) {
    if ( i < POINTS/4 ) {
      floats[i][0] = (float) (rand() % 301);
      floats[i][1] = 0.0f;
      floats[i][2] = (float) (rand() % 201);
    } else if ( i < POINTS/2 ) {
      floats[i][0] = (float) (rand() % 301);
      floats[i][1] = (float) (rand() % 201);
      floats[i][2] = 0.0f;
    } else if ( i < (3*POINTS)/4 ) {
      floats[i][0] = (float) (rand() % 301);
      floats[i][1] = 200.0f;
      floats[i][2] = (float) (rand() % 201);
    } else {
      floats[i][0] = (float) (rand() % 301);
      floats[i][1] = (float) (rand() % 201);
      floats[i][2] = 200.0f;
    }
  }
  coords->point.setValues(0, POINTS, floats);
}

void
tickPoints(SoCoordinate3 * coords)
{
  static float * speed = NULL;
  int i;
  if ( ! speed ) {
    speed = new float [ POINTS ];
    for ( i = 0; i < POINTS; i++ ) {
      speed[i] = 2.0f + (float)fmod(float(rand())/20.0f, 3.0f);
    }
  }
  SbVec3f * points = coords->point.startEditing();
  for ( i = 0; i < POINTS; i++ ) {
    points[i][0] -= speed[i];
    if ( points[i][0] < 0 ) points[i][0] += 300.0f;
  }
  coords->point.finishEditing();
}

/* ********************************************************************** */

void
event_cb(void * closure, SoAction * action)
{
  So@Gui@ExaminerViewer * viewer = (So@Gui@ExaminerViewer *) closure;
  if ( action->isOfType(SoGLRenderAction::getClassTypeId()) ) {
    SoGLRenderAction * raaction = (SoGLRenderAction *) action;
    SoNode * scene = action->getNodeAppliedTo();
    if ( scene ) {
      tickLines1((SoCoordinate3 *) getNodeByName(scene, "redlines"));
      tickLines2((SoCoordinate3 *) getNodeByName(scene, "greenlines"));
      tickLines3((SoCoordinate3 *) getNodeByName(scene, "bluelines"));
      tickPoints((SoCoordinate3 *) getNodeByName(scene, "points"));
    }
  }
}

/* ********************************************************************** */

int
main(
  int argc,
  char ** argv )
{
  setbuf(stderr, NULL);
  setbuf(stdout, NULL);
  @WIDGET@ window = So@Gui@::init(argv[0]);

  srand(SbTime::getTimeOfDay().getMsecValue());

  So@Gui@ExaminerViewer * viewer = new So@Gui@ExaminerViewer(window);
  viewer->setTransparencyType(SoGLRenderAction::DELAYED_BLEND);
  viewer->setDecoration(FALSE);

  SoInput * in = new SoInput;
  size_t len;
  char * buffer = strconcat(scenegraph, len);
  in->setBuffer(buffer, len);
  SoNode * scene;
  if ( ! SoDB::read(in, scene) ) {
    delete [] buffer;
    delete in;
    delete viewer;
    fprintf(stderr, "%s: error in scene - exiting.\n", argv[0]);
    exit(-1);
  }
  delete [] buffer;
  delete in;
  scene->ref();

  // FIXME: for some reason, getNodeByName() doesn't work with SGI
  // Inventor. Investigate.  20010919 mortene.
  SoCallback * hook = (SoCallback *) getNodeByName(scene, "hook");
  if ( ! hook ) {
    fprintf(stderr, "hook not installed.\n");
  } else {
    hook->setCallback(event_cb, viewer);
  }

  initLines((SoCoordinate3 *) getNodeByName(scene, "redlines"));
  initLines((SoCoordinate3 *) getNodeByName(scene, "greenlines"));
  initLines((SoCoordinate3 *) getNodeByName(scene, "bluelines"));
  initPoints((SoCoordinate3 *) getNodeByName(scene, "points"));

  scene->unrefNoDelete();
  viewer->setSceneGraph(scene);
#ifdef HAVE_SOCOMPONENT_SETFULLSCREEN
  viewer->setFullScreen(TRUE); // might be too slow?
#endif // HAVE_SOCOMPONENT_SETFULLSCREEN
  viewer->show();
  viewer->viewAll();
  viewer->setTitle("Styx Demo");
  So@Gui@::show(window);
  So@Gui@::mainLoop();
  delete viewer;
  return 0;
}

/* EOF ****************************************************************** */
