/**************************************************************************\
 * Copyright (c) Kongsberg Oil & Gas Technologies AS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\**************************************************************************/

// Written by Lars J. Aas <larsa@sim.no>

#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>

#include <Inventor/SoDB.h>
#include <Inventor/SoInput.h>
#include <Inventor/errors/SoDebugError.h>
#include <Inventor/nodes/SoCallback.h>
#include <Inventor/nodes/SoPerspectiveCamera.h>
#include <Inventor/nodes/SoSwitch.h>
#include <Inventor/actions/SoSearchAction.h>
#include <Inventor/actions/SoCallbackAction.h>
#include <Inventor/actions/SoHandleEventAction.h>
#include <Inventor/events/SoMouseButtonEvent.h>

#include <stdlib.h>
#include <stdio.h>
#include <assert.h>

#include <strutils.h>

#include <Inventor/nodes/SoGroup.h>
#include <Inventor/fields/SoMFBool.h>
#include <Inventor/nodes/SoSubNode.h>

class Switchboard : public SoGroup {
  typedef SoGroup inherited;
  SO_NODE_HEADER(Switchboard);

public:
  static void initClass(void);
  Switchboard(void);
  Switchboard(int numchildren);

  SoMFBool enable;

  virtual void doAction(SoAction * action);
  virtual void callback(SoCallbackAction * action);
  virtual void GLRender(SoGLRenderAction * action);
  virtual void pick(SoPickAction * action);
  virtual void getBoundingBox(SoGetBoundingBoxAction * action);
  virtual void handleEvent(SoHandleEventAction * action);
  virtual void getMatrix(SoGetMatrixAction * action);
  virtual void search(SoSearchAction * action);

protected:
  virtual ~Switchboard(void);

};

#include <Inventor/fields/SoMFEnum.h>
#include <Inventor/fields/SoMFInt32.h>
#include <Inventor/events/SoKeyboardEvent.h>

class SwitchboardOperator : public Switchboard {
  typedef Switchboard inherited;
  SO_NODE_HEADER(SwitchboardOperator);

public:
  static void initClass(void);
  SwitchboardOperator(void);
  SwitchboardOperator(int numchildren);

  enum Behavior {
    NONE, TOGGLE, HOLD, INVERSE_HOLD, TIME_HOLD
  };

  enum Key {
    ANY = SoKeyboardEvent::ANY,
    UNDEFINED = SoKeyboardEvent::UNDEFINED,
    LEFT_SHIFT = SoKeyboardEvent::LEFT_SHIFT,
    RIGHT_SHIFT = SoKeyboardEvent::RIGHT_SHIFT,
    LEFT_CONTROL = SoKeyboardEvent::LEFT_CONTROL,
    RIGHT_CONTROL = SoKeyboardEvent::RIGHT_CONTROL,
    LEFT_ALT = SoKeyboardEvent::LEFT_ALT,
    RIGHT_ALT = SoKeyboardEvent::RIGHT_ALT,
    CAPS_LOCK = SoKeyboardEvent::CAPS_LOCK,
    A = SoKeyboardEvent::A,
    B = SoKeyboardEvent::B,
    C = SoKeyboardEvent::C,
    D = SoKeyboardEvent::D,
    E = SoKeyboardEvent::E,
    F = SoKeyboardEvent::F,
    G = SoKeyboardEvent::G,
    H = SoKeyboardEvent::H,
    I = SoKeyboardEvent::I,
    J = SoKeyboardEvent::J,
    K = SoKeyboardEvent::K,
    L = SoKeyboardEvent::L,
    M = SoKeyboardEvent::M,
    N = SoKeyboardEvent::N,
    O = SoKeyboardEvent::O,
    P = SoKeyboardEvent::P,
    Q = SoKeyboardEvent::Q,
    R = SoKeyboardEvent::R,
    S = SoKeyboardEvent::S,
    T = SoKeyboardEvent::T,
    U = SoKeyboardEvent::U,
    V = SoKeyboardEvent::V,
    W = SoKeyboardEvent::W,
    X = SoKeyboardEvent::X,
    Y = SoKeyboardEvent::Y,
    Z = SoKeyboardEvent::Z,
    NUMBER_0 = SoKeyboardEvent::NUMBER_0,
    NUMBER_1 = SoKeyboardEvent::NUMBER_1,
    NUMBER_2 = SoKeyboardEvent::NUMBER_2,
    NUMBER_3 = SoKeyboardEvent::NUMBER_3,
    NUMBER_4 = SoKeyboardEvent::NUMBER_4,
    NUMBER_5 = SoKeyboardEvent::NUMBER_5,
    NUMBER_6 = SoKeyboardEvent::NUMBER_6,
    NUMBER_7 = SoKeyboardEvent::NUMBER_7,
    NUMBER_8 = SoKeyboardEvent::NUMBER_8,
    NUMBER_9 = SoKeyboardEvent::NUMBER_9,
    MINUS = SoKeyboardEvent::MINUS,
    EQUAL = SoKeyboardEvent::EQUAL,
    SPACE = SoKeyboardEvent::SPACE,
    BACKSPACE = SoKeyboardEvent::BACKSPACE,
    TAB = SoKeyboardEvent::TAB,
    RETURN = SoKeyboardEvent::RETURN,
    BRACKETLEFT = SoKeyboardEvent::BRACKETLEFT,
    BRACKETRIGHT = SoKeyboardEvent::BRACKETRIGHT,
    SEMICOLON = SoKeyboardEvent::SEMICOLON,
    APOSTROPHE = SoKeyboardEvent::APOSTROPHE,
    COMMA = SoKeyboardEvent::COMMA,
    PERIOD = SoKeyboardEvent::PERIOD,
    SLASH = SoKeyboardEvent::SLASH,
    BACKSLASH = SoKeyboardEvent::BACKSLASH,
    GRAVE = SoKeyboardEvent::GRAVE
  };

  SoMFEnum key;
  SoMFEnum behavior;
  SoMFInt32 msecs;

  virtual void handleEvent(SoHandleEventAction * action);

protected:
  virtual ~SwitchboardOperator(void);

private:
  void constructor(void);

};

// *************************************************************************

static const char * keyboard_iv[] =
{
  "#Inventor V2.1 ascii",
  "# **************************************************************************",
  "# This is a basic keyboard model (ab)using the SwitchboardOperator node",
  "# I've just writtenn.",
  "#",
  "#   Lars J",
  "",
  "Group {",
  " Separator {",
  "  DirectionalLight {",
  "    direction -1 -1 0.5",
  "  }",
  "  DEF camera PerspectiveCamera {",
  "    position 37.6813 -29.2411 26.4421",
  "    orientation 0.352193 0.189524 0.126368 0.907784",
  "  }",
  "  DEF callback Callback {}",
  "  SwitchboardOperator {",
  "    enable [ FALSE ]",
  "    key [ SPACE ]",
  "    behavior [ HOLD ]",
  "    RotationXYZ {",
  "      axis X",
  "      angle 0.005",
  "    }",
  "  }",
  "  SwitchboardOperator {",
  "    enable [ FALSE ]",
  "    key [ RETURN ]",
  "    behavior [ HOLD ]",
  "    RotationXYZ {",
  "      axis Y",
  "      angle 0.002",
  "    }",
  "  }",
  "  Separator {",
  "    Material { diffuseColor 0.6 0.6 0.6 }",
  "    Translation { translation 17.5 -5 -1 }",
  "    Scale { scaleFactor 20 8 1 }",
  "    Cube {}",
  "  }",
  "  Separator {",
  "    Group {",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ GRAVE UNDEFINED GRAVE ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # GRAVE",
  "          DEF NumericLabelTransform Group {",
  "            Translation { translation -0.7 -0.7 1 }",
  "            Scale { scaleFactor 0.1 0.1 0.1 }",
  "            BaseColor { rgb 0 0 0 }",
  "            PolygonOffset {",
  "              factor -1",
  "              on TRUE",
  "            }",
  "          }",
  "          AsciiText { string \"`\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ NUMBER_1 UNDEFINED NUMBER_1 ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # 1",
  "          USE NumericLabelTransform",
  "          AsciiText { string \"1\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ NUMBER_2 UNDEFINED NUMBER_2 ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # 2",
  "          USE NumericLabelTransform",
  "          AsciiText { string \"2\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ NUMBER_3 UNDEFINED NUMBER_3 ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # 3",
  "          USE NumericLabelTransform",
  "          AsciiText { string \"3\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ NUMBER_4 UNDEFINED NUMBER_4 ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # 4",
  "          USE NumericLabelTransform",
  "          AsciiText { string \"4\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ NUMBER_5 UNDEFINED NUMBER_5 ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # 5",
  "          USE NumericLabelTransform",
  "          AsciiText { string \"5\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ NUMBER_6 UNDEFINED NUMBER_6 ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # 6",
  "          USE NumericLabelTransform",
  "          AsciiText { string \"6\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ NUMBER_7 UNDEFINED NUMBER_7 ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # 7",
  "          USE NumericLabelTransform",
  "          AsciiText { string \"7\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ NUMBER_8 UNDEFINED NUMBER_8 ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # 8",
  "          USE NumericLabelTransform",
  "          AsciiText { string \"8\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ NUMBER_9 UNDEFINED NUMBER_9 ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # 9",
  "          USE NumericLabelTransform",
  "          AsciiText { string \"9\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ NUMBER_0 UNDEFINED NUMBER_0 ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # 0",
  "          USE NumericLabelTransform",
  "          AsciiText { string \"0\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ MINUS UNDEFINED MINUS ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # -",
  "          USE NumericLabelTransform",
  "          AsciiText { string \"-\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ EQUAL UNDEFINED EQUAL ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # =",
  "          USE NumericLabelTransform",
  "          AsciiText { string \"=\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 3.5 0 0 }",
  "      Scale { scaleFactor 2 1 1 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ BACKSPACE UNDEFINED BACKSPACE ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # BACKSPACE",
  "          USE NumericLabelTransform",
  "          AsciiText { string \"<-\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "    }",
  "  }",
  "  Translation { translation 0 -2.5 0 }",
  "  Separator {",
  "    Group {",
  "      Translation { translation 0.5 0 0 }",
  "      Scale { scaleFactor 1.5 1 1 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ TAB UNDEFINED TAB ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # TAB",
  "          DEF LabelTransform Group {",
  "            Translation { translation -0.7 -0.1 1 }",
  "            Scale { scaleFactor 0.1 0.1 0.1 }",
  "            BaseColor { rgb 0 0 0 }",
  "            PolygonOffset {",
  "              factor -1",
  "              on TRUE",
  "            }",
  "          }",
  "          AsciiText { string \"->|\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Scale { scaleFactor 0.66 1 1 }",
  "      Translation { translation 3.0 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ Q UNDEFINED Q ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # Q",
  "          USE LabelTransform",
  "          AsciiText { string \"Q\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ W UNDEFINED W ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # W",
  "          USE LabelTransform",
  "          AsciiText { string \"W\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ E UNDEFINED E ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # E",
  "          USE LabelTransform",
  "          AsciiText { string \"E\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ R UNDEFINED R ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # R",
  "          USE LabelTransform",
  "          AsciiText { string \"R\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ T UNDEFINED T ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # T",
  "          USE LabelTransform",
  "          AsciiText { string \"T\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ Y UNDEFINED Y ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # Y",
  "          USE LabelTransform",
  "          AsciiText { string \"Y\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ U UNDEFINED U ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # U",
  "          USE LabelTransform",
  "          AsciiText { string \"U\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ I UNDEFINED I ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # I",
  "          USE LabelTransform",
  "          AsciiText { string \"I\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ O UNDEFINED O ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # O",
  "          USE LabelTransform",
  "          AsciiText { string \"O\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ P UNDEFINED P ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # P",
  "          USE LabelTransform",
  "          AsciiText { string \"P\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ BRACKETLEFT UNDEFINED BRACKETLEFT ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # BRACKETLEFT",
  "          USE NumericLabelTransform",
  "          AsciiText { string \"[\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ BRACKETRIGHT UNDEFINED BRACKETRIGHT ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # BRACKETRIGHT",
  "          USE NumericLabelTransform",
  "          AsciiText { string \"]\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 3.12 0 0 }",
  "      Scale { scaleFactor 1.66 1 1 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ RETURN UNDEFINED RETURN ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Cube {} # RETURN",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "    }",
  "  }",
  "  Translation { translation 0 -2.5 0 }",
  "  Separator {",
  "    Group {",
  "      Translation { translation 1 0 0 }",
  "      Scale { scaleFactor 2 1 1 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ CAPS_LOCK UNDEFINED CAPS_LOCK ]",
  "        behavior [ HOLD NONE HOLD ] # TOGGLE?",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # CAPS_LOCK",
  "          USE LabelTransform",
  "          AsciiText { string \"\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Scale { scaleFactor 0.5 1 1 }",
  "      Translation { translation 3.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ A UNDEFINED A ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # A",
  "          USE LabelTransform",
  "          AsciiText { string \"A\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ S UNDEFINED S ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # S",
  "          USE LabelTransform",
  "          AsciiText { string \"S\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ D UNDEFINED D ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # D",
  "          USE LabelTransform",
  "          AsciiText { string \"D\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ F UNDEFINED F ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # F",
  "          USE LabelTransform",
  "          AsciiText { string \"F\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ G UNDEFINED G ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # G",
  "          USE LabelTransform",
  "          AsciiText { string \"G\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ H UNDEFINED H ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # H",
  "          USE LabelTransform",
  "          AsciiText { string \"H\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ J UNDEFINED J ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # J",
  "          USE LabelTransform",
  "          AsciiText { string \"J\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ K UNDEFINED K ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # K",
  "          USE LabelTransform",
  "          AsciiText { string \"K\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ L UNDEFINED L ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # L",
  "          USE LabelTransform",
  "          AsciiText { string \"L\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ SEMICOLON UNDEFINED SEMICOLON ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # SEMICOLON",
  "          USE NumericLabelTransform",
  "          AsciiText { string \";\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ APOSTROPHE UNDEFINED APOSTROPHE ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # APOSTROPHE",
  "          USE NumericLabelTransform",
  "          AsciiText { string \"'\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ BACKSLASH UNDEFINED BACKSLASH ]",
  "        behavior [ TOGGLE NONE TOGGLE ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # BACKSLASH",
  "          Translation { translation 0.5 0 0 }",
  "          USE NumericLabelTransform",
  "          Scale { scaleFactor -1 1 1 }",
  "          AsciiText { string \"/\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0.5 0 }",
  "      Scale { scaleFactor 0.96 1.5 1 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ RETURN UNDEFINED RETURN ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # RETURN",
  "          USE LabelTransform",
  "          AsciiText { string \"<-\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "    }",
  "  }",
  "  Translation { translation 0 -2.5 0 }",
  "  Separator {",
  "    Group {",
  "      Translation { translation 1.5 0 0 }",
  "      Scale { scaleFactor 2.5 1 1 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ LEFT_SHIFT UNDEFINED LEFT_SHIFT ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Cube {} # LEFT_SHIFT",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Scale { scaleFactor 0.4 1 1 }",
  "      Translation { translation 4 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ Z UNDEFINED Z ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # Z",
  "          USE LabelTransform",
  "          AsciiText { string \"Z\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ X UNDEFINED X ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # X",
  "          USE LabelTransform",
  "          AsciiText { string \"X\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ C UNDEFINED C ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # C",
  "          USE LabelTransform",
  "          AsciiText { string \"C\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ V UNDEFINED V ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # V",
  "          USE LabelTransform",
  "          AsciiText { string \"V\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ B UNDEFINED B ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # B",
  "          USE LabelTransform",
  "          AsciiText { string \"B\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ N UNDEFINED N ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # N",
  "          USE LabelTransform",
  "          AsciiText { string \"N\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ M UNDEFINED M ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # M",
  "          USE LabelTransform",
  "          AsciiText { string \"M\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ COMMA UNDEFINED COMMA ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # COMMA",
  "          USE NumericLabelTransform",
  "          AsciiText { string \",\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ PERIOD UNDEFINED PERIOD ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # PERIOD",
  "          USE NumericLabelTransform",
  "          AsciiText { string \".\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 2.5 0 0 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ SLASH UNDEFINED SLASH ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Separator {",
  "          Cube {} # SLASH",
  "          USE NumericLabelTransform",
  "          AsciiText { string \"/\" }",
  "        }",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "      Translation { translation 4.5 0 0 }",
  "      Scale { scaleFactor 3 1 1 }",
  "      SwitchboardOperator {",
  "        enable [ FALSE TRUE FALSE ]",
  "        key [ LEFT_SHIFT UNDEFINED LEFT_SHIFT ]",
  "        behavior [ HOLD NONE HOLD ]",
  "        Translation { translation 0 0 -0.5 }",
  "        Cube {} # RIGHT_SHIFT",
  "        Translation { translation 0 0 0.5 }",
  "      }",
  "    }",
  "  }",
  "  Translation { translation 0 -2.5 0 }",
  "  Separator {",
  "    Group {",
  "      Separator {",
  "        Translation { translation 1 0 0 }",
  "        Scale { scaleFactor 2 1 1 }",
  "        SwitchboardOperator {",
  "          enable [ FALSE ]",
  "          key [ LEFT_CONTROL ]",
  "          behavior [ HOLD ]",
  "          Translation { translation 0 0 -0.5 }",
  "        }",
  "        Cube {} # CONTROL",
  "      }",
  "      Separator {",
  "        Translation { translation 6.75 0 0 }",
  "        Scale { scaleFactor 2 1 1 }",
  "        SwitchboardOperator {",
  "          enable [ FALSE ]",
  "          key [ LEFT_ALT ]",
  "          behavior [ HOLD ]",
  "          Translation { translation 0 0 -0.5 }",
  "        }",
  "        Cube {} # ALT",
  "      }",
  "      Separator {",
  "        Translation { translation 17.25 0 0 }",
  "        Scale { scaleFactor 8 1 1 }",
  "        SwitchboardOperator {",
  "          enable [ FALSE ]",
  "          key [ SPACE ]",
  "          behavior [ HOLD ]",
  "          Translation { translation 0 0 -0.5 }",
  "        }",
  "        Cube {} # SPACE",
  "      }",
  "      Separator {",
  "        Translation { translation 27.75 0 0 }",
  "        Scale { scaleFactor 2 1 1 }",
  "        SwitchboardOperator {",
  "          enable [ FALSE ]",
  "          key [ LEFT_ALT ]",
  "          behavior [ HOLD ]",
  "          Translation { translation 0 0 -0.5 }",
  "        }",
  "        Cube {} # alt",
  "      }",
  "      Separator {",
  "        Translation { translation 33.5 0 0 }",
  "        Scale { scaleFactor 2 1 1 }",
  "        SwitchboardOperator {",
  "          enable [ FALSE ]",
  "          key [ LEFT_CONTROL ]",
  "          behavior [ HOLD ]",
  "          Translation { translation 0 0 -0.5 }",
  "        }",
  "        Cube {} # ctrl",
  "      }",
  "    }",
  "  }",
  " }",
  " Separator {",
  "  DirectionalLight { direction 0.5 0.5 1 }",
  "  OrthographicCamera {}",
  "  Separator {",
  "    BaseColor { rgb 1 1 0 }",
  "    Translation { translation -1.2 -0.5 0 }",
  "    Scale { scaleFactor 0.006 0.006 0.006 }",
  "    AsciiText {",
  "      string [",
  "        \"granted, it is wobbly\"",
  "        \"the keys are worn and sticky\"",
  "        \"but for a mere bubbly\"",
  "        \"you really can't be picky\"",
  "        \"\"",
  "        \"[ESC, then 'Q' to quit]\"",
  "      ]",
  "    }",
  "  }",
  "  DEF message Switch {",
  "    whichChild -1",
  "    Separator {",
  "      BaseColor { rgb 0.6 0 0 }",
  "      Translation { translation -0.3 -0.7 0 }",
  "      Scale { scaleFactor 0.005 0.005 0.005 }",
  "      AsciiText {",
  "        string [",
  "          \"[it's a KEY board]\"",
  "        ]",
  "      }",
  "    }",
  "  }",
  " }",
  "}",
  NULL
};

// *************************************************************************

#include <Inventor/nodes/SoSubNode.h>
#include <Inventor/misc/SoChildList.h>

#include <Inventor/actions/SoGetBoundingBoxAction.h>
#include <Inventor/actions/SoSearchAction.h>
#include <Inventor/actions/SoGetMatrixAction.h>
#include <Inventor/actions/SoGLRenderAction.h>
#include <Inventor/actions/SoPickAction.h>
#include <Inventor/actions/SoHandleEventAction.h>
#include <Inventor/actions/SoCallbackAction.h>
#include <Inventor/actions/SoGetPrimitiveCountAction.h>
#include <Inventor/actions/SoWriteAction.h>
#include <Inventor/SoOutput.h>

#include <Inventor/errors/SoDebugError.h>

void
Switchboard::initClass(void)
{
  SO_NODE_INIT_CLASS(Switchboard, SoGroup, SoGroup);
}

SO_NODE_SOURCE(Switchboard);

Switchboard::Switchboard(void)
{
  SO_NODE_CONSTRUCTOR(Switchboard);

  SO_NODE_ADD_FIELD(enable, (FALSE));
}

Switchboard::Switchboard(int numchildren)
  : inherited(numchildren)
{
  SO_NODE_CONSTRUCTOR(Switchboard);

  SO_NODE_ADD_FIELD(enable, (FALSE));
}

Switchboard::~Switchboard(void) // virtual, protected
{
}

void
Switchboard::doAction(SoAction * action)
{
  // FIXME: take PathCode and stuff into consideration...
  if (action->isOfType(SoGetBoundingBoxAction::getClassTypeId())) {
    // calculate center of bbox if bboxaction. This makes the
    // switchboard node behave exactly like a group node
    SoGetBoundingBoxAction * bbaction = (SoGetBoundingBoxAction*) action;
    // Initialize accumulation variables.
    SbVec3f acccenter(0.0f, 0.0f, 0.0f);
    int numcenters = 0;
    for (int idx = 0; idx < this->enable.getNum(); idx++) {
      const int numchildren = this->children->getLength();
      if ( numchildren > 0 )
        action->traverse((*this->children)[idx % numchildren]);
      // If center point is set, accumulate.
      if (bbaction->isCenterSet()) {
        acccenter += bbaction->getCenter();
        numcenters++;
        bbaction->resetCenter();
      }
    }
    if (numcenters != 0) {
      bbaction->setCenter(acccenter / float(numcenters), FALSE);
    }
  } else { // not a GetBoundingBoxAction
    for ( int idx = 0; idx < this->enable.getNum(); idx++ ) {
      if ( this->enable[idx] ) {
        const int numchildren = this->children->getLength();
        if ( numchildren > 0 )
          action->traverse((*this->children)[idx % numchildren]);
      }
    }
  }
}

void
Switchboard::GLRender(SoGLRenderAction * action)
{
  Switchboard::doAction((SoAction *) action);
}

void
Switchboard::getBoundingBox(SoGetBoundingBoxAction * action)
{
  Switchboard::doAction((SoAction *) action);
}

void
Switchboard::getMatrix(SoGetMatrixAction * action)
{
  switch (action->getCurPathCode()) {
  case SoAction::OFF_PATH:
  case SoAction::IN_PATH:
    Switchboard::doAction((SoAction *) action);
    break;
  default:
    break;
  }
}

void
Switchboard::callback(SoCallbackAction *action)
{
  Switchboard::doAction(action);
}

// Documented in superclass.
void
Switchboard::pick(SoPickAction *action)
{
  Switchboard::doAction((SoAction*)action);
}

// Documented in superclass.
void
Switchboard::handleEvent(SoHandleEventAction *action)
{
  Switchboard::doAction(action);
}

void
Switchboard::search(SoSearchAction * action)
{
  SoNode::search(action);
  if (action->isFound()) return;
  Switchboard::doAction(action);
}

// *************************************************************************

#include <Inventor/nodes/SoSubNode.h>

#include <Inventor/actions/SoHandleEventAction.h>
#include <Inventor/events/SoKeyboardEvent.h>

#include <Inventor/errors/SoDebugError.h>

SO_NODE_SOURCE(SwitchboardOperator);

void
SwitchboardOperator::initClass(void)
{
  SO_NODE_INIT_CLASS(SwitchboardOperator, Switchboard, Switchboard);
}

SwitchboardOperator::SwitchboardOperator(void)
{
  this->constructor();
}

SwitchboardOperator::SwitchboardOperator(int numchildren)
: inherited(numchildren)
{
  this->constructor();
}

void
SwitchboardOperator::constructor(void) // private
{
  SO_NODE_CONSTRUCTOR(SwitchboardOperator);

  SO_NODE_ADD_FIELD(key, (UNDEFINED));
  SO_NODE_ADD_FIELD(behavior, (TOGGLE));
  SO_NODE_ADD_FIELD(msecs, (0));

  // FIXME: complete this list
  SO_NODE_DEFINE_ENUM_VALUE(Key, LEFT_SHIFT);
  SO_NODE_DEFINE_ENUM_VALUE(Key, RIGHT_SHIFT);
  SO_NODE_DEFINE_ENUM_VALUE(Key, LEFT_CONTROL);
  SO_NODE_DEFINE_ENUM_VALUE(Key, RIGHT_CONTROL);
  SO_NODE_DEFINE_ENUM_VALUE(Key, LEFT_ALT);
  SO_NODE_DEFINE_ENUM_VALUE(Key, RIGHT_ALT);
  SO_NODE_DEFINE_ENUM_VALUE(Key, CAPS_LOCK);

  SO_NODE_DEFINE_ENUM_VALUE(Key, ANY);
  SO_NODE_DEFINE_ENUM_VALUE(Key, UNDEFINED);
  SO_NODE_DEFINE_ENUM_VALUE(Key, A);
  SO_NODE_DEFINE_ENUM_VALUE(Key, B);
  SO_NODE_DEFINE_ENUM_VALUE(Key, C);
  SO_NODE_DEFINE_ENUM_VALUE(Key, D);
  SO_NODE_DEFINE_ENUM_VALUE(Key, E);
  SO_NODE_DEFINE_ENUM_VALUE(Key, F);
  SO_NODE_DEFINE_ENUM_VALUE(Key, G);
  SO_NODE_DEFINE_ENUM_VALUE(Key, H);
  SO_NODE_DEFINE_ENUM_VALUE(Key, I);
  SO_NODE_DEFINE_ENUM_VALUE(Key, J);
  SO_NODE_DEFINE_ENUM_VALUE(Key, K);
  SO_NODE_DEFINE_ENUM_VALUE(Key, L);
  SO_NODE_DEFINE_ENUM_VALUE(Key, M);
  SO_NODE_DEFINE_ENUM_VALUE(Key, N);
  SO_NODE_DEFINE_ENUM_VALUE(Key, O);
  SO_NODE_DEFINE_ENUM_VALUE(Key, P);
  SO_NODE_DEFINE_ENUM_VALUE(Key, Q);
  SO_NODE_DEFINE_ENUM_VALUE(Key, R);
  SO_NODE_DEFINE_ENUM_VALUE(Key, S);
  SO_NODE_DEFINE_ENUM_VALUE(Key, T);
  SO_NODE_DEFINE_ENUM_VALUE(Key, U);
  SO_NODE_DEFINE_ENUM_VALUE(Key, V);
  SO_NODE_DEFINE_ENUM_VALUE(Key, W);
  SO_NODE_DEFINE_ENUM_VALUE(Key, X);
  SO_NODE_DEFINE_ENUM_VALUE(Key, Y);
  SO_NODE_DEFINE_ENUM_VALUE(Key, Z);

  SO_NODE_DEFINE_ENUM_VALUE(Key, NUMBER_0);
  SO_NODE_DEFINE_ENUM_VALUE(Key, NUMBER_1);
  SO_NODE_DEFINE_ENUM_VALUE(Key, NUMBER_2);
  SO_NODE_DEFINE_ENUM_VALUE(Key, NUMBER_3);
  SO_NODE_DEFINE_ENUM_VALUE(Key, NUMBER_4);
  SO_NODE_DEFINE_ENUM_VALUE(Key, NUMBER_5);
  SO_NODE_DEFINE_ENUM_VALUE(Key, NUMBER_6);
  SO_NODE_DEFINE_ENUM_VALUE(Key, NUMBER_7);
  SO_NODE_DEFINE_ENUM_VALUE(Key, NUMBER_8);
  SO_NODE_DEFINE_ENUM_VALUE(Key, NUMBER_9);
  SO_NODE_DEFINE_ENUM_VALUE(Key, MINUS);
  SO_NODE_DEFINE_ENUM_VALUE(Key, EQUAL);

  SO_NODE_DEFINE_ENUM_VALUE(Key, SPACE);
  SO_NODE_DEFINE_ENUM_VALUE(Key, BACKSPACE);
  SO_NODE_DEFINE_ENUM_VALUE(Key, TAB);
  SO_NODE_DEFINE_ENUM_VALUE(Key, RETURN);
  SO_NODE_DEFINE_ENUM_VALUE(Key, BRACKETLEFT);
  SO_NODE_DEFINE_ENUM_VALUE(Key, BRACKETRIGHT);
  SO_NODE_DEFINE_ENUM_VALUE(Key, SEMICOLON);
  SO_NODE_DEFINE_ENUM_VALUE(Key, APOSTROPHE);
  SO_NODE_DEFINE_ENUM_VALUE(Key, COMMA);
  SO_NODE_DEFINE_ENUM_VALUE(Key, PERIOD);
  SO_NODE_DEFINE_ENUM_VALUE(Key, SLASH);
  SO_NODE_DEFINE_ENUM_VALUE(Key, BACKSLASH);
  SO_NODE_DEFINE_ENUM_VALUE(Key, GRAVE);

  SO_NODE_DEFINE_ENUM_VALUE(Behavior, NONE);
  SO_NODE_DEFINE_ENUM_VALUE(Behavior, TOGGLE);
  SO_NODE_DEFINE_ENUM_VALUE(Behavior, HOLD);
  SO_NODE_DEFINE_ENUM_VALUE(Behavior, INVERSE_HOLD);
  SO_NODE_DEFINE_ENUM_VALUE(Behavior, TIME_HOLD);

  SO_NODE_SET_SF_ENUM_TYPE(key, Key);
  SO_NODE_SET_SF_ENUM_TYPE(behavior, Behavior);
}

SwitchboardOperator::~SwitchboardOperator(void) // virtual, protected
{
}

void
SwitchboardOperator::handleEvent(SoHandleEventAction * action)
{
  const SoEvent * ev = action->getEvent();
  if ( ev->isOfType(SoKeyboardEvent::getClassTypeId()) ) {
    const SoKeyboardEvent * event = (const SoKeyboardEvent *) ev;
    SoKeyboardEvent::Key key = event->getKey();
    for ( int idx = 0; idx < this->key.getNum(); idx++ ) {
      if ( this->key[idx] == key ) {
        switch ( idx < this->behavior.getNum() ? this->behavior[idx] : TOGGLE ) {
        case TOGGLE:
          if ( event->getState() == SoKeyboardEvent::DOWN ) {
            if ( idx >= this->enable.getNum() ) this->enable.setNum(idx+1);
            this->enable.set1Value(idx, this->enable[idx] ? FALSE : TRUE);
          }
          break;
        case HOLD:
          if ( idx >= this->enable.getNum() ) this->enable.setNum(idx+1);
          this->enable.set1Value(idx, event->getState() == SoKeyboardEvent::DOWN ? TRUE : FALSE);
          break;
        case INVERSE_HOLD:
          if ( idx >= this->enable.getNum() ) this->enable.setNum(idx+1);
          this->enable.set1Value(idx, event->getState() == SoKeyboardEvent::DOWN ? FALSE : TRUE);
          break;
        case TIME_HOLD:
          SoDebugError::postInfo("SwitchboardOperator::handleEvent", "not implemented yet");
          break;
        default:
          break;
        }
      }
    }
  }
}

// *************************************************************************

SoNode *
find(SoNode * root, const char * name)
{
  SoSearchAction searcher;
  searcher.setName(SbName(name));
  searcher.setInterest(SoSearchAction::FIRST);
  searcher.apply(root);
  if ( !searcher.getPath() ) return NULL;
  return searcher.getPath()->getTail();
} // find()

static SoSwitch * message = NULL;

void
callback(void * closure, SoAction * action)
{
  if ( action->isOfType(SoHandleEventAction::getClassTypeId()) ) {
    SoHandleEventAction * heaction = (SoHandleEventAction *) action;
    const SoEvent * ev = heaction->getEvent();
    if ( ev->isOfType(SoMouseButtonEvent::getClassTypeId()) ) {
      SoMouseButtonEvent * event = (SoMouseButtonEvent *) ev;
      if ( event->getState() == SoButtonEvent::DOWN ) {
        message->whichChild.setValue(0);
      } else {
        message->whichChild.setValue(-1);
      }
    }
  }
#if 0
  SoPerspectiveCamera * camera = (SoPerspectiveCamera *) find((SoNode *) closure, "camera");
  assert(camera != NULL && camera->isOfType(SoPerspectiveCamera::getClassTypeId()));
  SoDebugError::postInfo("callback", "dumping camera parameters");
  SbVec3f position = camera->position.getValue();
  SbRotation orientation = camera->orientation.getValue();
  float x, y, z, w;
  orientation.getValue(x, y, z, w);
  fprintf(stdout, "position %g %g %g\n", position[0], position[1], position[2]);
  fprintf(stdout, "orientation %g %g %g %g\n", x, y, z, w);
#endif
} // callback()

int
main(
  int argc,
  char ** argv )
{
  @WIDGET@ window = So@Gui@::init( argv[0] );
  Switchboard::initClass();
  SwitchboardOperator::initClass();
  So@Gui@ExaminerViewer * viewer = new So@Gui@ExaminerViewer( window );
  viewer->setDecoration(FALSE);
  viewer->setViewing(FALSE);
  viewer->show();
  So@Gui@::show(window);

  unsigned int totlen;
  char * buf = strconcat(keyboard_iv, totlen);
  SoInput in;
  in.setBuffer(buf, totlen);
  SoNode * root = NULL;
  if ( !SoDB::read(&in, root) ) {
    SoDebugError::postInfo("main", "error reading file");
    exit(-1);
  }
  delete [] buf;
  root->ref();
  SoCallback * cb = (SoCallback *) find(root, "callback");
  assert(cb != NULL);
  cb->setCallback(callback, root);
  message = (SoSwitch *) find(root, "message");
  assert(message != NULL);
  viewer->setSceneGraph(root);
  root->unref();

  So@Gui@::show(window);
  viewer->setFullScreen(TRUE);

  viewer->setTitle("Type-O-Matic");
  So@Gui@::mainLoop();
  delete viewer;
  return 0;
} // main()

// *************************************************************************
