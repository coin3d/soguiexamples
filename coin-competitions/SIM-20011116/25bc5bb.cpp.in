/**************************************************************************\
 * Copyright (c) Kongsberg Oil & Gas Technologies AS
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\**************************************************************************/


/* ********************************************************************** *
 * 25bc5bb
 *
 * Author: Thomas Hammer <thammer@sim.no>
 * ********************************************************************** */

#if HAVE_CONFIG_H
#include <config.h>
#endif // HAVE_CONFIG_H

#include <cmath>
#include <cstdlib>
#include <ctime>

#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>

#include <Inventor/SoDB.h>
#include <Inventor/SoInput.h>
#include <Inventor/SbLinear.h>
#include <Inventor/nodes/SoScale.h>
#include <Inventor/nodes/SoDrawStyle.h>
#include <Inventor/nodes/SoMaterial.h>
#include <Inventor/nodes/SoBaseColor.h>
#include <Inventor/nodes/SoCone.h>
#include <Inventor/nodes/SoCube.h>
#include <Inventor/nodes/SoCylinder.h>
#include <Inventor/nodes/SoShapeHints.h>
#include <Inventor/nodes/SoSphere.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoText3.h>
#include <Inventor/nodes/SoDirectionalLight.h>
#include <Inventor/nodes/SoPerspectiveCamera.h>
#include <Inventor/nodes/SoTransform.h>
#include <Inventor/nodes/SoRotation.h>
#include <Inventor/nodes/SoFont.h>
#include <Inventor/@Gui@/viewers/So@Gui@Viewer.h>
#include <Inventor/sensors/SoTimerSensor.h>

#include <Inventor/fields/SoMFString.h>
#include <Inventor/sensors/SoFieldSensor.h>
#include <Inventor/errors/SoDebugError.h>

#include <Inventor/nodes/SoShape.h>
#include <Inventor/elements/SoCoordinateElement.h>
#include <Inventor/elements/SoModelMatrixElement.h>

#include <Inventor/actions/SoGLRenderAction.h>
#include <Inventor/actions/SoWriteAction.h>

#include "coinlogo.h"

#ifndef M_PI
#define M_PI 3.141592653579f
#endif // ! M_PI

struct particleinfo
{
  float x;
  float y;
  float z;
  float sx;
  float sy;
  float sz;
  float ax;
  float ay;
  float az;
  float rotx;
  float srotx;
  float m;
  float delay;
  SoSeparator *p;
  SoRotation *rot;
  SoTransform *xf;
  particleinfo()
  {
    x=y=z=sx=sy=sz=ax=ay=az=m=delay=rotx=srotx=0.0f;
    p=NULL; xf=NULL;
  };
};

int num_particles = 30;
particleinfo *particles;

SoSeparator * root;
SoPerspectiveCamera * camera;

SoShapeHints * hints;

SoMaterial *cubematerial;


SbTime lasttime;
SbTime starttime;

float speedjitter = 0.5f;

double flexrand(double lower, double upper)
{
  return lower + ((double)rand()/(double)RAND_MAX)*(upper-lower);
};

static void timerSensorCallback(void *data, SoSensor *)
{
  int i;
  SbTime now = SbTime::getTimeOfDay();
  SbTime timediff = now-lasttime;
  lasttime = now;
  double diff = timediff.getValue(); // time in seconds
  SbTime stimediff = now-starttime;
  double sdiff = stimediff.getValue();
  int leader = 0;

  double avgx=0;
  double avgy=0;
  double avgz=0;

  for (i=0; i<num_particles; i++)
  {
    if (sdiff-particles[i].delay<0)
      continue;
    particles[i].x+=(float)diff*particles[i].sx;
    particles[i].y+=(float)diff*particles[i].sy;
    particles[i].z+=(float)diff*particles[i].sz;

    particles[i].sx+=(float)diff*particles[i].ax;
    particles[i].sy+=(float)diff*particles[i].ay;
    particles[i].sz+=(float)diff*particles[i].az;

    particles[i].rotx+=(float)diff*particles[i].srotx;

    float bound = 7.0f;
    float absorb = 1.0f;

    if (particles[i].y<-bound)
    {
      particles[i].sy=1.0f*fabs(particles[i].sy)*absorb;
      particles[i].sx += speedjitter*(rand()%100)/100.0f;
      particles[i].sy += speedjitter*(rand()%100)/100.0f;
    }

    if (particles[i].y>bound)
      particles[i].sy=-1.0f*fabs(particles[i].sy)*absorb;

    if (particles[i].x<-bound)
      particles[i].sx=1.0f*fabs(particles[i].sx)*absorb;

    if (particles[i].x>bound)
      particles[i].sx=-1.0f*fabs(particles[i].sx)*absorb;

    if (particles[i].z<-bound)
      particles[i].sz=1.0f*fabs(particles[i].sz)*absorb;

    if (particles[i].z>bound)
      particles[i].sz=-1.0f*fabs(particles[i].sz)*absorb;


    float sbound = 50;

    if (particles[i].sx>sbound)
      particles[i].sx = sbound;
    if (particles[i].sx<-sbound)
      particles[i].sx = -sbound;

    if (particles[i].sy>sbound)
      particles[i].sy = sbound;
    if (particles[i].sy<-sbound)
      particles[i].sy = -sbound;

    if (particles[i].sz>sbound)
      particles[i].sz = sbound;
    if (particles[i].sz<-sbound)
      particles[i].sz = -sbound;

    avgx += particles[i].x;
    avgy += particles[i].y;
    avgz += particles[i].z;

    particles[i].xf->translation.setValue(particles[i].x, particles[i].y, particles[i].z);

    // spin
    particles[i].rot->rotation.setValue(SbVec3f(0.0f, 1.0f, 0.0f), particles[i].rotx);
  }
  avgx /= num_particles;
  avgy /= num_particles;
  avgz /= num_particles;

  float x,y,z;
  SbVec3f cpos;
  cpos = camera->position.getValue();
  cpos.getValue(x, y, z);
  x = 20.0f*(float)sin(now.getValue()*2*float(M_PI)*0.065f);
  y = 5.0f+3.0f*(float)cos(now.getValue()*2*float(M_PI)*0.125f);
  z = 20.0f*(float)cos(now.getValue()*2*float(M_PI)*0.065f);
  camera->position.setValue(x,y,z);
  camera->pointAt(SbVec3f(float(avgx), float(avgy), float(avgz)));
}


int
main(
  int argc,
  char ** argv )
{

  @WIDGET@ window = So@Gui@::init( argv[0] );

  root = new SoSeparator;
  root->addChild( camera = new SoPerspectiveCamera );
  root->addChild( new SoDirectionalLight );

  hints = new SoShapeHints;
  hints->vertexOrdering = SoShapeHints::COUNTERCLOCKWISE;
  hints->shapeType = SoShapeHints::SOLID;
  hints->creaseAngle = 0.91f;
  root->addChild( hints );

  particles = new particleinfo[num_particles];

	SoSphere *ball;
  SoSeparator *sep = new SoSeparator;

  int i;
  srand( (unsigned)time( NULL ) );
  int line=0;
  int spos=0;

  for (i=0; i<num_particles; i++)
  {
    particles[i].x=(float)flexrand(-5.0, 5.0);
    particles[i].y=(float)flexrand(-3.0, 3.0);
    particles[i].z=(float)flexrand(-3.0, 3.0);

    particles[i].sx=(float)flexrand(-1.0, 1.0);
    particles[i].sy=(float)flexrand(-3.0, 3.0);
    particles[i].sz=(float)flexrand(-3.0, 3.0);

    particles[i].srotx=(float)flexrand(0.5, 5.0);

    particles[i].ax=0.0f;
    particles[i].ay=-9.8f;
    particles[i].az=0.0f;

    root->addChild(particles[i].p = new SoSeparator);
    particles[i].p->addChild(particles[i].xf = new SoTransform);
    particles[i].xf->translation.setValue(particles[i].x, particles[i].y, particles[i].z);
    particles[i].p->addChild(particles[i].rot = new SoRotation);

    if (i%6==0)
    {
      SoDrawStyle *style;
      particles[i].p->addChild(style = new SoDrawStyle);
      style->style = SoDrawStyle::LINES;
      particles[i].p->addChild(ball = new SoSphere);
      ball->radius = 0.3f;

      particles[i].sx=(float)flexrand(3.0, 5.0);
      particles[i].sz=(float)flexrand(3.0, 5.0);
    }
    else
    {

      SoMaterial *mat = new SoMaterial;
      mat->specularColor.setValue( 0.0f, 0.0f, 0.2f );
      mat->emissiveColor.setValue( 0.4f, 0.0f, 0.0f );
      mat->diffuseColor.setValue( (float)flexrand(0.0, 0.8), (float)flexrand(0.1, 0.8), (float)flexrand(0.0, 0.8));
      mat->ambientColor.setValue( 0.0f, 0.0f, 1.0f );
      mat->shininess = 0.8f;
      particles[i].p->addChild(mat);
      SoScale *scale;
      particles[i].p->addChild(scale = new SoScale);
      scale->scaleFactor = SbVec3f(0.2f, 0.2f, 0.2f);
      SoInput in;
      in.setBuffer((void *)COIN_LOGO,strlen(COIN_LOGO));
      SoNode *logo;
      SoDB::read(&in,logo);
      particles[i].p->addChild(logo);
    };

  };

  root->addChild(cubematerial = new SoMaterial);
  cubematerial->transparency.setValue(0.3f);
  cubematerial->ambientColor=SbVec3f(1.0f, 0.0f, 0.0f);

  SoTransform *xf;
  root->addChild(xf = new SoTransform);
  xf->translation = SbVec3f(0.0f, -8.0f, 0.0f);

  SoCube *cube;
	root->addChild(cube = new SoCube);
  cube->width = 25.0f;
  cube->height = 0.3f;
  cube->depth = 25.0f;

	SbViewportRegion vp;
	vp.setWindowSize(SbVec2s(400, 400));

  So@Gui@ExaminerViewer * viewer = new So@Gui@ExaminerViewer( window );

  viewer->setSceneGraph( root );

	viewer->setViewportRegion(vp);
  camera->viewAll(root, vp);
  float x,y,z;
  SbVec3f cpos;
  cpos = camera->position.getValue();
  cpos.getValue(x, y, z);
  camera->position.setValue(0.0f, -5.0f, 20.0f);
  camera->nearDistance = 1.0f;
  camera->farDistance = 100.0f;

  SoTimerSensor *timerSensor;
	timerSensor = new SoTimerSensor(timerSensorCallback, NULL);
  timerSensor->setInterval(SbTime(0, 1000*10));
	timerSensor->schedule();

  lasttime = SbTime::getTimeOfDay();
  starttime = lasttime;

  camera->viewAll(root, vp);

#ifdef HAVE_SOGLRENDERACTION_SORTED_OBJECT_SORTED_TRIANGLE_BLEND
  viewer->setTransparencyType( SoGLRenderAction::SORTED_OBJECT_SORTED_TRIANGLE_BLEND );
#else // !HAVE_SOGLRENDERACTION_SORTED_OBJECT_SORTED_TRIANGLE_BLEND
  viewer->setTransparencyType( SoGLRenderAction::SORTED_OBJECT_BLEND );
#endif // !HAVE_SOGLRENDERACTION_SORTED_OBJECT_SORTED_TRIANGLE_BLEND

  viewer->setDecoration(FALSE);

  viewer->show();
  So@Gui@::show( window );

#ifdef HAVE_SOCOMPONENT_SETFULLSCREEN
  // Must do this _after_ show() to avoid the "Start"-bar being
  // visible with SoWin. (Bug!)
  (void)viewer->setFullScreen(TRUE);
#endif // HAVE_SOCOMPONENT_SETFULLSCREEN

  So@Gui@::mainLoop();

  delete [] particles;

  return 0;
} // main()
