/**************************************************************************\
 *
 *  This file is part of a set of demo programs for the Coin library.
 *  Copyright (C) 2000-2001 by Systems in Motion. All rights reserved.
 *
 *  This sourcecode can be redistributed and/or modified under the
 *  terms of the GNU General Public License version 2 as published by
 *  the Free Software Foundation. See the file COPYING at the root
 *  directory of the distribution for more details.
 *
 *  As a special exception, all sourcecode of the demo examples can be
 *  used for any purpose for licensees of the Coin Professional
 *  Edition License, without the restrictions of the GNU GPL. See our
 *  web pages for information about how to acquire a Professional Edition
 *  License.
 *
 *  Systems in Motion, Prof Brochs gate 6, 7030 Trondheim, NORWAY
 *  http://www.sim.no support@sim.no Voice: +47 22114160 Fax: +47 22207097
 *
\**************************************************************************/

#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/SoPickedPoint.h>
#include <Inventor/actions/SoRayPickAction.h>
#include <Inventor/events/SoMouseButtonEvent.h>
#include <Inventor/nodes/SoCone.h>
#include <Inventor/nodes/SoEventCallback.h>
#include <Inventor/nodes/SoSeparator.h>

// *************************************************************************

static void
event_cb(void * ud, SoEventCallback * n)
{
  const SoMouseButtonEvent * mbe = (SoMouseButtonEvent *)n->getEvent();

  if (mbe->getButton() == SoMouseButtonEvent::BUTTON1 &&
      mbe->getState() == SoButtonEvent::DOWN) {
    So@Gui@ExaminerViewer * viewer = (So@Gui@ExaminerViewer *)ud;

    SoRayPickAction rp( viewer->getViewportRegion() );
    rp.setPoint(mbe->getPosition());
    rp.apply(viewer->getSceneGraph());

    SoPickedPoint * point = rp.getPickedPoint();
    if (point == NULL) {
      (void)fprintf(stderr, "miss!\n");
      return;
    }

    SbVec3f v = point->getPoint();
    SbVec3f nv = point->getNormal();
    (void)fprintf(stdout, "point=<%f, %f, %f>, normvec=<%f, %f, %f>\n",
                  v[0], v[1], v[2], nv[0], nv[1], nv[2]);

    n->setHandled();
  }
}

// *************************************************************************

int
main(
  int argc,
  char ** argv )
{
  @WIDGET@ window = So@Gui@::init( argv[0] );

  So@Gui@ExaminerViewer * viewer = new So@Gui@ExaminerViewer( window );

  SoSeparator * sep = new SoSeparator;
  sep->ref();

  SoEventCallback * ecb = new SoEventCallback;
  ecb->addEventCallback(SoMouseButtonEvent::getClassTypeId(), event_cb, viewer);
  sep->addChild(ecb);

  sep->addChild(new SoCone);

  viewer->setSceneGraph( sep );
  viewer->show();
  So@Gui@::show( window );

  So@Gui@::mainLoop();

  delete viewer;
  sep->unref();
  return 0;
} // main()

// *************************************************************************
