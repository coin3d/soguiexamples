/**************************************************************************\
 *
 *  This file is part of a set of demo programs for the Coin library.
 *  Copyright (C) 2000-2001 by Systems in Motion. All rights reserved.
 *
 *  This sourcecode can be redistributed and/or modified under the
 *  terms of the GNU General Public License version 2 as published by
 *  the Free Software Foundation. See the file COPYING at the root
 *  directory of the distribution for more details.
 *
 *  As a special exception, all sourcecode of the demo examples can be
 *  used for any purpose for licensees of the Coin Professional
 *  Edition License, without the restrictions of the GNU GPL. See our
 *  web pages for information about how to acquire a Professional Edition
 *  License.
 *
 *  Systems in Motion, Prof Brochs gate 6, 7030 Trondheim, NORWAY
 *  http://www.sim.no support@sim.no Voice: +47 22114160 Fax: +47 22207097
 *
\**************************************************************************/

#include <stdlib.h> // rand()
#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/events/SoKeyboardEvent.h>
#include <Inventor/nodes/SoCoordinate3.h>
#include <Inventor/nodes/SoDrawStyle.h>
#include <Inventor/nodes/SoEventCallback.h>
#include <Inventor/nodes/SoPointSet.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/SbBox.h>

// *************************************************************************

// Return random value between 0.0f and 1.0f.
static float
normalized_rand(void)
{
  return (float)rand() / (float)RAND_MAX;
}

// *************************************************************************

// Set up random coordinate values within the given container limits
// for the float-triplet vector array.
static void
setup_random_coordinates(float xyz[][3], int number, SbBox3f container)
{
  SbVec3f cmin = container.getMin();
  SbVec3f cmax = container.getMax();
  SbVec3f randrange(cmax[0] - cmin[0], cmax[1] - cmin[1], cmax[2] - cmin[2]);

  for (int i=0; i < number; i++) {
    xyz[i][0] = normalized_rand() * randrange[0] + cmin[0];
    xyz[i][1] = normalized_rand() * randrange[1] + cmin[1];
    xyz[i][2] = normalized_rand() * randrange[2] + cmin[2];
  }
}

// *************************************************************************

// React to "arrow up" or "arrow down" keyboard events by changing the
// pointsize setting.
static void
eventcb(void * userdata, SoEventCallback * node)
{
  const SoEvent * event = node->getEvent();
  SoDrawStyle * drawstyle = (SoDrawStyle *)userdata;

  float oldpointsize = drawstyle->pointSize.getValue();
  float newpointsize = oldpointsize;
  if (SO_KEY_PRESS_EVENT(event, UP_ARROW)) {
    newpointsize += 1;
    node->setHandled();
  }
  else if (SO_KEY_PRESS_EVENT(event, DOWN_ARROW)) {
    newpointsize -= 1;
    node->setHandled();
  }

  if (newpointsize != oldpointsize) {
    drawstyle->pointSize = newpointsize;
    (void)fprintf(stdout, "pointsize: %.1f -> %.1f\n",
                  oldpointsize, newpointsize);
  }
}

// *************************************************************************

int
main(int argc, char ** argv)
{
  const int NUMPOINTS = 5000;
  float xyz[NUMPOINTS][3];

  @WIDGET@ window = So@Gui@::init(argv[0]);

  SoSeparator * root = new SoSeparator;
  root->ref();

  SoCoordinate3 * coord3 = new SoCoordinate3;
  setup_random_coordinates(xyz, NUMPOINTS, SbBox3f(-0.5f, -0.5f, -0.5f,
                                                   0.5f, 0.5f, 0.5f));
  coord3->point.setValues(0, NUMPOINTS, xyz);
  root->addChild(coord3);

  SoDrawStyle * drawstyle = new SoDrawStyle;
  drawstyle->pointSize = 1;
  root->addChild(drawstyle);

  SoPointSet * pointset = new SoPointSet;
  root->addChild(pointset);

  SoEventCallback * cb = new SoEventCallback;
  cb->addEventCallback(SoKeyboardEvent::getClassTypeId(), eventcb, drawstyle);
  root->insertChild(cb, 0);

  So@Gui@ExaminerViewer * viewer = new So@Gui@ExaminerViewer(window);
  viewer->setViewing(FALSE);
  viewer->setSceneGraph(root);
  viewer->show();
  So@Gui@::show(window);

  So@Gui@::mainLoop();

  root->unref();
  delete viewer;
  return 0;
}
