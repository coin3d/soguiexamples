/**************************************************************************\
 * Copyright (c) Kongsberg Oil & Gas Technologies AS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\**************************************************************************/

#include <cstdlib> // exit()
#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoTexture2.h>
#include <Inventor/nodes/SoTextureCoordinateEnvironment.h>
#include <Inventor/nodes/SoShapeHints.h>
#include <Inventor/nodes/SoSphere.h>
#include <Inventor/nodes/SoTransform.h>

// Global constants
const int texturewidth = 256;
const int textureheight = 256;

// Global pointer
unsigned char * bitmap = new unsigned char[texturewidth*textureheight];

// Function to generate a julia set
// Parameters:
//  double cr   - r julia set point
//  double ci   - i julia set point
//  float zoom  - length of the square to display (zoom*zoom), center (0,0)
//  int width   - width of the bitmap
//  int height  - height of the bitmap
//  int mult    - number to multiply each color by.
//  unsigned char * bmp - pointer to the bitmap
//  int n       - number of iterations 
void
julia(double cr, double ci, float zoom, int width, int height, int mult, 
      unsigned char * bmp, int n)
{
  double zr, zr_old, zi;
  int w;

  for (int y=0; y<height/2; y++)
    for (int x=0; x<width; x++) {
      zr = ((double)(x)/(double)width)*zoom-zoom/2;
      zi = ((double)(y)/(double)height)*zoom-zoom/2;
      for (w = 0; (w < n) && (zr*zr+zi*zi)<n; w++) {
        zr_old = zr;
        zr = zr*zr - zi*zi + cr;
        zi = 2*zr_old*zi + ci;
      }
      bmp[y*width+x] = w*mult;
      bmp[((height-y)*width-1)-x] = w*mult;
    }
}

// Function that loads a texture from memory, and return a pointer to a
// SoTexture2 node containing this texture..
// Return:
//  SoTexture2 *
SoTexture2 *
texture()
{
  SoTexture2 * texture = new SoTexture2;
  texture->image.setValue(SbVec2s(texturewidth, textureheight), 1, bitmap);
  texture->model = SoTexture2::BLEND;
  texture->blendColor.setValue(0.2f, 0.0f, 1.0f);
  return texture;
}
// Function that sets up the object in the scene
// Return:
//  SoSeparator *
SoSeparator *
scene()
{
  SoSeparator * sep = new SoSeparator;
  SoTransform * t1 = new SoTransform;
  SoTransform * t2 = new SoTransform;
  t1->translation.setValue(0.5f, 1.0f, 0.0f);
  t1->scaleFactor.setValue(0.5f, 1.5f, 1.11f);
  t2->translation.setValue(-1.0f, 0.0f, 0.0f);
  t2->scaleFactor.setValue(1.5f, 0.4f, 1.2f);
  sep->addChild(t1);
  sep->addChild(new SoSphere);
  sep->addChild(t2);
  sep->addChild(new SoSphere);
  return sep;
}

// Function that setup up and returns a SoTextureCoordinateEnvironment node.
// Return:
//  SoTextureCoordinateEnvironment *
SoTextureCoordinateEnvironment *
environment()
{
  SoTextureCoordinateEnvironment * env = new SoTextureCoordinateEnvironment;
  return env;
}

int 
main (int, char ** argv) 
{
  (void)printf("This example shows how to use the SoTextureCoordinateEnvironment node.\n");
  // Generate a julia set to use as a texturemap
  julia(0.0, 0.75, 2.0, texturewidth, textureheight, 2, bitmap, 128);

  // Initialize
  @WIDGET@ window = So@Gui@::init(argv[0]);
  if (window==NULL) exit(1);

  // Enable backface culling
  SoShapeHints * hints = new SoShapeHints;

  hints->vertexOrdering = SoShapeHints::COUNTERCLOCKWISE;
  hints->shapeType = SoShapeHints::SOLID;

  // Create scene graph
  SoSeparator * root = new SoSeparator;

  root->ref();  // increments the root's reference counter
  root->addChild(hints);
  root->addChild(environment());
  root->addChild(texture());
  root->addChild(scene());

  // Setting up the ExaminerViewer
  So@Gui@ExaminerViewer *viewer = new So@Gui@ExaminerViewer(window);
  viewer->setSceneGraph(root);
  viewer->setTitle("Environmentmapping");
  viewer->viewAll();
  viewer->show();

  So@Gui@::show(window); // display the main window
  So@Gui@::mainLoop();   // main Coin event loop
  delete viewer;      // free up all the viewer's resources
  root->unref();      // decrements the root's reference counter
  return 0;
}
