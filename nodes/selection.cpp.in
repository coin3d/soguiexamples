/**************************************************************************\
 * Copyright (c) Kongsberg Oil & Gas Technologies AS
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\**************************************************************************/

#include <cstdlib>
#include <ctime>

#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/actions/SoBoxHighlightRenderAction.h>
#include <Inventor/nodes/SoBaseColor.h>
#include <Inventor/nodes/SoCone.h>
#include <Inventor/nodes/SoCube.h>
#include <Inventor/nodes/SoCylinder.h>
#include <Inventor/nodes/SoSelection.h>
#include <Inventor/nodes/SoSphere.h>
#include <Inventor/nodes/SoTranslation.h>
#include <Inventor/SoDB.h>
#include <Inventor/SoInput.h>

// *************************************************************************

// Global data.
static SoSelection * selection = NULL;

// *************************************************************************

// Callback function triggered for selection / deselection.
void
made_selection(void * userdata, SoPath * path)
{
  (void)fprintf(stdout, "%sselected %s\n",
                 userdata == (void *)1L ? "" : "de",
                 path->getTail()->getTypeId().getName().getString());

  selection->touch(); // to redraw
}

// *************************************************************************

// Construct a scene graph by setting up a "cube" matrix of random
// complex shapes.
SoNode *
make_shapes_cube(void)
{
  srand((unsigned int) time(NULL));

  SoSeparator * topsep = new SoSeparator;

  for (int x = 0; x < 3; x++) {
    for (int y = 0; y < 3; y++) {
      for (int z = 0; z < 3; z++) {
        SoSeparator * sep = new SoSeparator;
        topsep->addChild(sep);

        SoBaseColor * basecol = new SoBaseColor;
        basecol->rgb.setValue(float(rand())/float(RAND_MAX),
                               float(rand())/float(RAND_MAX),
                               float(rand())/float(RAND_MAX));
        sep->addChild(basecol);

        SoTranslation * trans = new SoTranslation;
        trans->translation.setValue(x * 5.0f, y * 5.0f, z * 5.0f);
        sep->addChild(trans);

        const SoType shapes[] = { SoCube::getClassTypeId(),
                                  SoCone::getClassTypeId(),
                                  SoCylinder::getClassTypeId(),
                                  SoSphere::getClassTypeId() };

        int shapeidx = rand() % 4;
        sep->addChild((SoNode *)shapes[shapeidx].createInstance());
      }
    }
  }

  return topsep;
}

// *************************************************************************

// Print a quick instructions notice on stdout.
void
show_instructions(void)
{
  (void)fprintf(stdout, "\nThis example program demonstrates the use of the SoSelection node type.\n");
  (void)fprintf(stdout, "\nQuick instructions:\n\n");
  (void)fprintf(stdout, "  * pick with left mouse button\n");
  (void)fprintf(stdout, "  * hold SHIFT to select multiple objects\n");
  (void)fprintf(stdout, "  * hit ESC to toggle back and forth to view mode\n");
  (void)fprintf(stdout, "\nIt is possible to specify a file to load as the first argument.\n");
  (void)fprintf(stdout, "\n");
}

// *************************************************************************

int
main(int argc, char ** argv)
{
  @WIDGET@ window = So@Gui@::init(argv[0]);

  show_instructions();

  selection = new SoSelection;
  selection->policy = SoSelection::SHIFT;
  selection->ref();

  SoNode * root = NULL;
  if (argc > 1) {
    SoInput in;
    if (in.openFile(argv[1])) {
      root = SoDB::readAll(&in);
    }
  }
  if (!root) root = make_shapes_cube();
  selection->addChild(root);
  selection->addSelectionCallback(made_selection, (void *)1L);
  selection->addDeselectionCallback(made_selection, (void *)0L);

  SoBoxHighlightRenderAction * renderaction = new SoBoxHighlightRenderAction;

  So@Gui@ExaminerViewer * examinerviewer = new So@Gui@ExaminerViewer(window);
  examinerviewer->setSceneGraph(selection);
  examinerviewer->setGLRenderAction(renderaction);
  examinerviewer->setViewing(FALSE);
  examinerviewer->show();

  So@Gui@::show(window);
  So@Gui@::mainLoop();

  delete examinerviewer;
  delete renderaction;
  selection->unref();

  return 0;
} // main()

// *************************************************************************
