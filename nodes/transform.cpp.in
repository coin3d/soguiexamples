/**************************************************************************\
 * Copyright (c) Kongsberg Oil & Gas Technologies AS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\**************************************************************************/

#include <cstdlib> // exit()
#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/SbBasic.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoTransform.h>
#include <Inventor/nodes/SoCube.h>
#include <Inventor/nodes/SoShapeHints.h>

// Function for generating the scene graph by using the SoTransform
// and SoCube nodes.
// Parameters:
//  float t : translation steps
//  float r : rotation steps
//  float s : scaleFactor steps
//  int n   : number of iterations
//  int flag: direction (must be 0)
// Return:
//  SoSeparator *
SoSeparator *
scene(float t, float r, float s, int n, int flag)
{
  SoSeparator * tg = new SoSeparator;

  SoTransform * transf = new SoTransform;
  tg->addChild(transf);
  tg->addChild(new SoCube);

  if (n>0) {
    if (flag==0) {
      tg->addChild(scene(t, r, s, n-1, 1));
      tg->addChild(scene(t, r, s, n-1, 2));
      tg->addChild(scene(t, r, s, n-1, 3));
      tg->addChild(scene(t, r, s, n-1, 4));
      tg->addChild(scene(t, r, s, n-1, 5));
      tg->addChild(scene(t, r, s, n-1, 6));
    }
    else if (flag==1) {
      transf->translation.setValue(t, 0.0f, 0.0f);
      transf->rotation.setValue(SbVec3f(1, 0, 0), r);
      transf->scaleFactor.setValue(s, s, s);
      tg->addChild(scene(t, r, s, n-1, 1));
    }
    else if (flag==2) {
      transf->translation.setValue(-t, 0.0f, 0.0f);
      transf->rotation.setValue(SbVec3f(1, 0, 0), -r);
      transf->scaleFactor.setValue(s, s, s);
      tg->addChild(scene(t, r, s, n-1, 2));
    }
    else if (flag==3) {
      transf->translation.setValue(0.0f, t, 0.0f);
      transf->rotation.setValue(SbVec3f(0, 1, 0), r);
      transf->scaleFactor.setValue(s, s, s);
      tg->addChild(scene(t, r, s, n-1, 3));
    }
    else if (flag==4) {
      transf->translation.setValue(0.0f, -t, 0.0f);
      transf->rotation.setValue(SbVec3f(0, 1, 0), -r);
      transf->scaleFactor.setValue(s, s, s);
      tg->addChild(scene(t, r, s, n-1, 4));
    }
    else if (flag==5) {
      transf->translation.setValue(0.0f, 0.0f, t);
      transf->rotation.setValue(SbVec3f(0, 0, 1), r);
      transf->scaleFactor.setValue(s, s, s);
      tg->addChild(scene(t, r, s, n-1, 5));
    }
    else {
      transf->translation.setValue(0.0f, 0.0f, -t);
      transf->rotation.setValue(SbVec3f(0, 0, 1), -r);
      transf->scaleFactor.setValue(s, s, s);
      tg->addChild(scene(t, r, s, n-1, 6));
    }
  }

  return tg;
}

int
main(int, char ** argv)
{
  (void)printf("This example shows how to use the SoTransform node's translation, rotation and scaleFactor\n");

  // Initialize Coin, and return a main window to use
  // If unsuccessful, exit
  @WIDGET@ window = So@Gui@::init(argv[0]); // pass the application name
  if (window==NULL) exit(1);

  // Create scene graph
  SoSeparator * root = new SoSeparator;
  SoShapeHints * hints = new SoShapeHints;

  // Enable backface culling
  hints->vertexOrdering = SoShapeHints::COUNTERCLOCKWISE;
  hints->shapeType = SoShapeHints::SOLID;

  root->ref();                // Increments the reference counter
  root->addChild(hints);
  root->addChild(scene(3.0f, float(M_PI)/8.0f, 0.8f, 10, 0));

  // Set up ExaminerViewer
  So@Gui@ExaminerViewer * viewer = new So@Gui@ExaminerViewer(window);
  viewer->setSceneGraph(root);
  viewer->setTitle("Transform");
  viewer->viewAll();
  viewer->show();

  So@Gui@::show(window); // display main window
  So@Gui@::mainLoop();   // main Coin event loop
  delete viewer;      // remove the viewer from memory
  root->unref();      // Decrements the reference counter
  return 0;
}
