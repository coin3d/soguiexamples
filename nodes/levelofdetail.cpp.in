/**************************************************************************\
 * Copyright (c) Kongsberg Oil & Gas Technologies AS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\**************************************************************************/

#include <cstdlib> // exit()
#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoShapeHints.h>
#include <Inventor/nodes/SoTranslation.h>
#include <Inventor/nodes/SoScale.h>
#include <Inventor/nodes/SoLevelOfDetail.h>
#include <Inventor/nodes/SoMaterial.h>
#include <Inventor/nodes/SoCube.h>

// Globals
float levelofdetailvalues[] = { 150*150,
                                100*100, 
                                50*50,
                                25*25 };

// Function that generates a cube of cubes.
// Parameters:
//  float t - translation steps
//  float s - scalefactor
//  int n   - number of cubes in XYZ directions.
// Return:
//  SoSeparator *
SoSeparator *
cubeOfCubes(float t, float s, int n)
{
  SoSeparator * sep = new SoSeparator;
  SoSeparator * lsep = new SoSeparator;
  SoTranslation * ti = new SoTranslation;
  SoTranslation * tx = new SoTranslation;
  SoTranslation * ty = new SoTranslation;
  SoTranslation * tz = new SoTranslation;
  SoScale * sc = new SoScale;

  ti->translation.setValue(-t*((float)n/2.0f), 
                           -t*((float)n/2.0f),  
                           -t*((float)n/2.0f));
  tx->translation.setValue(t, 0.0f, 0.0f);
  ty->translation.setValue(-t*(float)n, t, 0.0f);
  tz->translation.setValue(0, -t*(float)n, t);
  sc->scaleFactor.setValue(s, s, s);

  lsep->addChild(sc);
  lsep->addChild(new SoCube);

  sep->addChild(ti);
  for (int z = 0; z < n; z++) {
    for (int y = 0; y < n; y++) {
      for (int x = 0; x < n; x++) {
        sep->addChild(lsep);
        sep->addChild(tx);
      }
      sep->addChild(ty);
    }
    sep->addChild(tz);
  }
  return sep;
}

// Function for generating the scene graph
// Return:
//  SoSeparator *
SoSeparator *
scene( )
{
  SoSeparator * sep = new SoSeparator;
  SoShapeHints * hints = new SoShapeHints;
  SoMaterial * material = new SoMaterial;
  SoLevelOfDetail * detail = new SoLevelOfDetail;

  hints->vertexOrdering = SoShapeHints::COUNTERCLOCKWISE;
  hints->shapeType = SoShapeHints::SOLID;
  material->diffuseColor.setValue(1.0f, 1.0f, 0.5f);

  detail->addChild(cubeOfCubes(3.0f, 1.0f, 6));
  detail->addChild(cubeOfCubes(3.6f, 1.2f, 5));
  detail->addChild(cubeOfCubes(4.5f, 1.5f, 4));
  detail->addChild(cubeOfCubes(6.0f, 2.0f, 3));
  detail->addChild(cubeOfCubes(9.0f, 3.0f, 2));
  detail->screenArea.setValues(0, 4, levelofdetailvalues);

  sep->addChild(hints);
  sep->addChild(material);
  sep->addChild(detail);

  return sep;
}

int
main (int, char ** argv)
{
  (void)printf("This example shows how to use the SoLevelOfDetail node.\n"
               "This node is supposed to be used to remove all unnecessary\n"
               "details from the object when it is viewed at from\n"
               "different distances. This object was made for demonstration\n"
               "purposes only.\n\n"
               "Use the examinerviewer's dolly wheel to see the effect.\n");
  // Initialize
  @WIDGET@ window = So@Gui@::init(argv[0]);
  if (window == NULL) exit(1);

  // Scene graph
  SoSeparator * root = new SoSeparator;
  root->ref();

  root->addChild(scene());
  
  // Set up the examinerviewer
  So@Gui@ExaminerViewer * viewer = new So@Gui@ExaminerViewer(window);
  viewer->setSceneGraph(root);
  viewer->setTitle("Level of Detail");
  viewer->viewAll();
  viewer->show();

  So@Gui@::show(window); // display main window
  So@Gui@::mainLoop();   // main Coin event loop
  delete viewer;
  root->unref();
  return 0;
}
