/**************************************************************************\
 * Copyright (c) Kongsberg Oil & Gas Technologies AS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\**************************************************************************/

#include <stdlib.h> // exit()
#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoSphere.h>
#include <Inventor/nodes/SoCylinder.h>
#include <Inventor/nodes/SoShapeHints.h>
#include <Inventor/nodes/SoAnnotation.h>
#include <Inventor/nodes/SoMaterial.h>
#include <Inventor/nodes/SoDrawStyle.h>
#include <Inventor/nodes/SoComplexity.h>
#include <Inventor/nodes/SoShuttle.h>
#include <Inventor/nodes/SoTranslation.h>

// Function to set up a solid sphere, and a line sphere 
//  with a complexity node.
// Parameter
//  int type  = type of complexity
//              SoComplexity::OBJECT_SPACE
//              SoCOmplexity::SCREEN_SPACE
// Return:
//  SoSeparator *
SoSeparator *
complexity(int type, SbVec3f col1, SbVec3f col2)
{
  SoSeparator * sep = new SoSeparator;
  // FIXME: using an SoAnnotation is _not_ the correct strategy for
  // overlaying the wireframe on top of the filled graphics.  Should
  // use an SoPolygonOffset node instead. 20010910 mortene.
  SoAnnotation * annotation = new SoAnnotation; // disable the z-buffer
  SoComplexity * complexity = new SoComplexity;
  SoDrawStyle * dstyle = new SoDrawStyle;
  SoMaterial * mat1 = new SoMaterial;
  SoMaterial * mat2 = new SoMaterial;
  SoSphere * sphere = new SoSphere;

  complexity->type.setValue(type);
  if (type==SoComplexity::SCREEN_SPACE)
    complexity->value.setValue(0.11);
  else
    complexity->value.setValue(0.5);
  dstyle->style = SoDrawStyle::LINES;
  mat1->diffuseColor.setValue(col1);
  mat2->diffuseColor.setValue(col2);

  sep->addChild(complexity);
  sep->addChild(mat1);
  sep->addChild(sphere);
  sep->addChild(annotation);
  annotation->addChild(dstyle);
  annotation->addChild(mat2);
  annotation->addChild(sphere);
  return sep;
}

// Function that generates the Scene Graph
// Return:
//  SoSeparator *
SoSeparator *
scene()
{
  SoSeparator * sep = new SoSeparator;
  SoShapeHints * hints = new SoShapeHints;
  SoShuttle * shuttle = new SoShuttle;
  SoTranslation * t1 = new SoTranslation;
  SoTranslation * t2 = new SoTranslation;

  hints->vertexOrdering = SoShapeHints::COUNTERCLOCKWISE;
  hints->shapeType = SoShapeHints::SOLID;
  t1->translation.setValue(-1.0, 0.0, 0.0);
  t2->translation.setValue(2.0, 0.0, 0.0);
  shuttle->translation0.setValue(0.0, 0.0, 5.0);
  shuttle->translation0.setValue(0.0, 0.0, -5.0);
  shuttle->speed = 0.5;

  sep->addChild(hints);
  sep->addChild(shuttle);
  sep->addChild(t1);
  sep->addChild(complexity(SoComplexity::OBJECT_SPACE, 
                           SbVec3f(1.0, 0.0, 0.0),
                           SbVec3f(0.0, 0.0, 1.0)));
  sep->addChild(t2);
  sep->addChild(complexity(SoComplexity::SCREEN_SPACE,
                           SbVec3f(0.0, 0.0, 1.0),
                           SbVec3f(1.0, 0.0, 0.0)));
  return sep;
}

int
main (int, char ** argv)
{
  (void)printf("This example shows how to use the SoComplexity node.\n");

  // Initialize
  @WIDGET@ window = So@Gui@::init(argv[0]);
  if (window==NULL) exit(1);

  // Scene graph
  SoSeparator * root = new SoSeparator;
  root->ref();

  root->addChild(scene());
  // Set up the examiner viewer
  So@Gui@ExaminerViewer * viewer = new So@Gui@ExaminerViewer(window);
  viewer->setSceneGraph(root);
  viewer->setTitle("Complexity (Object VS Screen space)");
  viewer->viewAll();
  viewer->show();

  So@Gui@::show(window); // display main window
  So@Gui@::mainLoop();   // main Coin event loop
  delete viewer;
  root->unref();
  return 0;
}
