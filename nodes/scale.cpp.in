/**************************************************************************\
 *
 *  This file is part of a set of demo programs for the Coin library.
 *  Copyright (C) 2000-2001 by Systems in Motion. All rights reserved.
 *
 *  This sourcecode can be redistributed and/or modified under the
 *  terms of the GNU General Public License version 2 as published by
 *  the Free Software Foundation. See the file COPYING at the root
 *  directory of the distribution for more details.
 *
 *  As a special exception, all sourcecode of the demo examples can be
 *  used for any purpose for licensees of the Coin Professional
 *  Edition License, without the restrictions of the GNU GPL. See our
 *  web pages for information about how to acquire a Professional Edition
 *  License.
 *
 *  Systems in Motion, Prof Brochs gate 6, 7030 Trondheim, NORWAY
 *  http://www.sim.no support@sim.no Voice: +47 22114160 Fax: +47 22207097
 *
\**************************************************************************/

#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoTranslation.h>
#include <Inventor/nodes/SoScale.h>
#include <Inventor/nodes/SoCube.h>
#include <Inventor/nodes/SoShapeHints.h>

// Function for generating the scenegraph using only the SoScale
// and SoTranslation nodes
// Parameters:
//  float x   : translation between each cube in the x-direction
//  float y   : translation between each cube in the y-direction
//  float z   : translation between each cube in the z-direction
//  float s     scale factor
//  int n     : number of itterations
//  int flag  : 0 = x-direction
//              1 = y-direction
//              2... = z-direction 
// Return:
//  SoSeparator *
SoSeparator *
scene(float x, float y, float z, float s, int n, int flag)
{
  SoSeparator * tg = new SoSeparator;

  SoScale * scale = new SoScale;
  scale->scaleFactor.setValue(s, s, s);

  if (n>0) {
    if (flag==0) {
      SoTranslation * tx = new SoTranslation;
      tx->translation.setValue(x, 0, 0);
      tg->addChild(tx);
      tg->addChild(scale);
      tg->addChild(new SoCube);
      tg->addChild(scene(x, y, z, s, n, 2));
      tg->addChild(scene(x, y, z, s, n-1, 1));
      tg->addChild(scene(x, y, z, s, n-1, 0));
    }
    else if (flag==1) {
      SoTranslation * ty = new SoTranslation;
      ty->translation.setValue(0, y, 0);
      tg->addChild(ty);
      tg->addChild(scale);
      tg->addChild(new SoCube);
      tg->addChild(scene(x, y, z, s, n-1, 1));
    }
    else {
      SoTranslation * tz = new SoTranslation;
      tz->translation.setValue(0, 0, z);
      tg->addChild(new SoCube);
      tg->addChild(tz);
      tg->addChild(scale);
      tg->addChild(scene(x, y, z, s, n-1, 2));
    }
  }

  return tg;
}

int
main(int, char ** argv) 
{
  (void)printf("This example shows how to use the SoScale node\n");
  
  // Initialize Coin, and return a main window to use
  // If unsuccessful, exit
  @WIDGET@ window = So@Gui@::init(argv[0]); // pass the application name
  if (window==NULL) exit(1);
  
  // Create scene graph
  SoSeparator * root = new SoSeparator;
  SoShapeHints * hints = new SoShapeHints;

  // Enable backface culling
  hints->vertexOrdering = SoShapeHints::COUNTERCLOCKWISE;
  hints->shapeType = SoShapeHints::SOLID;

  root->ref();                   // Increments the reference counter
  root->addChild(hints);
  root->addChild(scene(3.0, 3.0, 3.0, 0.8, 10, 0));
  
  // Set up ExaminerViewer
  So@Gui@ExaminerViewer * viewer = new So@Gui@ExaminerViewer(window);
  viewer->setSceneGraph(root);
  viewer->setTitle("Scale");
  viewer->viewAll();
  viewer->show();

  So@Gui@::show(window); // display main window
  So@Gui@::mainLoop();   // main Coin event loop
  delete viewer;      // remove the viewer from memory
  root->unref();      // Decrements the reference counter
  return 0;
}
