/**************************************************************************\
 *
 *  This file is part of a set of demo programs for the Coin library.
 *  Copyright (C) 2000-2001 by Systems in Motion. All rights reserved.
 *
 *  This sourcecode can be redistributed and/or modified under the
 *  terms of the GNU General Public License version 2 as published by
 *  the Free Software Foundation. See the file COPYING at the root
 *  directory of the distribution for more details.
 *
 *  As a special exception, all sourcecode of the demo examples can be
 *  used for any purpose for licensees of the Coin Professional
 *  Edition License, without the restrictions of the GNU GPL. See our
 *  web pages for information about how acquire a Professional Edition
 *  License.
 *
 *  Systems in Motion, Prof Brochs gate 6, 7030 Trondheim, NORWAY
 *  http://www.sim.no support@sim.no Voice: +47 22114160 Fax: +47 22207097
 *
\**************************************************************************/

#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/SbBasic.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoDirectionalLight.h>
#include <Inventor/nodes/SoTransform.h>
#include <Inventor/nodes/SoSphere.h>
#include <Inventor/nodes/SoShapeHints.h>

// Recursive function that generates a scene graph with spheres
// Parameters:
//  float xt - translation in x-direction for each sphere
//  float yt - translation in y-direction for each sphere
//  float zt - translation in z-direction for each sphere
//  int n    - number of spheres 
// Return:
//  SoSeparator *
SoSeparator *
scene(float xt, float yt, float zt, int n)
{
  SoSeparator * sep = new SoSeparator;
  SoTransform * transf = new SoTransform;
  sep->ref();

  if (n>0) {
    transf->translation.setValue(xt, yt, zt);
    transf->rotation.setValue(SbVec3f(0, 0, 1), M_PI/(float)(n+1));
    sep->addChild(transf);
    sep->addChild(new SoSphere);
    sep->addChild(scene(xt, yt, zt, n-1));
  }
  
  sep->unrefNoDelete();
  return sep;
}

int
main(int, char ** argv) {
  (void)printf("This example shows how to use the SoDirectionalLight node\n");
  
  // Initialize
  @WIDGET@ window = So@Gui@::init(argv[0]);
  if (window==NULL) exit(1);
  
  // Enable backface culling
  SoShapeHints * hints = new SoShapeHints;
  
  hints->vertexOrdering = SoShapeHints::COUNTERCLOCKWISE;
  hints->shapeType = SoShapeHints::SOLID;

  // Create scene graph
  SoSeparator * root = new SoSeparator;
  SoDirectionalLight * light = new SoDirectionalLight;
  root->ref();
  root->addChild(hints);

  // Setting up the directional light
  light->color.setValue(1.0, 1.0, 0.5);
  light->intensity.setValue(0.95);
  light->direction.setValue(SbVec3f(-1.5, 1.25, -1.0));
  
  root->addChild(light);
  root->addChild(scene(2.0, 3.0, 2.5, 20));
  
  // Set up the ExaminerViewer
  So@Gui@ExaminerViewer * viewer = new So@Gui@ExaminerViewer(window);
  viewer->setHeadlight(FALSE);
  viewer->setSceneGraph(root);
  viewer->setTitle("Directional Light");
  viewer->viewAll();
  viewer->show();

  So@Gui@::show(window);  // display the main window
  So@Gui@::mainLoop();    // main Coin event loop
  delete viewer;       // free up the viewer's resources
  root->unref();       // decrements the root's reference counter
  return 0;
}
