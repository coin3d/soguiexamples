/**************************************************************************\
 * Copyright (c) Kongsberg Oil & Gas Technologies AS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\**************************************************************************/

#include <cstdlib> // exit()
#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/SbBasic.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoFont.h>
#include <Inventor/nodes/SoText2.h>
#include <Inventor/nodes/SoShuttle.h>
#include <Inventor/nodes/SoPerspectiveCamera.h>
#include <Inventor/nodes/SoCube.h>
#include <Inventor/nodes/SoMaterial.h>

// Function to display a Text2 node with a SoShuttle node movement
// and color.
// Parameters:
//  char * txtstring = text to be displayed
//  SbVec2f pos1     = start position (for the SoShuttle node)
//  SbVec2f pos2     = end position (for the SoShuttle node)
//  float speed      = speed of the movement
//  SbVec3f col      = text color
// Return:
//  SoSeparator *
SoSeparator *
text(const char * txtstring, SbVec2f pos1, SbVec2f pos2, float speed, SbVec3f col)
{
  SoSeparator * sep = new SoSeparator;
  SoShuttle * shuttle = new SoShuttle;
  SoMaterial * material = new SoMaterial;
  SoText2 * txt = new SoText2;

  float x, y;

  txt->string.setValue(txtstring);
  pos1.getValue(x, y);
  shuttle->translation0.setValue(x, y, 0.0f);
  pos2.getValue(x, y);
  shuttle->translation1.setValue(x, y, 0.0f);
  shuttle->speed = speed;
  material->diffuseColor.setValue(col);

  sep->addChild(shuttle);
  sep->addChild(material);
  sep->addChild(txt);

  return sep;
}

// Function to generate the scene graph
// Return:
//  SoSeparator *
SoSeparator *
scene( )
{
  SoSeparator * sep = new SoSeparator;
  SoFont * font = new SoFont;
  SoCube * cube = new SoCube;
  
  cube->width = 30.0f;
  cube->height = 20.0f;
  cube->depth = 1.0f;
  font->name.setValue("Courier");
  font->size.setValue(48.0f);

  sep->addChild(font);
  sep->addChild(text("Coin", SbVec2f(-5.0f, 5.0f), SbVec2f(5.0f, 5.0f), 0.2f,
                SbVec3f(1.0f, 0.0f, 0.0f)));
  sep->addChild(text("by", SbVec2f(1.0f, 2.5f), SbVec2f(1.0f, -2.5f), 0.25f,
                SbVec3f(0.0, 0.0, 1.0)));
  sep->addChild(text("SIM", SbVec2f(5.0f, -5.0f), SbVec2f(-5.0f, -5.0f), 0.3f,
                SbVec3f(0.0f, 1.0f, 0.0f))); 

  return sep;
}

int
main (int, char ** argv)
{
  (void)printf("This example shows how to use the SoText2 node.\n");

  // Initialize
  @WIDGET@ window = So@Gui@::init(argv[0]);
  if (window==NULL) exit(1);

  // Scene graph
  SoSeparator * root = new SoSeparator;
  SoPerspectiveCamera * camera = new SoPerspectiveCamera;
  
  camera->position.setValue(2.5f, 0.0f, 20.0f);

  root->ref();
  root->addChild(camera);
  root->addChild(scene());

  // Set up the examinerviewer
  So@Gui@ExaminerViewer * viewer = new So@Gui@ExaminerViewer(window);

  viewer->setSceneGraph(root);
  viewer->setTitle("Text2");
  viewer->setViewing( FALSE );
  viewer->show();
  
  So@Gui@::show(window); // display main window
  So@Gui@::mainLoop();   // main Coin event loop
  delete viewer;
  root->unref();
  return 0;
}
