/**************************************************************************\
 * Copyright (c) Kongsberg Oil & Gas Technologies AS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\**************************************************************************/

/* Simple example showing how to use SoNurbsSurface and
   SoNurbsProfile.

   The grey "hill" is a basic nurbs surface rendered using
   SoNurbsSurface. The red object is a subset of that curve, specified
   using the SoNurbsProfile node.

   (Note that usually you would not display both the original and the
   trimmed surface - this is only done here for illustrative
   purposes.)
*/


#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>

#include <Inventor/SoDB.h>
#include <Inventor/SoInput.h>
#include <Inventor/SoPickedPoint.h>
#include <Inventor/events/SoLocation2Event.h>
#include <Inventor/nodes/SoBaseColor.h>
#include <Inventor/nodes/SoCone.h>
#include <Inventor/nodes/SoCoordinate3.h>
#include <Inventor/nodes/SoEventCallback.h>
#include <Inventor/nodes/SoMarkerSet.h>
#include <Inventor/nodes/SoSeparator.h>

const char * nurbs = "#Inventor V2.1 ascii\n\n"
  "Complexity { "
  "  value 1 "
  "} "
  "ShapeHints { "
  "  vertexOrdering COUNTERCLOCKWISE "
  "} "
  "Coordinate3 { "
  "   point [  "
  "     -3 -3 -3, -3 -1 -3, -3 1 -3, -3 3 -3, "
  "     -1 -3 -3, -1 -1  3, -1 1  3, -1 3 -3, "
  "      1 -3 -3,  1 -1  3,  1 1  3,  1 3 -3, "
  "      3 -3 -3,  3 -1 -3,  3 1 -3,  3 3 -3 "
  "    ] "
  "} "
  "NurbsSurface { "
  "   numUControlPoints 4 "
  "   numVControlPoints 4 "
  "   uKnotVector [ 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0 ] "
  "   vKnotVector [ 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0 ] "
  "} "
  "Separator {  "
  "  Translation { "
  "    translation 0 0 0.15 "
  "  } "
  "  Material { "
  "    diffuseColor 1 0 0  "
  "    ambientColor 1 0 0  "
  "  } "
  "  Coordinate3 { "
  "   point [  "
  "     -3 -3 -3, -3 -1 -3, -3 1 -3, -3 3 -3, "
  "     -1 -3 -3, -1 -1  3, -1 1  3, -1 3 -3, "
  "      1 -3 -3,  1 -1  3,  1 1  3,  1 3 -3, "
  "      3 -3 -3,  3 -1 -3,  3 1 -3,  3 3 -3 "
  "    ] "
  "  } "
  "  DrawStyle { "
  "    pointSize 5 "
  "  } "
  "  PointSet { } "
  "  ProfileCoordinate2 { "
  "    point [ 0.0 0.0 , "
  "            0.75 0.0, "
  "            0.75 0.75 , "
  "            0.25 0.75 , "
  "            0.0 0.0  ] "
  "  } "
  "  NurbsProfile { "
  "    index [ 0 , 1 , 2 , 3, 4 ] "
  "    linkage START_NEW "
  "    knotVector [ 0, 0, 0, 0, 0.5, 1, 1, 1, 1 ] "
  "  } "
  "  NurbsSurface { "
  "    numUControlPoints 4 "
  "    numVControlPoints 4 "
  "    uKnotVector [ 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0 ] "
  "    vKnotVector [ 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0 ] "
  "  } "
  "}" ; 

int
main(int argc, char ** argv)
{
  @WIDGET@ window = So@Gui@::init(argv[0]);

  SoSeparator *root = new SoSeparator;
  root->ref();

  SoInput in;
  in.setBuffer((void *)nurbs, strlen(nurbs));
  SoSeparator * nurbsep = SoDB::readAll(&in);
  assert(nurbsep);
  root->addChild(nurbsep);

  So@Gui@ExaminerViewer * viewer = new So@Gui@ExaminerViewer(window);
  viewer->setSceneGraph(root);
  viewer->show();
  So@Gui@::show(window);
  So@Gui@::mainLoop();

  delete viewer;
  root->unref();

  return 0;
}
