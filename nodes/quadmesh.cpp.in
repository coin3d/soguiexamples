/**************************************************************************\
 * Copyright (c) Kongsberg Oil & Gas Technologies AS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\**************************************************************************/

#include <cstdlib> // exit()
#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/SbBasic.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoTransform.h>
#include <Inventor/nodes/SoCoordinate3.h>
#include <Inventor/nodes/SoQuadMesh.h>
#include <Inventor/nodes/SoShapeHints.h>

// Vertices for the Quad mesh.
static float vertices[25][3] = {
  // Row 1
  {-11, 0, 1}, {0, 11, 1}, {11, 0, 1}, {0, -11, 1}, {-11, 0, 1},
  // Row 2
  {-9, 0, 1}, {0, 9, 1}, {9, 0, 1}, {0, -9, 1}, {-9, 0, 1},
  // Row 3
  {-9, 0, -1}, {0, 9, -1}, {9, 0, -1}, {0, -9, -1}, {-9, 0, -1},
  // Row 4
  {-11, 0, -1}, {0, 11, -1}, {11, 0, -1}, {0, -11, -1}, {-11, 0, -1},
  // Row 5
  {-11, 0, 1}, {0, 11, 1}, {11, 0, 1}, {0, -11, 1}, {-11, 0, 1}
};

// Recursive function that generates the scene graph.
//
// Parameters:
//  SbVec3f sinit - scale init value
//  SbVec3f sstep - scale step (added to sinit for each iteration)
//  SBVec3f rvec  - Rotation axis
//  float rang    - Rotation angle
//  float n       - number of iterations
// Return:
//  SoSeparator *
static SoSeparator *
scene(SbVec3f sinit, SbVec3f sstep, SbVec3f rvec, float rang, int n)
{
  SoSeparator * sep = new SoSeparator;

  SoCoordinate3 * coords = new SoCoordinate3;
  coords->point.setValues(0, sizeof(vertices)/sizeof(vertices[0]), vertices);
  sep->addChild(coords);
  
  if (n>0) {
    SoTransform * transf = new SoTransform;
    transf->scaleFactor.setValue(sinit);
    transf->rotation.setValue(rvec,rang);
    sep->addChild(transf);

    SoQuadMesh * mesh = new SoQuadMesh;
    mesh->verticesPerRow = 5;
    mesh->verticesPerColumn = 5;
    sep->addChild(mesh);

    sep->addChild(scene(sinit+sstep,sstep,rvec, rang, n-1));
  }
  return sep;
}

int 
main(int ,char ** argv) 
{
  (void)printf("This example shows how to use the SoQuadMesh node.\n");

  // Initialize
  @WIDGET@ window = So@Gui@::init(argv[0]);
  if (window==NULL) exit(1);
  
  // Create scene graph
  SoSeparator * root = new SoSeparator;
  SoShapeHints * hints = new SoShapeHints;

  // Enable backface culling
  hints->vertexOrdering = SoShapeHints::COUNTERCLOCKWISE;
  hints->shapeType = SoShapeHints::SOLID;

  root->ref(); // increments the root's reference counter
  root->addChild(hints);
  root->addChild(scene(SbVec3f(1,1,1),SbVec3f(0.3f, 0.3f, 0.3f),
                       SbVec3f(1, 0, 0), float(M_PI)/5, 5));
 
  // Set up the ExaminerViewer
  So@Gui@ExaminerViewer * viewer = new So@Gui@ExaminerViewer(window);
  viewer->setSceneGraph(root);
  viewer->setTitle("Quad Mesh");
  viewer->viewAll();
  viewer->show();

  So@Gui@::show(window); // display the main window
  So@Gui@::mainLoop();   // main Coin event loop
  delete viewer;      // free up all resources occupied by viewer
  root->unref();      // decrements the root's reference counter
  return 0;
}
