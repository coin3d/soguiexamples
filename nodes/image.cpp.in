/**************************************************************************\
 * Copyright (c) Kongsberg Oil & Gas Technologies AS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\**************************************************************************/

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif // HAVE_CONFIG_H

#ifndef HAVE_SOIMAGE

#include <stdio.h>

int
main(void)
{
  (void)fprintf(stderr,
                "\nThis example needs to be run on top of an Inventor\n"
                "implementation that has the SoImage node (like for\n"
                "instance Coin). This does not seem to be the case here.\n"
                "(Are you perhaps using the old SGI Open Source Inventor?)\n\n");
  return 0;
}

#else // HAVE_SOIMAGE

#include <stdlib.h> // exit()
#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoCamera.h>
#include <Inventor/nodes/SoCube.h>
#include <Inventor/nodes/SoImage.h>
#include <Inventor/sensors/SoTimerSensor.h>

// Function to generate a mandelbrot set.
// Parameters:
//  double sr           = real part of the start point
//  double si           = imaginary part of the start point
//  double width        = width of the mandelbrot
//  double height       = height of the mandelbrot
//  int bwidth          = width of the bitmap
//  int height          = height of the bitmap
//  int mult            = number to multiply each color by
//  unsigned char * bmp = pointer to bitmap
//  int n               = number of iterations.
void
mandel(double sr, double si, double width, double height, 
       int bwidth, int bheight, int mult, unsigned char * bmp, int n)
{
  double zr, zr_old, zi, cr, ci;
  int w;

  for (int y=0; y<bheight; y++)
    for (int x=0; x<bwidth; x++) {
      cr = ((double)(x)/(double)(bwidth))*width+sr;
      ci = ((double)(y)/(double)(bheight))*height+si;
      zr = zi = 0.0;
      for (w = 0; (w < n) && (zr*zr + zi*zi)<n; w++) {
        zr_old = zr;
        zr = zr*zr - zi*zi + cr;
        zi = 2*zr_old*zi + ci;    
      }
      bmp[y*bwidth+x] = w*mult;
    }
}

static void
sensorCB(void * data, SoSensor * sensor)
{
  SoImage * nimage = (SoImage *)data;

  (void)printf("SoImage change: %s\n",
         SbTime::getTimeOfDay().formatDate().getString());

  SbVec2s dimensions;
  int components;
  static float mandeldim = 0.025;

  mandeldim /= 1.05f;

  unsigned char * buffer = nimage->image.startEditing(dimensions, components);
  mandel(-0.5, 0.6, mandeldim, mandeldim, dimensions[0], dimensions[1],
         1, buffer, 128);
  nimage->image.finishEditing();
}

int
main(int argc, char ** argv)
{
  @WIDGET@ mainwin = So@Gui@::init(argv[0]);
  
  SoSeparator * root = new SoSeparator;
  root->ref();

  const int IMGWIDTH = 128;
  const int IMGHEIGHT = 128;
  unsigned char * img = new unsigned char[IMGWIDTH * IMGHEIGHT];
  mandel(-0.5, 0.6, 0.025, 0.025, IMGWIDTH, IMGHEIGHT, 1, img, 128);

  SoImage * nimage = new SoImage;
  nimage->vertAlignment = SoImage::HALF;
  nimage->horAlignment = SoImage::CENTER;
  nimage->image.setValue(SbVec2s(IMGWIDTH, IMGHEIGHT), 1, img);
  root->addChild(nimage);

  SoCube * cube = new SoCube;
  root->addChild(cube);

  So@Gui@ExaminerViewer * viewer = new So@Gui@ExaminerViewer(mainwin);
  viewer->setSceneGraph(root);
  viewer->setTitle("SoImage use");
  viewer->show();

  SoCamera * cam = viewer->getCamera();
  cam->position = SbVec3f(0, 0, 50);
  cam->focalDistance = 50;

  SoTimerSensor * sensor = new SoTimerSensor(sensorCB, nimage);
  sensor->setInterval(1.0);
  sensor->schedule();

  So@Gui@::show(mainwin);
  So@Gui@::mainLoop();

  delete viewer;
  root->unref();
  delete img;
  return 0;
}

#endif // HAVE_SOIMAGE
