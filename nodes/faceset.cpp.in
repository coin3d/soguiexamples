/**************************************************************************\
 *
 *  This file is part of a set of demo programs for the Coin library.
 *  Copyright (C) 2000-2001 by Systems in Motion. All rights reserved.
 *
 *  This sourcecode can be redistributed and/or modified under the
 *  terms of the GNU General Public License version 2 as published by
 *  the Free Software Foundation. See the file COPYING at the root
 *  directory of the distribution for more details.
 *
 *  As a special exception, all sourcecode of the demo examples can be
 *  used for any purpose for licensees of the Coin Professional
 *  Edition License, without the restrictions of the GNU GPL. See our
 *  web pages for information about how to acquire a Professional Edition
 *  License.
 *
 *  Systems in Motion, Prof Brochs gate 6, 7030 Trondheim, NORWAY
 *  http://www.sim.no support@sim.no Voice: +47 22114160 Fax: +47 22207097
 *
\**************************************************************************/

#include <stdlib.h> // exit()
#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/SbBasic.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoFaceSet.h>
#include <Inventor/nodes/SoCoordinate3.h>
#include <Inventor/nodes/SoNormal.h>
#include <Inventor/nodes/SoNormalBinding.h>

// Global pointers
SbVec3f * vertices;
SbVec3f * normals;
int32_t * numvertices;

// Function that generats the object's vertices, normals and number of vertices
// in each polygon.
// Parameters
//  float w - width
//  float h - height
//  float d - depth
void
makeObject(float w, float h, float d)
{
  normals = new SbVec3f[12];
  vertices = new SbVec3f[40];
  numvertices = new int32_t[12];

  normals[0].setValue(  0.0,  0.0,  1.0);
  normals[1].setValue(  1.0,  0.0,  0.0);
  normals[2].setValue(  0.0,  0.0, -1.0);
  normals[3].setValue( -1.0,  0.0,  0.0);
  normals[4].setValue(  0.0,  0.7171, 0.7171);
  normals[5].setValue(  0.7171, 0.7171, 0);
  normals[6].setValue(  0.0,  0.7171, -0.7171);
  normals[7].setValue( -0.7171, 0.7171, 0);
  normals[8].setValue(  0.0,  -0.7171, 0.7171);
  normals[9].setValue(  0.7171, -0.7171, 0);
  normals[10].setValue(  0.0,  -0.7171, -0.7171);
  normals[11].setValue( -0.7171, -0.7171, 0);

  vertices[0].setValue( -w/2.0,  h/4.0,  d/2.0);
  vertices[1].setValue(  w/2.0,  h/4.0,  d/2.0);
  vertices[2].setValue ( w/2.0, -h/4.0,  d/2.0);
  vertices[3].setValue( -w/2.0, -h/4.0,  d/2.0);
  vertices[4].setValue(  w/2.0, -h/4.0,  d/2.0);
  vertices[5].setValue(  w/2.0, -h/4.0, -d/2.0);
  vertices[6].setValue(  w/2.0,  h/4.0, -d/2.0);
  vertices[7].setValue(  w/2.0,  h/4.0,  d/2.0);
  vertices[8].setValue( -w/2.0, -h/4.0, -d/2.0);
  vertices[9].setValue(  w/2.0, -h/4.0, -d/2.0);
  vertices[10].setValue( w/2.0,  h/4.0, -d/2.0);
  vertices[11].setValue(-w/2.0,  h/4.0, -d/2.0);
  vertices[12].setValue(-w/2.0, -h/4.0, -d/2.0);
  vertices[13].setValue(-w/2.0, -h/4.0,  d/2.0);
  vertices[14].setValue(-w/2.0,  h/4.0,  d/2.0);
  vertices[15].setValue(-w/2.0,  h/4.0, -d/2.0);
  vertices[16].setValue(-w/2.0,  h/4.0,  d/2.0);
  vertices[17].setValue(   0.0,  h/2.0,    0.0);
  vertices[18].setValue( w/2.0,  h/4.0,  d/2.0);
  vertices[19].setValue( w/2.0,  h/4.0,  d/2.0);
  vertices[20].setValue(   0.0,  h/2.0,    0.0);
  vertices[21].setValue( w/2.0,  h/4.0, -d/2.0);
  vertices[22].setValue( w/2.0,  h/4.0, -d/2.0);
  vertices[23].setValue(   0.0,  h/2.0,    0.0);
  vertices[24].setValue(-w/2.0,  h/4.0, -d/2.0);
  vertices[25].setValue(-w/2.0,  h/4.0, -d/2.0);
  vertices[26].setValue(   0.0,  h/2.0,    0.0);
  vertices[27].setValue(-w/2.0,  h/4.0,  d/2.0);
  vertices[28].setValue(-w/2.0,  -h/4.0,  d/2.0);
  vertices[29].setValue(   0.0,  -h/2.0,    0.0);
  vertices[30].setValue( w/2.0,  -h/4.0,  d/2.0);
  vertices[31].setValue( w/2.0,  -h/4.0,  d/2.0);
  vertices[32].setValue(   0.0,  -h/2.0,    0.0);
  vertices[33].setValue( w/2.0,  -h/4.0, -d/2.0);
  vertices[34].setValue( w/2.0,  -h/4.0, -d/2.0);
  vertices[35].setValue(   0.0,  -h/2.0,    0.0);
  vertices[36].setValue(-w/2.0,  -h/4.0, -d/2.0);
  vertices[37].setValue(-w/2.0,  -h/4.0, -d/2.0);
  vertices[38].setValue(   0.0,  -h/2.0,    0.0);
  vertices[39].setValue(-w/2.0,  -h/4.0,  d/2.0);

  int n;
  for (n=0; n<4; n++) {
    numvertices[n] = 4;
  }
  for (n=4; n<12; n++) {
    numvertices[n] = 3;
  }
}

// Function to put the object in the scene graph
// Parameters
//  SbVec3f * verts  - vertices
//  int32_t * nverts - number of vertices for each polygon
//  SbVec3f * norms  - normals (for each face)
//  int ncoord       - number of vertices
//  int nface        - number of faces
// Return:
//  SoSeparator *
SoSeparator *
scene(SbVec3f * verts,
      int32_t * nverts,
      SbVec3f * norms,
      int ncoord,
      int nface)
{
  SoSeparator * sep = new SoSeparator;
  
  // define normals (this is optional)
  SoNormal * norm = new SoNormal;
  norm->vector.setValues(0, nface, norms);
  sep->addChild(norm);

  // bind one normal per face
  SoNormalBinding * normb = new SoNormalBinding;
  normb->value = SoNormalBinding::PER_FACE;
  sep->addChild(normb);
  
  // define coords
  SoCoordinate3 * coord = new SoCoordinate3;
  coord->point.setValues(0, ncoord, verts);
  sep->addChild(coord);
  
  // define face set
  SoFaceSet * fs = new SoFaceSet;
  fs->numVertices.setValues(0, nface, nverts);
  sep->addChild(fs);

  return sep;
}


int
main (int, char ** argv)
{
  (void)printf("This example shows how to use the SoFaceSet node.\n");

  // Create test object's coordinates, normals and number 
  (void)makeObject(1, 3, 2);

  // Initialize
  @WIDGET@ window = So@Gui@::init(argv[0]);
  if (window==NULL) exit(1);

  // Scene graph
  SoSeparator * root = new SoSeparator;
  root->ref();
  root->addChild(scene(vertices, numvertices, normals, 40, 12));

  // Set up the examiner viewer
  So@Gui@ExaminerViewer * viewer = new So@Gui@ExaminerViewer(window);
  viewer->setSceneGraph(root);
  viewer->setTitle("Face Set");
  viewer->viewAll();
  viewer->show();

  So@Gui@::show(window); // display the main window
  So@Gui@::mainLoop();   // main Coin event loop
  delete viewer;      // free up the viewer's resources
  root->unref();      // decrements the root's reference counter
  return 0;
}
